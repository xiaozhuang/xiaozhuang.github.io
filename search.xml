<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Vue Note]]></title>
      <url>http://xiaozhuang.github.io/2018/11/20/vue-note/</url>
      <content type="html"><![CDATA[<p>Vue Note<br><a id="more"></a></p>
<h1 id="cli"><a href="#cli" class="headerlink" title="cli"></a>cli</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">num install --global vue-cli</div><div class="line"><span class="comment"># 初始化vue webpack 工程</span></div><div class="line">vue init webpack</div></pre></td></tr></table></figure>
<h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>el 用于指定页面中已经存在的DOM元素，来挂载Vue实例；可通过app.$el访问该元素。</p>
<p>Vue实例本身也代理了 data 对象的所有属性。</p>
<p>也可以指定一个已有的变量，默认建立双向绑定。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myData = &#123;</div><div class="line">	<span class="attr">a</span> : <span class="number">1</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">	<span class="attr">el</span> : <span class="string">'#app'</span>,</div><div class="line">	<span class="attr">data</span> : myData</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul>
<li>created 实例创建完成后，未挂载</li>
<li>mounted el挂载之后</li>
<li>beforeDestorey 实例销毁之前</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> conf = &#123;</div><div class="line">	<span class="attr">created</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'created'</span>);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">mounted</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'mounted'</span>);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">beforeDestorey</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'beforeDestorey'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="插值与表达式"><a href="#插值与表达式" class="headerlink" title="插值与表达式"></a>插值与表达式</h2><p><code>Mustache</code>语法 将双向绑定的数据显示出来。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> &gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>使用管道符<code>|</code>对数据进行过滤</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 可串联使用多个过滤器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>&#123;&#123;name | bookName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在 filters 项中定义过滤器</span></div><div class="line"><span class="keyword">var</span> filters = &#123;</div><div class="line">	<span class="attr">bookName</span> :<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">'《'</span> + value + <span class="string">"》"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;；</div></pre></td></tr></table></figure>
<h2 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h2><p>v-bind 可简写为 :xxx<br>v-on 简写为 @xxx</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"jdUrl"</span>&gt;</span>京东<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">dblclick</span>=<span class="string">'btnDblClick'</span>&gt;</span>dblclick<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 组件将不会把未被注册的props呈现为普通的HTML属性</span></div><div class="line"><span class="comment">// $attrs可以获取到没有使用的注册属性</span></div><div class="line">inheritAttrs: <span class="literal">false</span></div></pre></td></tr></table></figure>
<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p>计算属性以函数形式 定义在 computed 中</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> computed = &#123;</div><div class="line">	<span class="attr">userName</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">//使用datas中数据，this 必须</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName;</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名&#123;&#123;userName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div></pre></td></tr></table></figure>
<p>计算属性经常用于动态设置元素 class、style，动态传递 props</p>
<p>两个技巧：</p>
<ul>
<li>可依赖其他计算属性</li>
<li>可依赖其他实例的数据</li>
</ul>
<h2 id="计算属性缓存"><a href="#计算属性缓存" class="headerlink" title="计算属性缓存"></a>计算属性缓存</h2><p>与methods中定义方法不同， 计算属性是基于<code>它的依赖</code> <code>缓存</code>的； methods则不同，每次重新渲染，都被调用。</p>
<h1 id="v-bind及class与style绑定"><a href="#v-bind及class与style绑定" class="headerlink" title="v-bind及class与style绑定"></a>v-bind及class与style绑定</h1><h2 id="class绑定"><a href="#class绑定" class="headerlink" title="class绑定"></a>class绑定</h2><p>:class 等同于 v-bind:class</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 对象语法，key 为class名称； value为Boolean类型 data 或 computed --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;'active': isActive&#125;"</span>&gt;</span>v-bind:class<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 数组语法，数据元素为 data 或 computed --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[activeCls, errorCls]"</span>&gt;</span>v-bind:class Array<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 数组语法中可以使用对象语法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[&#123;'active': isActive&#125;, errorCls]"</span>&gt;</span>v-bind:class Array &amp;&amp; Object<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">	<span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">	<span class="attr">data</span>: &#123;</div><div class="line">		<span class="attr">name</span>: <span class="string">'sunday'</span>,</div><div class="line">		<span class="attr">jdUrl</span>: <span class="string">'http://www.jd.com'</span>,</div><div class="line">		<span class="attr">isActive</span>: <span class="literal">true</span>,</div><div class="line">		<span class="attr">activeCls</span>: <span class="string">'active'</span>,</div><div class="line">		<span class="attr">errorCls</span>: <span class="string">'error'</span></div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="style绑定"><a href="#style绑定" class="headerlink" title="style绑定"></a>style绑定</h2><p>:style 等同于 v-bind:style</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 对象字面量语法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123;'color': color, 'fontSize': fontSize + 'px'&#125;"</span>&gt;</span>style bind Object<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 绑定data对象 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"styleConf"</span>&gt;</span>style bind Array<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 数据语法，绑定data对象 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"[styleConf]"</span>&gt;</span>style bind Array<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">	<span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">	<span class="attr">data</span>: &#123;</div><div class="line">		<span class="attr">color</span>: <span class="string">'green'</span>,</div><div class="line">		<span class="attr">fontSize</span>: <span class="number">16</span>,</div><div class="line">		<span class="attr">styleConf</span>:&#123;</div><div class="line">			<span class="attr">color</span>: <span class="string">'green'</span>,</div><div class="line">			<span class="comment">// 使用驼峰命名，渲染后为中划线</span></div><div class="line">			fontSize: <span class="keyword">this</span>.fontSize + <span class="string">'px'</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h1><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>指令的主要职责是 当其<code>表达式的值改变时</code>，相应的<code>行为</code>应用到DOM上。</p>
<p>数据驱动DOM是Vue的核心概念。</p>
<p>v-bind: 单向绑定，数据变化会更新dom<br>v-model: 双向绑定</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- v-bind 动态更新元素属性  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"jdUrl"</span>&gt;</span>京东<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- v-on 绑定事件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">'btnClick'</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:dblclick</span>=<span class="string">'btnDblClick'</span>&gt;</span>dblclick <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- v-if 表达式为false，不渲染dom--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">"show2"</span>&gt;</span>&#123;&#123;name2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123;name2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- v-show 改变CSS属性display --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">"show"</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- v-for 数组遍历 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"dog in dogs"</span>&gt;</span>&#123;&#123; dog &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(dog, i) in dogs"</span>&gt;</span>&#123;&#123; dog &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- v-for 对象遍历 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(rent, city) in averageRent"</span>&gt;</span>&#123;&#123; city &#125;&#125; 的平均租金是 &#123;&#123; rent &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- v-html 直接输出html； 可能导致XSS攻击 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"htmlData"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 指定绑定的方法，定义在 methods 中</span></div><div class="line"><span class="keyword">var</span> methods = &#123;</div><div class="line">	<span class="attr">btnClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'单击'</span>);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">btnDblClick</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'双击'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>Vue实例</code> 将methods里的方法也<code>代理</code>了;</p>
<h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><p><code>directives</code></p>
<h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><p>v-cloak 不需表达式，Vue结束编译时，从绑定的HTML元素上移除。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[v-cloak]</span>&#123;</div><div class="line">	<span class="attribute">display</span>: none</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单项目中，v-cloak是解决初始化导致页面闪动的最佳实践。<br>使用vue-router时，项目HTML结构只是一个<code>空的</code>div元素，剩余的内容都是有<code>路由挂载不同组件</code>完成的，所以不再需要v-cloak;</p>
<h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p>作用于它的元素或组件，只渲染一次； 渲染后不随数据变化重新渲染。</p>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="props-数据传递"><a href="#props-数据传递" class="headerlink" title="props 数据传递"></a>props 数据传递</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">	<span class="attr">props</span>: &#123;</div><div class="line">		<span class="attr">items</span>: &#123;</div><div class="line">		  <span class="attr">type</span>: <span class="built_in">Array</span>,</div><div class="line">		  <span class="attr">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> []</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">fields</span>: &#123;</div><div class="line">		  <span class="attr">type</span>: <span class="built_in">Array</span>,</div><div class="line">		  <span class="attr">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> []</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="inheritAttrs"><a href="#inheritAttrs" class="headerlink" title="inheritAttrs"></a>inheritAttrs</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不把未被注册的props呈现为普通的HTML属性</span></div><div class="line"><span class="comment">// $attrs可获取到没有使用的注册属性</span></div><div class="line">inheritAttrs: <span class="literal">false</span></div></pre></td></tr></table></figure>
<h2 id="refs-访问子组件实例或子元素"><a href="#refs-访问子组件实例或子元素" class="headerlink" title="$refs 访问子组件实例或子元素"></a>$refs 访问子组件实例或子元素</h2><p>ref 提供对内部指定元素的访问</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 通过 ref 特性为这个子组件赋予一个 ID 引用 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">"input"</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用来从父级组件聚焦输入框</span></div><div class="line">focus: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.$refs.input.focus()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h2><p>混入对象的<code>钩子</code>将在组件自身钩子<code>之前</code>调用</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mixin = &#123;</div><div class="line">  <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'混入对象的钩子被调用'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">mixins</span>: [mixin],</div><div class="line">  <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'组件钩子被调用'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// =&gt; "混入对象的钩子被调用"</span></div><div class="line"><span class="comment">// =&gt; "组件钩子被调用"</span></div></pre></td></tr></table></figure>
<p>值为对象的选项，例如 methods, components 和 directives，将被混合为同一个对象。</p>
<p>全局mixins</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 为自定义的选项 'myOption' 注入一个处理器。</span></div><div class="line">Vue.mixin(&#123;</div><div class="line">  <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> myOption = <span class="keyword">this</span>.$options.myOption</div><div class="line">    <span class="keyword">if</span> (myOption) &#123;</div><div class="line">      <span class="built_in">console</span>.log(myOption)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">myOption</span>: <span class="string">'hello!'</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// =&gt; "hello!"</span></div></pre></td></tr></table></figure>
<h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$emit(eventName, eventData);</div><div class="line"><span class="keyword">this</span>.$root.$emit(<span class="string">`bv::modal::<span class="subst">$&#123;type&#125;</span>`</span>, bvEvt, <span class="keyword">this</span>.safeId());</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$root.$on(event, callback);</div><div class="line"><span class="keyword">this</span>.$refs.configEditForm.$on(<span class="string">'submit'</span>,()=&gt;&#123;alert(<span class="number">123</span>)&#125;);</div></pre></td></tr></table></figure>
<h1 id="bootstrap-vue"><a href="#bootstrap-vue" class="headerlink" title="bootstrap-vue"></a>bootstrap-vue</h1><h2 id="Modals"><a href="#Modals" class="headerlink" title="Modals"></a>Modals</h2><p><code>b-modal</code></p>
<p>内部关闭弹窗： 子组件触发事件，父组件处理</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">showModal() &#123;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.$refs.myModalRef.show()</div><div class="line">&#125;;</div><div class="line">hideModal() &#123;</div><div class="line">	<span class="comment">// 父组件使用 $refs 关闭弹窗</span></div><div class="line">	<span class="keyword">this</span>.$refs.myModalRef.hide()</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="b-table"><a href="#b-table" class="headerlink" title="b-table"></a>b-table</h2><p>添加操作列：fields添加操作列，设置 show-empty</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"actions"</span> <span class="attr">slot-scope</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">b-button</span></span></div><div class="line">    <span class="attr">size</span>=<span class="string">"sm"</span></div><div class="line">    <span class="attr">variant</span>=<span class="string">"info"</span></div><div class="line">    @<span class="attr">click</span>=<span class="string">"editConfig(row.item, row.index, $event.target)"</span></div><div class="line">    <span class="attr">class</span>=<span class="string">"btn btn-outline-primary active mr-1"</span></div><div class="line">  &gt;编辑<span class="tag">&lt;/<span class="name">b-button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h1><h2 id="vue-swal"><a href="#vue-swal" class="headerlink" title="vue-swal"></a>vue-swal</h2><p><code>提示</code><br><code>sweetalert</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm i vue-swal</div><div class="line">npm i vue-sweetalert2</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$swal(<span class="string">"这是一条信息！"</span>)</div><div class="line">swal(<span class="string">"这是一条信息！"</span>, <span class="string">"很漂亮，不是吗？"</span>)</div><div class="line"><span class="keyword">this</span>.$swal(<span class="string">"Good job!"</span>, <span class="string">"You are ready to start!"</span>, <span class="string">"success"</span>);</div></pre></td></tr></table></figure>
<a href="https://sweetalert.js.org/" title="sweetalert" target="_blank" rel="external">sweetalert</a>
<a href="http://mishengqiang.com/sweetalert2/" title="sweetalert2" target="_blank" rel="external">sweetalert2</a>
<h2 id="vue-notification"><a href="#vue-notification" class="headerlink" title="vue-notification"></a>vue-notification</h2><p><code>提示框</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save vue-notification</div></pre></td></tr></table></figure>
<a href="http://vue-notification.yev.io" title="notification" target="_blank" rel="external">notification</a>
<h1 id="route"><a href="#route" class="headerlink" title="route"></a>route</h1><h2 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="comment">//? 可选参数</span></div><div class="line">  path: <span class="string">'configManage/:prefix?'</span>,</div><div class="line">  <span class="attr">name</span>: <span class="string">'configManagePre'</span>,</div><div class="line">  <span class="attr">component</span>: ConfigManage,</div><div class="line">  <span class="comment">// 路由参数，传递至prop</span></div><div class="line">  props: <span class="literal">true</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="Passing-Props-to-Route-Components"><a href="#Passing-Props-to-Route-Components" class="headerlink" title="Passing Props to Route Components"></a>Passing Props to Route Components</h2><p>路由组件设置props</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">path</span>: <span class="string">'configManagePre'</span>,</div><div class="line">  <span class="attr">name</span>: <span class="string">'configManagePre'</span>,</div><div class="line">  <span class="attr">component</span>: ConfigManage,</div><div class="line">  <span class="attr">props</span>: &#123; <span class="attr">prefix</span>: <span class="string">'pre'</span> &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="路由切换，组件重新加载"><a href="#路由切换，组件重新加载" class="headerlink" title="路由切换，组件重新加载"></a>路由切换，组件重新加载</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 监听路由变化</span></div><div class="line">watch: &#123;</div><div class="line">	<span class="attr">prefix</span> :&#123;</div><div class="line">	  handler(newPrefix, oldPrefix)&#123;</div><div class="line">	    <span class="comment">// 加载配置数据</span></div><div class="line">	    <span class="keyword">this</span>.loadConfigs();</div><div class="line">	  &#125;,</div><div class="line">	  <span class="comment">// 绑定的时候就执行 handler</span></div><div class="line">	  immediate: <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><h2 id="You-may-have-an-infinite-update-loop-in-a-component-render-function"><a href="#You-may-have-an-infinite-update-loop-in-a-component-render-function" class="headerlink" title="You may have an infinite update loop in a component render function."></a>You may have an infinite update loop in a component render function.</h2><p>数组排序无限循环</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// You are indeed causing an infinite loop, because array.sort() mutates the array itself, which triggers the filter to be applied again. Make sure to sort on a copy:</span></div><div class="line"><span class="keyword">return</span> values.slice().sort(...)</div></pre></td></tr></table></figure>
<a href="https://link.jianshu.com/?t=https://github.com/vuejs/vue/issues/1153" title="Spring" target="_blank" rel="external">Self</a>
<h2 id="toggle-change-vlue-onclick"><a href="#toggle-change-vlue-onclick" class="headerlink" title="toggle change vlue onclick"></a>toggle change vlue onclick</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-icon-sort"</span> @click=<span class="string">"sortFlag = !sortFlag"</span> clstag=<span class="string">"pageclick|keycount|TASK_1551778366212|93"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Note </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MyBatis]]></title>
      <url>http://xiaozhuang.github.io/2017/09/17/mybatis/</url>
      <content type="html"><![CDATA[<p>MyBatis<br><a id="more"></a></p>
<h1 id="MyBatis-Config"><a href="#MyBatis-Config" class="headerlink" title="MyBatis Config"></a>MyBatis Config</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE configuration</span></div><div class="line">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</div><div class="line">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 映射器中缓存开关；默认true --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--全局性地启用或禁用延迟加载。开启时，关联对象会延迟加载；默认false--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--使用列别名替换列名； 默认：true</span></div><div class="line">            select name as title from table --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- SLF4J/LOG4J/LOG4J2/JDK_LOGGING/COMMONS_LOGGING/STDOUT_LOGGING/NO_LOGGING</span></div><div class="line">         未指定时将自动查找 --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"SLF4J"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 开启驼峰命名转换--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 超时时间，业务应用 6 秒，报表应用 30 秒  --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 结果集获取数量，避免OOM --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultFetchSize"</span> <span class="attr">value</span>=<span class="string">"20000"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"DynamicConfig"</span> <span class="attr">type</span>=<span class="string">"com.jd.ql.waybill.config.domain.DynamicConfig"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mybatis/mapper/DynamicConfigDaoMapper.xml"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><h2 id="打印sql"><a href="#打印sql" class="headerlink" title="打印sql"></a>打印sql</h2><h3 id="打印sql语句"><a href="#打印sql语句" class="headerlink" title="打印sql语句"></a>打印sql语句</h3><p><code>mybatis-config.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE configuration   </span></div><div class="line">    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  </div><div class="line">    "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 打印查询语句 SLF4J/LOG4J/LOG4J2/JDK_LOGGING/COMMONS_LOGGING/STDOUT_LOGGING/NO_LOGGING--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- mapper已经在spring-mybatis.xml中的sqlSessionFactory配置，这里不再需要配置 --&gt;</span></div><div class="line"><span class="comment">&lt;!--     &lt;mappers&gt; --&gt;</span></div><div class="line"><span class="comment">&lt;!--         &lt;mapper resource="com/a/b/c/dao/BusinessInfoDaoMapper.xml" /&gt; --&gt;</span></div><div class="line"><span class="comment">&lt;!--     &lt;/mappers&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>logImpl 无法输出到slf4j</p>
<blockquote>
<p>Dao所在路径日志级别设置为DEBUG</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.mybatis.spring"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> <span class="attr">additivity</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.jd.ql.waybill.schedule"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> <span class="attr">additivity</span>=<span class="string">"true"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Log4jdbc-log4j2"><a href="#Log4jdbc-log4j2" class="headerlink" title="Log4jdbc-log4j2"></a>Log4jdbc-log4j2</h3><p>java Sql执行记录</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- http://log4jdbc.brunorozendo.com/ --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bgee.log4jdbc-log4j2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4jdbc-log4j2-jdbc4.1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>dbcp.properties</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># datasource.driverClassName=com.mysql.jdbc.Driver</div><div class="line"># datasource.url=jdbc:mysql://127.0.0.1:3308/spring_learn?characterEncoding=UTF-8</div><div class="line"></div><div class="line">datasource.driverClassName=net.sf.log4jdbc.sql.jdbcapi.DriverSpy</div><div class="line">datasource.url=jdbc:log4jdbc:mysql://127.0.0.1:3308/spring_learn?characterEncoding=UTF-8</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- log4j2.xml --&gt;</span></div><div class="line"><span class="comment">&lt;!-- </span></div><div class="line"># log4jdbc settings development production</div><div class="line">jdbc.connection     :     WARN       WARN</div><div class="line">jdbc.audit          :     WARN       WARN</div><div class="line">jdbc.sqlonly        :     WARN       WARN</div><div class="line">jdbc.sqltiming      :     INFO       WARN</div><div class="line">jdbc.resultset      :     WARN       WARN</div><div class="line">jdbc.resultsettable :     INFO       WARN</div><div class="line">--&gt;</div><div class="line"><span class="comment">&lt;!-- log4jdbc-log4j2 记录连接打开、关闭等信息，有利于调试数据库连接相关问题 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.connection"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> <span class="attr">additivity</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- log4jdbc-log4j2 记录除了 ResultSet 之外的所有 JDBC 调用信息，会产生大量的记录，有利于调试跟踪具体的 JDBC 问题 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.audit"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> <span class="attr">additivity</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- log4jdbc-log4j2 仅记录 SQL --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.sqlonly"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> <span class="attr">additivity</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- log4jdbc-log4j2 记录 SQL 以及耗时信息 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.sqltiming"</span>  <span class="attr">level</span>=<span class="string">"INFO"</span> <span class="attr">additivity</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- log4jdbc-log4j2 产生更多的记录信息，因为记录了 ResultSet 的信息 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.resultset"</span>  <span class="attr">level</span>=<span class="string">"ERROR"</span> <span class="attr">additivity</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- log4jdbc-log4j2 打印出执行sql和结果集 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.resultsettable"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> <span class="attr">additivity</span>=<span class="string">"true"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p><code>log4jdbc.log4j2.properties</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># log4jdbc配置 http://log4jdbc.brunorozendo.com/</div><div class="line"></div><div class="line">#log4jdbc.drivers=org.h2.Driver</div><div class="line">log4jdbc.drivers=com.mysql.jdbc.Driver</div><div class="line"># 使用SLF4J而不是Log4j 2，则需要将选项log4jdbc.spylogdelegator.name配置为net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator</div><div class="line">log4jdbc.spylogdelegator.name=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator</div><div class="line">log4jdbc.dump.sql.select=true</div><div class="line">log4jdbc.dump.sql.insert=true</div><div class="line">log4jdbc.dump.sql.update=true</div><div class="line">log4jdbc.dump.sql.delete=true</div><div class="line">log4jdbc.dump.sql.create=true</div></pre></td></tr></table></figure>
<h1 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h1><h2 id="defaultStatementTimeout"><a href="#defaultStatementTimeout" class="headerlink" title="defaultStatementTimeout"></a>defaultStatementTimeout</h2><p>设置超时时间，它决定驱动等待数据库响应的秒数。任意正整数，默认，未设置 (null)</p>
<p>最佳实践： 业务应用 6 秒，报表应用 30 秒</p>
<p>CancelTask 是一个定时检查 Statement 请求超时的任务，如果设置 Statement 超时时间，该 Task 就会检查是否超时，如果超时，就会进行 Kill 请求</p>
<h1 id="MyBatis-Generator"><a href="#MyBatis-Generator" class="headerlink" title="MyBatis Generator"></a>MyBatis Generator</h1><p><code>eclipse</code></p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>MyBatis Generator</p>
<h2 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h2><p>File&gt;New&gt;Other…<br>Select “MyBatis Generator Configuration File” from the “MyBatis” category, then press “Next”</p>
<h2 id="右键配置文件"><a href="#右键配置文件" class="headerlink" title="右键配置文件"></a>右键配置文件</h2><p>Run As&gt;Run MyBatis Generator</p>
<context id="context1"><br>  <commentgenerator><br>    <!-- 生成实体包含注释  --><br>    <property name="addRemarkComments" value="true"><br>    <property name="javaFileEncoding" value="UTF-8"><br>  </property></property></commentgenerator><br></context>

<h2 id="注释乱码解决"><a href="#注释乱码解决" class="headerlink" title="注释乱码解决"></a>注释乱码解决</h2><p>eclipse 配置eclipse.ini添加 -Dfile.encoding=UTF-8</p>
<h1 id="动态条件"><a href="#动态条件" class="headerlink" title="动态条件"></a>动态条件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"codeTypes != null and !codeTypes.isEmpty()"</span>&gt;</span></div><div class="line">  and code_type in <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"codeTypes"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"codeTypeItem"</span>&gt;</span> #&#123;codeTypeItem&#125; <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="Spring-MyBatis"><a href="#Spring-MyBatis" class="headerlink" title="Spring MyBatis"></a>Spring MyBatis</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.jd.etms.entity.po.SecondaryIndexEntity;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="meta">@Mapper</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SecondaryIndexDao</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">List&lt;SecondaryIndexEntity&gt; <span class="title">getEntitiesByKey</span><span class="params">(@Param(<span class="string">"tableName"</span>)</span> String tableName, @<span class="title">Param</span><span class="params">(<span class="string">"key"</span>)</span> String key, @<span class="title">Param</span><span class="params">(<span class="string">"max"</span>)</span> Integer max)</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(@Param(<span class="string">"tableName"</span>)</span> String tableName, @<span class="title">Param</span><span class="params">(<span class="string">"entity"</span>)</span> SecondaryIndexEntity entity)</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(@Param(<span class="string">"tableName"</span>)</span> String tableName, @<span class="title">Param</span><span class="params">(<span class="string">"entity"</span>)</span> SecondaryIndexEntity entity)</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(@Param(<span class="string">"tableName"</span>)</span> String tableName, @<span class="title">Param</span><span class="params">(<span class="string">"entity"</span>)</span> SecondaryIndexEntity entity)</span>;</div><div class="line"></div><div class="line">    <span class="function">List&lt;SecondaryIndexEntity&gt; <span class="title">queryList</span><span class="params">(@Param(<span class="string">"tableName"</span>)</span> String tableName, @<span class="title">Param</span><span class="params">(<span class="string">"key"</span>)</span> String key, @<span class="title">Param</span><span class="params">(<span class="string">"orderType"</span>)</span> String orderType, RowBounds rowBounds, @<span class="title">Param</span><span class="params">(<span class="string">"lastDate"</span>)</span> Date lastDate)</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">queryCount</span><span class="params">(@Param(<span class="string">"tableName"</span>)</span> String tableName, @<span class="title">Param</span><span class="params">(<span class="string">"key"</span>)</span> String key, @<span class="title">Param</span><span class="params">(<span class="string">"lastDate"</span>)</span> Date lastDate)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 通用Db任务dao --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"commonDbTaskDao"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperInterface"</span> <span class="attr">value</span>=<span class="string">"com.jd.ql.waybill.schedule.dao.CommonDbTaskDao"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionTemplate"</span> <span class="attr">ref</span>=<span class="string">"waybillScheduleSqlSession"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userMapper"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperFactoryBean"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperInterface"</span> <span class="attr">value</span>=<span class="string">"org.mybatis.spring.sample.mapper.UserMapper"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis/spring-worker-mybatis.xml"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"taskDatasource"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:com/jd/ql/framework/asyn/strategy/mysql/MySqlAsynTaskDaoMapper.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"taskDatasource"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 自 1.3.0 版本开始，新增的 configuration 属性能够在没有对应的 MyBatis XML 配置文件的情况下，直接设置 Configuration 实例 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configuration"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.ibatis.session.Configuration"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="SqlSessionTemplate"><a href="#SqlSessionTemplate" class="headerlink" title="SqlSessionTemplate"></a>SqlSessionTemplate</h2><p>SqlSessionTemplate 将会保证使用的 SqlSession 与当前 Spring 的事务相关<br>你应该总是用 SqlSessionTemplate 来替换 MyBatis 默认的 DefaultSqlSession 实现</p>
<a href="http://www.mybatis.org/spring/zh/sqlsession.html" title="SqlSessionTemplate" target="_blank" rel="external">SqlSessionTemplate</a>
<h2 id="MapperFactoryBean"><a href="#MapperFactoryBean" class="headerlink" title="MapperFactoryBean"></a>MapperFactoryBean</h2><p>生成Mapper实例对象</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- mybatis 自动将多个insert，转为batch insert --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"BATCH"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mySqlAsynTaskDao"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperInterface"</span> <span class="attr">value</span>=<span class="string">"com.jd.ql.framework.asyn.strategy.mysql.MySqlAsynTaskDao"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionTemplate"</span> <span class="attr">ref</span>=<span class="string">"sqlSession"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="MapperScannerConfigurer"><a href="#MapperScannerConfigurer" class="headerlink" title="MapperScannerConfigurer"></a>MapperScannerConfigurer</h2><p>扫描方式配置Mapper</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 不同dao不同数据源，需要不同的包 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScannerConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.jd.etms.dao"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionTemplateBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionTemplate"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- mapper注解 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"annotationClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.stereotype.Repository"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 或者 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mybatis:scan</span> <span class="attr">base-package</span>=<span class="string">"org.mybatis.spring.sample.mapper"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h1 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h1><h2 id="返回boolean"><a href="#返回boolean" class="headerlink" title="返回boolean"></a>返回boolean</h2><p>JDBC 规范中，1 代表 true，0 代表 false，其他值是未定义的，如果用 count 的话，大于 1 是返回 true 还是 false 和 JDBC 的驱动有关(MyBatis + MySQL: &gt;=1 为 true，&lt;=0 为 false)，所以返回 boolean 时最保险的是使用 EXISTS:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"ifExist"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"boolean"</span>&gt;</span></div><div class="line">    select count(1) from web_member where name = #&#123;name&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="comment">&lt;!--检查目录是否存在--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"isDirectoryExisting"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"boolean"</span>&gt;</span></div><div class="line">    SELECT EXISTS(SELECT 1 FROM directory WHERE directory_id=#&#123;directoryId&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<a href="https://qtdebug.com/spring-web-mybatis-syntax/" title="Mybatis 语法" target="_blank" rel="external">Mybatis 语法</a>
<h2 id="insert-回填id"><a href="#insert-回填id" class="headerlink" title="insert 回填id"></a>insert 回填id</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"create"</span> <span class="attr">parameterType</span>=<span class="string">"CommonDbTask"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">  insert into common_db_task (id, ref_id, task_type,</div><div class="line">    task_data, task_exe_count, status,</div><div class="line">    queue_id, remark, create_time, update_time,</div><div class="line">    yn, ts,</div><div class="line">    own_sign)</div><div class="line">  values (#&#123;id,jdbcType=BIGINT&#125;, #&#123;refId,jdbcType=VARCHAR&#125;, #&#123;taskType,jdbcType=INTEGER&#125;,</div><div class="line">    #&#123;taskData,jdbcType=VARCHAR&#125;, #&#123;taskExeCount,jdbcType=INTEGER&#125;, #&#123;status,jdbcType=INTEGER&#125;,</div><div class="line">    #&#123;queueId,jdbcType=VARCHAR&#125;, #&#123;remark,jdbcType=VARCHAR&#125;, #&#123;createTime,jdbcType=TIMESTAMP&#125;, now(),</div><div class="line">    1, ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000),</div><div class="line">    #&#123;ownSign,jdbcType=VARCHAR&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></div><div class="line">    AND title like #&#123;title&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null and title != ''"</span>&gt;</span></div><div class="line">    AND title like #&#123;title&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">'p.categories != null and p.categories.size()&gt;0'</span>&gt;</span></div><div class="line">    and category in</div><div class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">collection</span>=<span class="string">"p.categories"</span></span></div><div class="line">             <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</div><div class="line">        #&#123;item&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"null != waybillCodes and waybillCodes.size() &gt; 0"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 单个运单 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"waybillCodes.size() == 1"</span>&gt;</span></div><div class="line">        and waybill_code = #&#123;waybillCodes[0], jdbcType=VARCHAR&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 多个运单 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"waybillCodes.size() &gt; 1"</span>&gt;</span></div><div class="line">        and waybill_code in</div><div class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"waybillCodes"</span> <span class="attr">item</span>=<span class="string">"waybillCode"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></div><div class="line">            #&#123;waybillCode, jdbcType=VARCHAR&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 枚举 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"queryType == @com.jd.etms.blocker.constant.ExceptionOrderQueryType@WAITING_VERIFY"</span>&gt;</span></div><div class="line">    and suggest_operate is null</div><div class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></div><div class="line">      AND title like #&#123;title&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></div><div class="line">      AND author_name like #&#123;author.name&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></div><div class="line">      AND featured = 1</div><div class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="in"><a href="#in" class="headerlink" title="in"></a>in</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select * from news where id in</div><div class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">open</span>=<span class="string">"("</span><span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span>#&#123;item&#125;<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="JDBC超时问题分析"><a href="#JDBC超时问题分析" class="headerlink" title="JDBC超时问题分析"></a>JDBC超时问题分析</h2><p>Transaction Timeout、Statement Timeout、Socket Timeout</p>
<h3 id="Transaction-Timeout"><a href="#Transaction-Timeout" class="headerlink" title="Transaction Timeout"></a>Transaction Timeout</h3><p>Transaction Timeout 是“statement Timeout * N（需要执行的statement数量） + @（垃圾回收等其他时间）”</p>
<p>Spring中根据timeout+当前时间点 赋值给一个deadLine。每一次执行sql，就会获取到一个statement时，计算liveTime =（deadline- 当前时间）<br>Spring实现超时通过 deadLine 和jdbc的 statement#setQueryTime 两种策略来判断超时。</p>
<ul>
<li>如果liveTime&gt;0，此时就执行stament.setQueryTimeout(liveTime);</li>
<li>如果liveTime &lt; 0,此时就抛出异常</li>
</ul>
<blockquote>
<p>Spring事务超时 = 事务开始时到最后一个Statement创建时时间 + 最后一个Statement的执行时超时时间（即其queryTimeout）。</p>
<p>选择DataSourceTransactionManager，事务内所有的sql操作必须通过JdbcTemplate执行才能使timeout设置正常工作，<br>通过myBatis执行的sql操作将无法应用超时设置。(mybatis3.4.0版本及以后的版本才让事务超时生效)</p>
</blockquote>
<h3 id="Mybatis的timeout"><a href="#Mybatis的timeout" class="headerlink" title="Mybatis的timeout"></a>Mybatis的timeout</h3><p>设置一个statement的执行时间，包括update、delete、insert和select。通过jdbc的statement的setQueryTimeout来实现。</p>
<h3 id="JDBC-timeout"><a href="#JDBC-timeout" class="headerlink" title="JDBC timeout"></a>JDBC timeout</h3><p>statement通过自身connection将query发送给MySQL数据库，并创建一个新的timeout-execution线程用于超时处理</p>
<h3 id="JDBC-socket-timeout"><a href="#JDBC-socket-timeout" class="headerlink" title="JDBC socket timeout"></a>JDBC socket timeout</h3><p>JDBC的socket timeout在数据库被突然停掉或是发生网络错误（由于设备故障等原因）时十分重要。</p>
<p>由于TCP/IP的结构原因，socket没有办法探测到网络错误，因此应用也无法主动发现数据库连接断开。<br>如果没有设置socket timeout的话，应用在数据库返回结果前会无期限地等下去，这种连接被称为dead connection。<br>为了能够避免应用在发生网络错误时产生无休止等待的情况，所以需要设置socket timeout。</p>
<blockquote>
<p>socket timeout的值必须要高于statement timeout，否则，在网络正常的情况下，socket timeout将会先生效而statement timeout就失效。</p>
</blockquote>
<p>socket timeout包含两种timeout：</p>
<ul>
<li>socket连接时的timeout：connectionTimeout，设置之后会抛出异常 java.net.SocketTimeoutException: connect timed out</li>
<li>socket读写时的timeout：socketTimeout，设置之后会抛出异常 ：java.net.SocketTimeoutException: Read timed out</li>
</ul>
<h3 id="操作系统的socket-timeout"><a href="#操作系统的socket-timeout" class="headerlink" title="操作系统的socket timeout"></a>操作系统的socket timeout</h3><p>Linux服务器将socket timeout，操作系统的层面对网络连接做校验</p>
<h3 id="Mysql层的innodb-lock-wait-timeout"><a href="#Mysql层的innodb-lock-wait-timeout" class="headerlink" title="Mysql层的innodb_lock_wait_timeout"></a>Mysql层的innodb_lock_wait_timeout</h3><p>针对 行锁（row lock）,不同事务同时更新同一行的时候，等待其他事务提交的时间</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 默认是50s</span></div><div class="line">show variables like <span class="string">'%timeout%'</span></div><div class="line"></div><div class="line"><span class="built_in">set</span> GLOBAL innodb_lock_wait_timeout = 10;</div></pre></td></tr></table></figure>
<h3 id="各个timeout之间的关系"><a href="#各个timeout之间的关系" class="headerlink" title="各个timeout之间的关系"></a>各个timeout之间的关系</h3><ul>
<li>对于Spring的 @transactional 是通过timeout属性初始化了一个deadline，每一次创建statement判断deadline是否小于0，如果小于0抛异常；否则通过JDBC的 statement#setQueryTimeout 来设置超时</li>
<li>Mybatis的timeout也是通过通过JDBC的 statement#setQueryTimeout 来设置超时。</li>
<li>JDBC的timeout，是在statement执行时，开启了一个监听线程，发现超时，就终端当前执行的statement，然后抛异常。</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>Transaction Timeout</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 总的默认事务超时时间可以在DataSourceTransactionManager中进行配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dbcpSource"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 单位是秒 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultTimeout"</span> <span class="attr">value</span>=<span class="string">"100"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 声明式事务之配置文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">timeout</span>=<span class="string">"100"</span> /&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 声明式事务之注解</span></div><div class="line"><span class="meta">@Transactional</span>(timeout=<span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="comment">// 编程式事务进行代码配置</span></div><div class="line">defaultTransactionDefinition.setTimeout(<span class="number">100</span>);</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- mapper.xml --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"6"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- spring.xml --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dbcpSource"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:spring/mapping/*.xml"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.jd.overseas.iou.dao.jdbc.domain"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configuration"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.ibatis.session.Configuration"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"6"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- mapper.xml --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select"</span> <span class="attr">timeout</span>=<span class="string">"100"</span>&gt;</span></div><div class="line">    SELECT 1</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Socket Timeout配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dbcpSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp2.BasicDataSource"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.mysql.url&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.mysql.username&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.mysql.password&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"3"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"1000"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"6000"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"18000"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 重点配置 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultQueryTimeout"</span> <span class="attr">value</span>=<span class="string">"100"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionProperties"</span> <span class="attr">value</span>=<span class="string">"connectTimeout=2000;socketTimeout=10000"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>MySQL Url</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jdbc:mysql://XX/XX?XX&amp;connectTimeout=2000&amp;socketTimeout=2000</div></pre></td></tr></table></figure>
<a href="http://benjaminwhx.com/2018/02/01/JDBC%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E5%85%A8%E9%9D%A2%E5%88%86%E6%9E%90/" title="JDBC超时问题全面分析" target="_blank" rel="external">JDBC超时问题全面分析</a>
<a href="https://jinnianshilongnian.iteye.com/blog/1986023" title="Spring事务超时时间可能存在的错误认识" target="_blank" rel="external">Spring事务超时时间可能存在的错误认识</a>
<h1 id="ddf"><a href="#ddf" class="headerlink" title="ddf"></a>ddf</h1><h2 id="ddf-limit-不支持-mybatis-表达式"><a href="#ddf-limit-不支持-mybatis-表达式" class="headerlink" title="ddf limit 不支持 mybatis 表达式"></a>ddf limit 不支持 mybatis 表达式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">select `waybill_code`, `package_barcode`, `state` /*shard&#123;id=$&#123;shardId&#125;&#125;*/</div><div class="line">from package_state</div><div class="line">&lt;![CDATA[</div><div class="line">where first_time &gt; #&#123;firstTimeStart&#125; and first_time &lt; #&#123;firstTimeEnd&#125;</div><div class="line">]]&gt;</div><div class="line">order by first_time ASC</div><div class="line">LIMIT #&#123;offset,jdbcType=INTEGER&#125;,#&#123;rows,jdbcType=INTEGER&#125;</div></pre></td></tr></table></figure>
<p>升级 jsqlparser</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="ddf-不支持-反引号"><a href="#ddf-不支持-反引号" class="headerlink" title="ddf 不支持 反引号`"></a>ddf 不支持 反引号`</h2><p>当mysql的字段名和保留字冲突的时候，sql语句中的字段名需要加上反引号``来加以区别</p>
<p>表名添加反引号后，无法计算分片</p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java-junit]]></title>
      <url>http://xiaozhuang.github.io/2017/09/02/java-junit/</url>
      <content type="html"><![CDATA[<p>JUnit 可以用来阻止任何人（包括你自己）破坏你的应用程序，可以控制软件的熵。<br><a id="more"></a></p>
<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><p>测试是用来确保我们没有在代码中引入错误。 </p>
<h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数组相等</span></div><div class="line">assertArrayEquals(<span class="string">"error msg"</span>, <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>&#125;, <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 对象equal</span></div><div class="line">assertEquals(<span class="string">"error msg"</span>, <span class="keyword">new</span> String(<span class="string">"foo"</span>), <span class="keyword">new</span> String(<span class="string">"foo"</span>));</div><div class="line"></div><div class="line"><span class="comment">// 对象==</span></div><div class="line">assertSame(<span class="string">"error msg"</span>, <span class="keyword">new</span> String(<span class="string">"foo"</span>).intern(), <span class="keyword">new</span> String(<span class="string">"foo"</span>).intern());</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 条件为真断言</span></div><div class="line">Integer num1 = -<span class="number">128</span>;</div><div class="line">Integer num2 = -<span class="number">128</span>;</div><div class="line">assertTrue(<span class="string">"error msg"</span>,num1 == num2);</div><div class="line">Integer num3 = <span class="number">128</span>;</div><div class="line">Integer num4 = <span class="number">128</span>;</div><div class="line">assertTrue(<span class="string">" Cache to support the object identity semantics of autoboxing for values between -128 and 127 "</span>,num3 == num4);</div><div class="line"></div><div class="line"><span class="comment">// 非空断言</span></div><div class="line">assertNotNull(<span class="string">"is can't null"</span>, <span class="keyword">new</span> String());</div></pre></td></tr></table></figure>
<h1 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.Collection;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</div><div class="line"><span class="keyword">import</span> org.junit.runners.Parameterized.Parameters;</div><div class="line"></div><div class="line"><span class="meta">@RunWith</span>(value = Parameterized.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColculatorTest</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> expected;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> valueOne;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> valueTwo;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ColculatorTest</span><span class="params">(<span class="keyword">double</span> expected, <span class="keyword">double</span> valueOne, <span class="keyword">double</span> valueTwo)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.expected = expected;</div><div class="line">        <span class="keyword">this</span>.valueOne = valueOne;</div><div class="line">        <span class="keyword">this</span>.valueTwo = valueTwo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Parameters</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Collection&lt;Integer[]&gt; getTestParameters()&#123;</div><div class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Integer[][]&#123;</div><div class="line">            &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</div><div class="line">            &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;,</div><div class="line">            &#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>&#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</div><div class="line">        Calculator calc = <span class="keyword">new</span> Calculator();</div><div class="line">        assertEquals(expected, calc.add(valueOne, valueTwo), <span class="number">0L</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="抛出异常测试"><a href="#抛出异常测试" class="headerlink" title="抛出异常测试"></a>抛出异常测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span>(expected=RuntimeException.class)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMain</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="超时测试"><a href="#超时测试" class="headerlink" title="超时测试"></a>超时测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span>(timeout=<span class="number">100</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMain</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">101</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="跳过测试"><a href="#跳过测试" class="headerlink" title="跳过测试"></a>跳过测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span>(timeout=<span class="number">100</span>)</div><div class="line"><span class="meta">@Ignore</span>(<span class="string">"Ignore TestCase Reason"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMain</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">101</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="提取公共逻辑"><a href="#提取公共逻辑" class="headerlink" title="提取公共逻辑"></a>提取公共逻辑</h1><p>@BeforeClass、@AfterClass：<code>所有</code>@Test方法之前/之后被执行一次</p>
<p>@Before、@After：<code>每个</code>Test方法之前/之后执行一次</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BeforeClass</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setUpBeforeClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="meta">@AfterClass</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tearDownAfterClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="meta">@Before</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="meta">@After</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;&#125;</div></pre></td></tr></table></figure>
<h1 id="Hamcrest使用"><a href="#Hamcrest使用" class="headerlink" title="Hamcrest使用"></a>Hamcrest使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertThat;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.CoreMatchers.anyOf;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.CoreMatchers.equalTo;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.CoreMatchers.hasItem;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.CoreMatchers.hasItems;</div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HamcrestAppTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMain</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;String&gt; values = Arrays.asList(<span class="keyword">new</span> String[]&#123;</div><div class="line">                <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span></div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        assertThat(values, hasItems(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="junit-单元测试事务会自动回滚"><a href="#junit-单元测试事务会自动回滚" class="headerlink" title="junit 单元测试事务会自动回滚"></a>junit 单元测试事务会自动回滚</h1><p>通过@Rollback(true)注解来实现，默认是true，事务会回滚，可以不写。false时事务不会回滚，数据会写到数据库中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span>  </div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="meta">@Rollback</span>(<span class="keyword">true</span>)<span class="comment">// 事务自动回滚，默认是true。可以不写  </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestCustomer</span><span class="params">()</span></span>&#123;  </div><div class="line">    RewardCouponDetail rewardCouponDetail = <span class="keyword">new</span> RewardCouponDetail();  </div><div class="line">    rewardCouponDetail.setRewardInfoId(<span class="number">1L</span>);  </div><div class="line">    rewardCouponDetail.setCouponId(<span class="string">"1"</span>);  </div><div class="line">    rewardCouponDetail.setCouponDetailId(<span class="number">1L</span>);  </div><div class="line">    rewardCouponDetail.setCreateTime(<span class="keyword">new</span> Date());  </div><div class="line">    rewardCouponDetailMapper.insert(rewardCouponDetail);  </div><div class="line">    logger.info(JSON.toJSONString(rewardCouponDetail));  </div><div class="line">    Assert.assertNotNull(rewardCouponDetail.getId());  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><ul>
<li>一次只能单元测试一个对象</li>
<li>在assert调用中解释失败的原因</li>
<li>总是为跳过测试说明原因</li>
</ul>
<h1 id="Mockito"><a href="#Mockito" class="headerlink" title="Mockito"></a>Mockito</h1><h2 id="Enable-Mockito-Annotations"><a href="#Enable-Mockito-Annotations" class="headerlink" title="Enable Mockito Annotations"></a>Enable Mockito Annotations</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(MockitoJUnitRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockitoAnnotationTest</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 或者</span></div><div class="line"><span class="meta">@Before</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    MockitoAnnotations.initMocks(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Mock-Annotation"><a href="#Mock-Annotation" class="headerlink" title="@Mock Annotation"></a>@Mock Annotation</h2><p>创建mock对象</p>
<p>We can use @Mock to create and inject mocked instances without having to call Mockito.mock manually.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DynamicConfigContext dynamicConfigContextMock = Mockito.mock(DynamicConfigContext.class);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 动态配置</div><div class="line">*/</div><div class="line"><span class="meta">@Mock</span></div><div class="line"><span class="keyword">private</span> DynamicConfigContext dynamicConfigContext;</div><div class="line"></div><div class="line"><span class="meta">@InjectMocks</span></div><div class="line"><span class="keyword">private</span> DynamicConfigContextCombineImpl dynamicConfigContextCombine;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConfigParallel</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#123;</div><div class="line">        when(dynamicConfigContext.getConfig(DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN_PRE)).thenReturn(Boolean.TRUE);</div><div class="line">        when(dynamicConfigContext.getConfig(DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN)).thenReturn(Boolean.TRUE);</div><div class="line"></div><div class="line">        <span class="comment">// true true -&gt; true</span></div><div class="line">        Boolean waybillScheduleConfig = dynamicConfigContextCombine.getConfigParallel(DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN_PRE, DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN);</div><div class="line">        Assertions.assertThat(waybillScheduleConfig).as(<span class="string">"并列配置 true true -&gt; true 结果检查"</span>).isEqualTo(Boolean.TRUE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#123;</div><div class="line">        when(dynamicConfigContext.getConfig(DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN_PRE)).thenReturn(Boolean.TRUE);</div><div class="line">        when(dynamicConfigContext.getConfig(DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN)).thenReturn(Boolean.FALSE);</div><div class="line"></div><div class="line">        <span class="comment">// true false -&gt; false</span></div><div class="line">        Boolean waybillScheduleConfig = dynamicConfigContextCombine.getConfigParallel(DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN_PRE, DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN);</div><div class="line">        Assertions.assertThat(waybillScheduleConfig).as(<span class="string">"并列配置 true false -&gt; false 结果检查"</span>).isEqualTo(Boolean.FALSE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// false true -&gt; false</span></div><div class="line">        when(dynamicConfigContext.getConfig(DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN_PRE)).thenReturn(Boolean.FALSE);</div><div class="line">        when(dynamicConfigContext.getConfig(DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN)).thenReturn(Boolean.TRUE);</div><div class="line"></div><div class="line">        Boolean waybillScheduleConfig = dynamicConfigContextCombine.getConfigParallel(DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN_PRE, DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN);</div><div class="line">        Assertions.assertThat(waybillScheduleConfig).as(<span class="string">"并列配置 false true -&gt; false 结果检查"</span>).isEqualTo(Boolean.FALSE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// false false -&gt; false</span></div><div class="line">        when(dynamicConfigContext.getConfig(DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN_PRE)).thenReturn(Boolean.FALSE);</div><div class="line">        when(dynamicConfigContext.getConfig(DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN)).thenReturn(Boolean.FALSE);</div><div class="line"></div><div class="line">        Boolean waybillScheduleConfig = dynamicConfigContextCombine.getConfigParallel(DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN_PRE, DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN);</div><div class="line">        Assertions.assertThat(waybillScheduleConfig).as(<span class="string">"并列配置 false false -&gt; false 结果检查"</span>).isEqualTo(Boolean.FALSE);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Spy-Annotation"><a href="#Spy-Annotation" class="headerlink" title="@Spy Annotation"></a>@Spy Annotation</h2><p>局部mock</p>
<p>use @Spy annotation to spy on an existing instance.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">DynamicConfigContext dynamicConfigContextMock = Mockito.spy(DynamicConfigContextDb.class);</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Priority null</span></div><div class="line">    when(dynamicConfigContextMock.getConfig(DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN_PRE)).thenReturn(<span class="keyword">null</span>);</div><div class="line">    when(dynamicConfigContextMock.getConfig(DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN)).thenReturn(Boolean.FALSE);</div><div class="line"></div><div class="line">    <span class="comment">// 校验</span></div><div class="line">    verify(dynamicConfigContextMock,times(<span class="number">1</span>)).getConfig(anyString());</div><div class="line"></div><div class="line"></div><div class="line">    Boolean waybillScheduleConfig = dynamicConfigContextMock.getConfig(DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN_PRE, DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN);</div><div class="line">    Assertions.assertThat(waybillScheduleConfig).as(<span class="string">"并列配置 Priority null 结果检查"</span>).isEqualTo(Boolean.FALSE);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Priority true</span></div><div class="line">    when(dynamicConfigContextMock.getConfig(DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN_PRE)).thenReturn(Boolean.TRUE);</div><div class="line">    when(dynamicConfigContextMock.getConfig(DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN)).thenReturn(Boolean.FALSE);</div><div class="line"></div><div class="line">    Boolean waybillScheduleConfig = dynamicConfigContextMock.getConfig(DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN_PRE, DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN);</div><div class="line">    Assertions.assertThat(waybillScheduleConfig).as(<span class="string">"并列配置  Priority true 结果检查"</span>).isEqualTo(Boolean.TRUE);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">when(</div><div class="line">    dynamicConfigContext.getConfig(</div><div class="line">        argThat((ArgumentMatcher&lt;DynamicConfig&gt;) dynamicConfig -&gt; &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == dynamicConfig) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                String configKey = dynamicConfig.getConfigKey();</div><div class="line">                <span class="keyword">return</span> Objects.equals(configKey, DynamicConfigConstant.WAYBILL_SCHEDULE_OPEN_PRE.getConfigKey());</div><div class="line">            &#125;</div><div class="line">        )</div><div class="line">    )</div><div class="line">).thenReturn(Boolean.FALSE);</div></pre></td></tr></table></figure>
<h2 id="InjectMocks"><a href="#InjectMocks" class="headerlink" title="InjectMocks"></a>InjectMocks</h2><p>Field injection; mocks will first be resolved by type, then, if there is several property of the same type, by the match of the field name and the mock name.</p>
<h1 id="生成测试数据"><a href="#生成测试数据" class="headerlink" title="生成测试数据"></a>生成测试数据</h1><h2 id="随机String"><a href="#随机String" class="headerlink" title="随机String"></a>随机String</h2><p><code>org.apache.commons.lang.RandomStringUtils</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RandomStringUtils.randomNumeric(<span class="number">8</span>);</div></pre></td></tr></table></figure>
<h1 id="assertj"><a href="#assertj" class="headerlink" title="assertj"></a>assertj</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- assertj 2.9.1 for Java 7 projects --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.assertj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>assertj-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Assertions.assertThat(waybillRemindRet.getYn()).as(<span class="string">"insert结果yn检查"</span>)</div><div class="line">                .isEqualTo(waybillRemindOrigin.getYn());</div><div class="line"></div><div class="line">WaybillTradeTaskData waybillTradeTaskData = <span class="keyword">new</span> WaybillTradeTaskData();</div><div class="line">waybillTradeTaskData.addExtendProps(<span class="string">"extKey"</span>, <span class="string">"extValue"</span>);</div><div class="line"></div><div class="line">Assertions.assertThat(waybillTradeTaskData.getExtendProps()).as(<span class="string">"effictive"</span>).isNotEmpty().contains(Assertions.entry(<span class="string">"extKey"</span>, <span class="string">"extValue"</span>));</div></pre></td></tr></table></figure>
<h1 id="JMH"><a href="#JMH" class="headerlink" title="JMH"></a>JMH</h1><p>JMH (Java Microbenchmark Harness) [ˈhɑːnɪs]  </p>
<ul>
<li>确保HotSpot JIT编译达到稳定状态后（-XX:+PrintCompilation，JIT编译日志，不再出现相关日志后），再开始基准测试采样</li>
<li>基准测试的采样间隔内要避免发生垃圾收集（-verbose:gc，设置-Xms、-Xmx为同一值，设置新生代-Xmn）</li>
<li>避免为基准测试中的代码被定性为无效代码（被优化到no-op队列），让方法变的必不可少（保存计算结果）</li>
<li>打印内联优化(-XX:+PrintInlining)，jvm 以server模式运行（-server）</li>
<li>避免采样过程中逆优化（JIT编译日志，逆优化关键字made not entrant）</li>
</ul>
<blockquote>
<p>no-op 指的是操作或者操作序列对程序的输出状态没有任何影响</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">-server -XX:+UnlockDiagnosticVMOptions -XX:+PrintCompilation -verbose:g -XX:+PrintInlining</div></pre></td></tr></table></figure>
<p>逆优化：将经过若干级内联而来的编译帧转换为等价的解释器帧的过程。<br>可以将编译代码从多种乐观优化中回退回来，特别是从类型集成关系分析<code>假设</code>中回退回来。</p>
<blockquote>
<p>客户端或C1编译器，编译临界值1500；服务端或C2编译器，编译临界值1000</p>
<p>方法调用计数器和回边计数器:方法计数器，记录一个方法被调用次数的计数器。回边计数器，用于统计方法中循环体代码的执行次数，字节码中遇到控制流向后跳转的指令称为“回边”。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-generator-annprocess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="jmh注解"><a href="#jmh注解" class="headerlink" title="jmh注解"></a>jmh注解</h2><h3 id="BenchmarkMode"><a href="#BenchmarkMode" class="headerlink" title="@BenchmarkMode"></a>@BenchmarkMode</h3><ul>
<li>Throughput：整体吞吐量，每秒执行了多少次调用</li>
<li>AverageTime：用的平均时间，每次操作的平均时间</li>
<li>SampleTime：随机取样，最后输出取样结果的分布，例如“99%的调用在xxx毫秒以内，99.99%的调用在xxx毫秒以内”</li>
<li>SingleShotTime：只运行一次，同时把 warmup 次数设为0，测试冷启动时的性能</li>
<li>All：上面的所有模式都执行一次，适用于内部JMH测试</li>
</ul>
<h3 id="Warmup"><a href="#Warmup" class="headerlink" title="@Warmup"></a>@Warmup</h3><p>预热参数</p>
<ul>
<li>iterations：预热的次数</li>
<li>time：每次预热的时间</li>
<li>timeUnit：时间的单位，默认秒</li>
<li>batchSize：批处理大小，每次操作调用几次方法</li>
</ul>
<h3 id="Measurement"><a href="#Measurement" class="headerlink" title="@Measurement"></a>@Measurement</h3><p>实际调用方法所需要配置的一些基本测试参数</p>
<h3 id="Threads"><a href="#Threads" class="headerlink" title="@Threads"></a>@Threads</h3><p>每个进程中的测试线程，可用于类或者方法上。<br>一般选择为cpu乘以2。如果配置了 Threads.MAX ，代表使用 Runtime.getRuntime().availableProcessors() 个线程。</p>
<h3 id="Fork"><a href="#Fork" class="headerlink" title="@Fork"></a>@Fork</h3><p>we can set up how benchmark execution happens: the value parameter controls <code>how many times</code> the benchmark will be executed </p>
<p>进行 fork 的次数</p>
<h3 id="Benchmark"><a href="#Benchmark" class="headerlink" title="@Benchmark"></a>@Benchmark</h3><p>方法级注解，表示该方法是需要进行 benchmark 的对象，用法和 JUnit 的 @Test 类似。</p>
<h3 id="Param"><a href="#Param" class="headerlink" title="@Param"></a>@Param</h3><p>@Param 可以用来指定某项参数的多种情况。只能作用在字段上。</p>
<p>特别适合用来测试一个函数在不同的参数输入的情况下的性能。使用该注解<code>必须定义 @State 注解</code>。</p>
<h3 id="Setup-amp-TearDown"><a href="#Setup-amp-TearDown" class="headerlink" title="@Setup&amp;@TearDown"></a>@Setup&amp;@TearDown</h3><p>@Setup主要实现测试前的初始化工作，只能作用在方法上。用法和Junit一样。使用该注解必须定义 @State 注解。</p>
<p>@TearDown主要实现测试完成后的垃圾回收等工作，只能作用在方法上。用法和Junit一样。使用该注解必须定义 @State 注解。</p>
<p>这两个注解都有一个 Level 的枚举value，它有三个值（默认的是Trial）：</p>
<ul>
<li>Trial：在每次Benchmark的之前/之后执行。</li>
<li>Iteration：在每次Benchmark的iteration的之前/之后执行。</li>
<li>Invocation：每次调用Benchmark标记的方法之前/之后都会执行。</li>
</ul>
<h3 id="State"><a href="#State" class="headerlink" title="@State"></a>@State</h3><p>该注解定义了给定类实例的可用范围。JMH可以在多线程同时运行的环境测试，因此需要选择正确的状态。</p>
<p>Scope有如下3种值：</p>
<ul>
<li>Benchmark：同一个benchmark在多个线程之间共享实例。</li>
<li>Group：同一个线程在同一个group里共享实例。group定义参考注解 @Group 。</li>
<li>Thread：不同线程之间的实例不共享。</li>
</ul>
<h3 id="Group"><a href="#Group" class="headerlink" title="@Group"></a>@Group</h3><p>结合@Benchmark一起使用，把多个基准方法归为一类，只能作用在方法上。</p>
<h3 id="GroupThreads"><a href="#GroupThreads" class="headerlink" title="@GroupThreads"></a>@GroupThreads</h3><p>定义了多少个线程参与在组中运行基准方法。只能作用在方法上。</p>
<h3 id="OutputTimeUnit"><a href="#OutputTimeUnit" class="headerlink" title="@OutputTimeUnit"></a>@OutputTimeUnit</h3><p>基准测试结果的时间类型。可用于类或者方法上。秒、毫秒、微秒。</p>
<h3 id="CompilerControl"><a href="#CompilerControl" class="headerlink" title="@CompilerControl"></a>@CompilerControl</h3><p>该注解可以控制方法编译的行为，可用于类或者方法或者构造函数上。</p>
<ul>
<li>CompilerControl.Mode.INLINE：强制使用内联。</li>
<li>CompilerControl.Mode.DONT_INLINE：禁止使用内联。</li>
<li>CompilerControl.Mode.EXCLUDE：禁止编译方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@State</span>(Scope.Thread)</div><div class="line"><span class="meta">@BenchmarkMode</span>(Mode.AverageTime)</div><div class="line"><span class="meta">@OutputTimeUnit</span>(TimeUnit.NANOSECONDS)</div><div class="line"><span class="meta">@Warmup</span>(iterations = <span class="number">3</span>, time = <span class="number">5</span>, timeUnit = TimeUnit.SECONDS)</div><div class="line"><span class="meta">@Measurement</span>(iterations = <span class="number">5</span>, time = <span class="number">5</span>, timeUnit = TimeUnit.SECONDS)</div><div class="line"><span class="meta">@Fork</span>(<span class="number">3</span>)</div><div class="line"><span class="meta">@Threads</span>(<span class="number">8</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Do nothing</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span>(classes = StationDaoTestConfig .class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkOrderTaskMapperTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> WorkOrderTaskMapper workOrderTaskMapper;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWorkOrderTaskByErpAndCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        WorkOrderTask workOrderTask = workOrderTaskMapper.getWorkOrderTaskByErpAndCode(<span class="string">"liuhaiming7"</span>, <span class="number">9000327L</span>);</div><div class="line"></div><div class="line">        Assertions.assertThat(workOrderTask).as(<span class="string">"getWorkOrderTaskByErpAndCode结果检查"</span>).isNotNull();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@MapperScan</span>(basePackages = &#123;<span class="string">"erp.ql.station.dao"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StationDaoTestConfig</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.assertj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>assertj-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>erp.ql.station<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>erp.ql.station-domain<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring]]></title>
      <url>http://xiaozhuang.github.io/2017/05/23/spring/</url>
      <content type="html"><![CDATA[<p>Spring IoC、AOP、SpringMVC<br><a id="more"></a></p>
<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 手动写Response</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeDataToResponse</span><span class="params">(Object data, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    PrintWriter out = response.getWriter();</div><div class="line">    response.setContentType(<span class="string">"application/json"</span>);</div><div class="line">    response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">    <span class="comment">// 非String类型key转为String</span></div><div class="line">    out.print(JSON.toJSONString(data, SerializerFeature.WriteNonStringKeyAsString));</div><div class="line">    out.flush();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="default-servlet-handler"><a href="#default-servlet-handler" class="headerlink" title="default-servlet-handler"></a>default-servlet-handler</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 请求已经作映射，后台对应的处理程序，没有作映射，WEB应用服务器默认的Servlet处理，从而找到对应的静态资源 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 更进一步，由Spring MVC框架处理静态资源，允许静态资源放在任何地方，如WEB-INF目录下、类路径下等，甚至可以将JavaScript等静态文件打到JAR包中--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/,classpath:/META-INF/publicResources/"</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- static包静态加载 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/static/**"</span> <span class="attr">location</span>=<span class="string">"/static/"</span> /&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// javaConfig spring mvc resources</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(<span class="keyword">final</span> ResourceHandlerRegistry registry)</span> </span>&#123;</div><div class="line">    registry.addResourceHandler(<span class="string">"/resources/**"</span>).addResourceLocations(<span class="string">"/resources/"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>The pattern / will make your servlet the default servlet for the app, meaning it will pick up every pattern that doesn’t have another exact match.</p>
</blockquote>
<a href="https://stackoverflow.com/questions/17360374/dispatcher-servlet-spring-and-url-pattern?rq=1" title="DispatcherServletUrl" target="_blank" rel="external">DispatcherServletUrl</a>
<h2 id="Reponse-application-json"><a href="#Reponse-application-json" class="headerlink" title="Reponse application/json"></a>Reponse application/json</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/foo"</span>, method=RequestMethod.GET, produces = <span class="string">"application/json"</span>)</div></pre></td></tr></table></figure>
<h2 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="ModelAttribute"></a>ModelAttribute</h2><h3 id="方法使用-ModelAttribute标注"><a href="#方法使用-ModelAttribute标注" class="headerlink" title="方法使用@ModelAttribute标注"></a>方法使用@ModelAttribute标注</h3><p>标注了@ModelAttribute的方法实际上会在@RequestMapping方法之前被调用<br>@ModelAttribute说明方法是用于添加一个或多个属性到model上</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方式一，方法接收一个Model对象，然后可以向其中添加任意数量的属性</span></div><div class="line"><span class="meta">@ModelAttribute</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">populateModel</span><span class="params">(@RequestParam String abc, Model model)</span> </span>&#123;  </div><div class="line">   model.addAttribute(<span class="string">"attributeName"</span>, abc);  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 方式二，方法通过返回值的方式默认地将添加一个属性，框架将根据属性的类型给予一个默认名称</span></div><div class="line"><span class="meta">@ModelAttribute</span></div><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">addAccount</span><span class="params">(@RequestParam String number)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> accountManager.findAccount(number);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="方法参数使用-ModelAttribute标注"><a href="#方法参数使用-ModelAttribute标注" class="headerlink" title="方法参数使用@ModelAttribute标注"></a>方法参数使用@ModelAttribute标注</h3><p>标注在方法参数上的@ModelAttribute说明了该方法参数的值将由model中取得</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit"</span>, method = RequestMethod.POST)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processSubmit</span><span class="params">(@ModelAttribute Pet pet)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><h2 id="获取User-Agent"><a href="#获取User-Agent" class="headerlink" title="获取User-Agent"></a>获取User-Agent</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//handler加参数</span></div><div class="line"><span class="function"><span class="keyword">public</span> ResultInfo <span class="title">submit</span><span class="params">(HttpServletRequest req, @ModelAttribute(value = <span class="string">"serviceProductInfo"</span>)</span> ServiceProductInfo serviceProductInfo, @<span class="title">RequestHeader</span><span class="params">(<span class="string">"User-Agent"</span>)</span> String userAgent) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>适合场景性能监控、访问控制、事务管理及日志记录</p>
<p>Spring只能支持方法拦截的AOP</p>
<p>Spring中4中方式实现aop拦截功能</p>
<ul>
<li>使用ProxyFactoryBean和对应接口实现AOP</li>
<li>使用XML配置AOP</li>
<li>使用@AspectJ注解驱动切面</li>
<li>使用AspectJ注入切面</li>
</ul>
<h2 id="切面顺序"><a href="#切面顺序" class="headerlink" title="切面顺序"></a>切面顺序</h2><p>目标执行前（进入时），优先级高的通知先执行，<br>目标执行后（出来时），优先级高的通知后执行</p>
<blockquote>
<p>order约小，优先级越高；默认：LOWEST_PRECEDENCE<br>Spring aop 如一个同心圆，目标方法为圆心，外层切面order小</p>
</blockquote>
<p>未指定顺序，Spring AOP将以<code>随机的顺序</code>来织入这两个增强处理。</p>
<p>方法1：实现org.springframework.core.Ordered接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>  </div><div class="line"><span class="meta">@Aspect</span>  </div><div class="line"><span class="meta">@Slf</span>4j  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageQueueAopAspect1</span> <span class="keyword">implements</span> <span class="title">Ordered</span></span>&#123;</div><div class="line">	<span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">        <span class="keyword">return</span> <span class="number">2</span>;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法2：注解：org.springframework.core.annotation.Order </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>  </div><div class="line"><span class="meta">@Aspect</span>  </div><div class="line"><span class="meta">@Slf</span>4j  </div><div class="line"><span class="meta">@Order</span>(<span class="number">1</span>)  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageQueueAopAspect1</span></span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法3：配置文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">expose-proxy</span>=<span class="string">"true"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"aopBean"</span> <span class="attr">order</span>=<span class="string">"0"</span>&gt;</span>    </div><div class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"testPointcut"</span>  <span class="attr">expression</span>=<span class="string">"@annotation(xxx.xxx.xxx.annotation.xxx)"</span>/&gt;</span>    </div><div class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">pointcut-ref</span>=<span class="string">"testPointcut"</span> <span class="attr">method</span>=<span class="string">"doAround"</span> /&gt;</span>    </div><div class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span>    </div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Around advice（环绕通知），多个切面，前面切面不调用jp.proceed()直接return，之后的切面不执行；<br>环绕通知不执行目标方法情况下，前置通知不执行；后置通知和返回通知执行</p>
</blockquote>
<h2 id="AOP-Solutions"><a href="#AOP-Solutions" class="headerlink" title="AOP Solutions"></a>AOP Solutions</h2><h3 id="自定义AOP-注解-在同一个类中的方法级别调用导致aop注解失效"><a href="#自定义AOP-注解-在同一个类中的方法级别调用导致aop注解失效" class="headerlink" title="自定义AOP 注解 在同一个类中的方法级别调用导致aop注解失效"></a>自定义AOP 注解 在同一个类中的方法级别调用导致aop注解失效</h3><ol>
<li>AOP上下文暴露代理对象</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(TicketService)AopContext.currentProxy()</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 基于@AspectJ切面的驱动器 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 自动为容器中匹配@AspectJ切面Bean创建代理，完成切面织入 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 使用CGlib动态代理增强 proxy-target-class默认为false --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- exposeProxy = true,AOP上下文暴露代理对象 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- (TicketService)AopContext.currentProxy()获取当前代理对象 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span> <span class="attr">expose-proxy</span>=<span class="string">"true"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Spring4.3</span></div><div class="line"><span class="meta">@EnableAspectJAutoProxy</span>(exposeProxy=<span class="keyword">true</span>, proxyTargetClass=<span class="keyword">false</span>)</div></pre></td></tr></table></figure>
<ol>
<li>通过ApplicationContext获取代理对象</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringUtil</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span></span></div><div class="line">            <span class="keyword">throws</span> BeansException &#123;</div><div class="line">        <span class="keyword">if</span> (SpringUtil.applicationContext == <span class="keyword">null</span>) &#123;</div><div class="line">            SpringUtil.applicationContext = applicationContext;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取applicationContext</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> applicationContext;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//通过name获取 Bean.</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String name)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> getApplicationContext().getBean(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//通过class获取Bean.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> getApplicationContext().getBean(clazz);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//通过name,以及Clazz返回指定的Bean</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name,Class&lt;T&gt; clazz)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> getApplicationContext().getBean(name, clazz);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>自注入</li>
</ol>
<h3 id="自注入"><a href="#自注入" class="headerlink" title="自注入"></a>自注入</h3><p><code>Self injection with Spring</code><br>Self autowiring will be officially supported in Spring Framework 4.3. The implementation can be seen in this GitHub commit.<br><a href="https://github.com/spring-projects/spring-framework/commit/4a0fa69ce469cae2e8c8a1a45f0b43f74a74481d" target="_blank" rel="external">https://github.com/spring-projects/spring-framework/commit/4a0fa69ce469cae2e8c8a1a45f0b43f74a74481d</a></p>
<p>It is totally ok. Moreover there was a Jira ticket for supporting this feature using @Autowired annotations. It’s fixed in Spring 4.3+ versions.<br>However for xml-based configuration or using @Resource annotation it’s working in the earlier versions.</p>
<p><a href="https://jira.spring.io/browse/SPR-8450?focusedCommentId=121028&amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-121028" target="_blank" rel="external">https://jira.spring.io/browse/SPR-8450?focusedCommentId=121028&amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-121028</a><br><a href="https://stackoverflow.com/questions/5152686/self-injection-with-spring" target="_blank" rel="external">https://stackoverflow.com/questions/5152686/self-injection-with-spring</a></p>
<a href="https://stackoverflow.com/questions/5152686/self-injection-with-spring" title="Self injection with Spring" target="_blank" rel="external">Self injection with Spring</a>
<a href="https://jira.spring.io/browse/SPR-8450?focusedCommentId=121028&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-121028" title="Support @Autowired-like self injection" target="_blank" rel="external">Support @Autowired-like self injection</a>
<h3 id="AutoProxyCreator"><a href="#AutoProxyCreator" class="headerlink" title="AutoProxyCreator"></a>AutoProxyCreator</h3><p>beanName “org.springframework.aop.config.internalAutoProxyCreator”</p>
<p>基于注解的切面创建器<br>org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator</p>
<h2 id="注入多个相同类型Bean"><a href="#注入多个相同类型Bean" class="headerlink" title="注入多个相同类型Bean"></a>注入多个相同类型Bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 移除List类型bean</span></div><div class="line"></div><div class="line"><span class="comment">// 方式1</span></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> MovieCatalog[] movieCatalogs;</div><div class="line"></div><div class="line"><span class="comment">// 方式2</span></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> List&lt;MovieCatalog&gt; daemons;</div></pre></td></tr></table></figure>
<a href="https://coderanch.com/t/685432/frameworks/Spring-autowire-implementation-Interface" title="Spring-autowire-implementation-Interface" target="_blank" rel="external">Spring-autowire-implementation-Interface</a>
<h2 id="onAround返回类型为void"><a href="#onAround返回类型为void" class="headerlink" title="onAround返回类型为void"></a>onAround返回类型为void</h2><p>切面方法返回值类型为void，onAround跳过方法执行，返回null</p>
<a href="https://stackoverflow.com/questions/2408626/returning-a-void-object" title="returning-a-void-object" target="_blank" rel="external">returning-a-void-objec</a>
<h2 id="ProxyFactoryBean"><a href="#ProxyFactoryBean" class="headerlink" title="ProxyFactoryBean"></a>ProxyFactoryBean</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionServiceProxy"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span></span></div><div class="line">    <span class="attr">p:interceptorNames</span>=<span class="string">"learnThrowsAdvice"</span> </div><div class="line">    <span class="attr">p:target-ref</span>=<span class="string">"transactionService"</span></div><div class="line">    <span class="attr">p:proxyTargetClass</span>=<span class="string">"true"</span> /&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>TODD</p>
</blockquote>
<h2 id="AOP-通知类型"><a href="#AOP-通知类型" class="headerlink" title="AOP 通知类型"></a>AOP 通知类型</h2><h3 id="环绕通知（Around）"><a href="#环绕通知（Around）" class="headerlink" title="环绕通知（Around）"></a>环绕通知（Around）</h3><p>目标方法<code>调用之前</code>和<code>调用之后</code>执行自定义行为</p>
<h3 id="前置通知（Before）"><a href="#前置通知（Before）" class="headerlink" title="前置通知（Before）"></a>前置通知（Before）</h3><p>目标方法<code>调用之前</code>调用</p>
<h3 id="后置通知（After）"><a href="#后置通知（After）" class="headerlink" title="后置通知（After）"></a>后置通知（After）</h3><p>目标<code>方法调用</code>之后调用</p>
<h3 id="返回通知（After-returning）"><a href="#返回通知（After-returning）" class="headerlink" title="返回通知（After-returning）"></a>返回通知（After-returning）</h3><p>目标方法<code>成功执行之后</code>调用</p>
<h3 id="异常通知（After-throwing）"><a href="#异常通知（After-throwing）" class="headerlink" title="异常通知（After-throwing）"></a>异常通知（After-throwing）</h3><p>目标方法<code>抛出异常后</code>调用</p>
<h2 id="AspectJ-表达式"><a href="#AspectJ-表达式" class="headerlink" title="AspectJ 表达式"></a>AspectJ 表达式</h2><p>组合切入点表达式</p>
<p>AspectJ使用 且 &amp;&amp;、或 ||、非 ！组合切入点表达式</p>
<p>Schema风格下，由于在XML中使用转义字符很不方便<br>Spring 提供 and、or、not来代替&amp;&amp;、||、！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Before</span>(<span class="string">"com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&amp; @annotation(auditable)"</span>) </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">audit</span><span class="params">(Auditable auditable)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<h3 id="execution"><a href="#execution" class="headerlink" title="execution()"></a>execution()</h3><p><code>Pointcut Expression</code></p>
<p>用于匹配连接点的执行方法</p>
<p>execution(方法表达式)</p>
<p>execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern) throws-pattern?)</p>
<ul>
<li>modifiers-pattern：方法的访问类型，public等</li>
<li>ret-type-pattern：方法的返回值类型</li>
<li>declaring-type-pattern：方法的声明类</li>
<li>name-pattern：方法的名称</li>
<li>param-pattern：方法参数的类型</li>
<li>throws-pattern：异常类型</li>
</ul>
<p>表达式语法</p>
<ul>
<li>*：任何数量字符</li>
<li>..：匹配任何数量字符的重复，如在<code>类型模式中匹配任何数量子包</code>；而在<code>方法参数模式中匹配任何数量参数</code></li>
<li>+：匹配指定类型的子类型；仅能作为后缀放在类型模式后边</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// any public method</span></div><div class="line">execution(<span class="keyword">public</span> * *(..))</div><div class="line"><span class="comment">// any method with a name beginning with "set"</span></div><div class="line">execution(* set*(..))</div><div class="line"><span class="comment">// any method defined by the AccountService interface</span></div><div class="line">execution(* com.xyz.service.AccountService.*(..))</div><div class="line"><span class="comment">// any method defined in the service package</span></div><div class="line">execution(* com.xyz.service.*.*(..))</div><div class="line"><span class="comment">// any method defined in the service package or a sub-package</span></div><div class="line">execution(* com.xyz.service..*.*(..))</div></pre></td></tr></table></figure>
<h3 id="annotation"><a href="#annotation" class="headerlink" title="@annotation()"></a>@annotation()</h3><p>限制匹配<code>带有指定注解</code>执行方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.example.annotation.UserAccessAnnotation)"</span>) </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userAccess</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"><span class="meta">@Before</span>(<span class="string">"com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&amp; @annotation(auditable)"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">audit</span><span class="params">(Auditable auditable)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<h3 id="this"><a href="#this" class="headerlink" title="this()"></a>this()</h3><p>限制连接点匹配AOP代理的Bean引用为指定类型的类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Before</span>(<span class="string">"com.xyz.myapp.SystemArchitecture.businessService() &amp;&amp; this(usageTracked)"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recordUsage</span><span class="params">(UsageTracked usageTracked)</span> </span>&#123;</div><div class="line">     usageTracked.incrementUseCount();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="within"><a href="#within" class="headerlink" title="within()"></a>within()</h3><p>限制连接点匹配指定的类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">within(com.xyz.service..*)</div><div class="line">within(com.xyz.service.*)</div></pre></td></tr></table></figure>
<h3 id="within-1"><a href="#within-1" class="headerlink" title="@within()"></a>@within()</h3><p>限制连接点匹配<code>指定注解所标注</code>的<code>类型</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@within</span>(org.springframework.transaction.annotation.Transactional)</div></pre></td></tr></table></figure>
<h3 id="target"><a href="#target" class="headerlink" title="target()"></a>target()</h3><p>限制连接点匹配目标对象为<code>指定类型</code>的<code>类</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">target(com.xyz.service.AccountService)</div><div class="line"></div><div class="line"><span class="meta">@Before</span>(value=<span class="string">"com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&amp; target(bean) &amp;&amp; @annotation(auditable)"</span>,</div><div class="line">        argNames=<span class="string">"bean,auditable"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">audit</span><span class="params">(Object bean, Auditable auditable)</span> </span>&#123;</div><div class="line">    AuditCode code = auditable.value();</div><div class="line">    <span class="comment">// ... use code and bean</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Before</span>(value=<span class="string">"com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&amp; target(bean) &amp;&amp; @annotation(auditable)"</span>,</div><div class="line">        argNames=<span class="string">"bean,auditable"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">audit</span><span class="params">(JoinPoint jp, Object bean, Auditable auditable)</span> </span>&#123;</div><div class="line">    AuditCode code = auditable.value();</div><div class="line">    <span class="comment">// ... use code, bean, and jp</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="target-1"><a href="#target-1" class="headerlink" title="@target()"></a>@target()</h3><p>限制连接点匹配目标对象为<code>指定类型注解标注</code>的<code>类</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@target</span>(org.springframework.transaction.annotation.Transactional)</div></pre></td></tr></table></figure>
<h3 id="args"><a href="#args" class="headerlink" title="args()"></a>args()</h3><p>限制连接点匹配<code>参数为指定类型</code>的执行方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">args(java.io.Serializable)</div><div class="line"></div><div class="line"><span class="meta">@AfterReturning</span>(value = <span class="string">"target(com.jd.jmq.client.producer.MessageProducer) &amp;&amp; args(message,..))"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSingleMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">this</span>.addMessage(message);</div><div class="line">    logger.info(JacksonUtil.toJson(message));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="args-1"><a href="#args-1" class="headerlink" title="@args()"></a>@args()</h3><p>限制连接点匹配<code>参数由指定注解标注</code>的执行方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@args</span>(com.xyz.security.Classified)</div><div class="line"></div><div class="line">Before(value = <span class="string">"execution(* ..Sample+.sampleGenericMethod(*)) &amp;&amp; args(param)"</span>, argNames=<span class="string">"param"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeSampleMethod</span><span class="params">(MyType param)</span> </span>&#123;&#125;)</div></pre></td></tr></table></figure>
<p>在Spring AOP中，除了execution和bean指示符不能传递参数给通知方法，<code>其他指示符都可以将匹配的相应参数或对象自动传递给通知方法</code>。</p>
<p>args(param)将首先查找通知方法上同名的参数，并在<code>方法执行时（运行时）匹配传入的参数是使用该同名参数类型</code>，即java.lang.String；<br>如果匹配将把该被通知参数传递给通知方法上同名参数</p>
<p>在class文件中<code>没生成变量调试信息</code>是获取不到方法参数名字的。可使用argNames来指定参数名。</p>
<h3 id="bean"><a href="#bean" class="headerlink" title="bean()"></a>bean()</h3><p><code>Spring特有表达式</code></p>
<p>特定名称的Bean对象的执行方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bean(tradeService)</div><div class="line">bean(*Service)</div></pre></td></tr></table></figure>
<h3 id="reference-pointcut"><a href="#reference-pointcut" class="headerlink" title="reference pointcut"></a>reference pointcut</h3><p><code>Spring特有表达式</code></p>
<p>引用其他命名切入点</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(public * com.sunday.spring_learn.service.*.*(..))"</span>)</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="meta">@Before</span>(<span class="string">"log()"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;&#125;</div></pre></td></tr></table></figure>
<h2 id="引介增强"><a href="#引介增强" class="headerlink" title="引介增强"></a>引介增强</h2><p>targetClass追加接口（或者说追加更多的方法）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockableMixin</span> </span>&#123;</div><div class="line">    <span class="meta">@DeclareParents</span>( value = <span class="string">"com.sunday.spring_learn.service.impl.FooServiceImpl"</span>, defaultImpl = LockableImpl.class )</div><div class="line">    <span class="keyword">public</span> Lockable lockable;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><h2 id="Java读取环境变量"><a href="#Java读取环境变量" class="headerlink" title="Java读取环境变量"></a>Java读取环境变量</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># VM arguments指定log4j配置文件</span></div><div class="line">-Dlog4j.configurationFile=path/to/log4j2.xml</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取配置</span></div><div class="line">System.getProperty(<span class="string">"log4j.configurationFile"</span>)</div></pre></td></tr></table></figure>
<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><h2 id="最好不要配置xsd文件的版本号"><a href="#最好不要配置xsd文件的版本号" class="headerlink" title="最好不要配置xsd文件的版本号"></a>最好不要配置xsd文件的版本号</h2><p>因为如果没有配置版本号，取的就是当前jar里的XSD文件，减少了各种风险。<br>而且这样约定大于配置的方式很优雅。</p>
<h1 id="自定义xml标签"><a href="#自定义xml标签" class="headerlink" title="自定义xml标签"></a>自定义xml标签</h1><p><code>命名空间</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">asyn:config</span> <span class="attr">enabled</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">asyn:strategy</span> <span class="attr">ref</span>=<span class="string">"asynMethodStrategyMySQL"</span>&gt;</span><span class="tag">&lt;/<span class="name">asyn:strategy</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">asyn:config</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="配置NamespaceHandler"><a href="#配置NamespaceHandler" class="headerlink" title="配置NamespaceHandler"></a>配置NamespaceHandler</h2><p><code>META-INF/spring.handlers</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http\://framework.ql.jd.com/schema/asyn=com.jd.ql.framework.asyn.config.handler.AsynNamespaceHandler</div></pre></td></tr></table></figure>
<h2 id="定义NamespaceHandler"><a href="#定义NamespaceHandler" class="headerlink" title="定义NamespaceHandler"></a>定义NamespaceHandler</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsynNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        registerBeanDefinitionParser(<span class="string">"config"</span>, <span class="keyword">new</span> AsynBeanDefinitionParser());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="BeanDefinitionParser"><a href="#BeanDefinitionParser" class="headerlink" title="BeanDefinitionParser"></a>BeanDefinitionParser</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsynBeanDefinitionParser</span> <span class="keyword">extends</span> <span class="title">AbstractSingleBeanDefinitionParser</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt; getBeanClass(Element element) &#123;</div><div class="line">        <span class="keyword">return</span> Asyn.class;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doParse</span><span class="params">(Element element, ParserContext parserContext, BeanDefinitionBuilder builder)</span> </span>&#123;</div><div class="line">        String enabled = element.getAttribute(<span class="string">"enabled"</span>);</div><div class="line">        <span class="keyword">if</span>(StringUtils.hasText(enabled))&#123;</div><div class="line">            builder.addPropertyValue(<span class="string">"enabled"</span>, enabled); </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        List&lt;Element&gt; childElts = DomUtils.getChildElements(element);</div><div class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(childElts))&#123;</div><div class="line">            List&lt;String&gt; strategys = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">            <span class="keyword">for</span> (Element elt: childElts) &#123;</div><div class="line">                String localName = parserContext.getDelegate().getLocalName(elt);</div><div class="line">                <span class="keyword">if</span>(<span class="string">"strategy"</span>.equals(localName))&#123;</div><div class="line">                    strategys.add(elt.getAttribute(<span class="string">"ref"</span>));</div><div class="line">                &#125;</div><div class="line">                builder.addPropertyValue(<span class="string">"strategy"</span>, strategys);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="配置schemas-xsd"><a href="#配置schemas-xsd" class="headerlink" title="配置schemas xsd"></a>配置schemas xsd</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http\://framework.ql.jd.com/schema/asyn/asyn.xsd=com/jd/ql/framework/asyn/config/asyn.xsd</div></pre></td></tr></table></figure>
<p><code>xsd配置编辑软件 XMLSpy2013</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns</span>=<span class="string">"http://framework.ql.jd.com/schema/asyn"</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://framework.ql.jd.com/schema/asyn"</span> <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span> <span class="attr">attributeFormDefault</span>=<span class="string">"unqualified"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"config"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">xsd:complexType</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"strategy"</span> <span class="attr">type</span>=<span class="string">"strategyType"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"xsd:string"</span> <span class="attr">use</span>=<span class="string">"optional"</span> <span class="attr">default</span>=<span class="string">"asynConf"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"enabled"</span> <span class="attr">type</span>=<span class="string">"xsd:boolean"</span> <span class="attr">default</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"strategyType"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"ref"</span> <span class="attr">type</span>=<span class="string">"xsd:string"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xsd:schema</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>root element 必须有属性(attribute) id</p>
<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><p><code>工具方法</code></p>
<h2 id="SerializationUtils"><a href="#SerializationUtils" class="headerlink" title="SerializationUtils"></a>SerializationUtils</h2><p><code>Serializable</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(Object object)</div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span></div></pre></td></tr></table></figure>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 字符串分隔</span></div><div class="line"><span class="comment">// String CONFIG_LOCATION_DELIMITERS = ",; \t\n";</span></div><div class="line"></div><div class="line">String dependents = <span class="string">"dc1,dc2;dc3"</span>;</div><div class="line">String[] tokenizeToStringArray = StringUtils.tokenizeToStringArray(dependents, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</div><div class="line">System.out.println(JSON.toJSON(tokenizeToStringArray));</div><div class="line"></div><div class="line"><span class="comment">// 数组拼接字符串</span></div><div class="line">String arrayToDelimitedString = StringUtils.arrayToDelimitedString(tokenizeToStringArray, <span class="string">"|"</span>);</div><div class="line">System.out.println(arrayToDelimitedString);</div><div class="line"></div><div class="line"><span class="comment">// Convenience method to return a String array as a CSV String.</span></div><div class="line">org.springframework.util.StringUtils.arrayToCommaDelimitedString()</div></pre></td></tr></table></figure>
<h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p><code>org.springframework.util.ClassUtils</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPresent</span><span class="params">(String className, ClassLoader classLoader)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (classLoader == <span class="keyword">null</span>) &#123;</div><div class="line">        classLoader = ClassUtils.getDefaultClassLoader();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        forName(className, classLoader);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String className, ClassLoader classLoader)</div><div class="line">        <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">    <span class="keyword">if</span> (classLoader != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> classLoader.loadClass(className);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> Class.forName(className);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Map&lt;Object, Object&gt;&gt; resources =</div><div class="line">            <span class="keyword">new</span> NamedThreadLocal&lt;Map&lt;Object, Object&gt;&gt;(<span class="string">"Transactional resources"</span>);</div></pre></td></tr></table></figure>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//获取方法</span></div><div class="line">Method invokeMethod = ReflectionUtils.findMethod(invokeType, invokeMethodName, paramTypes);</div><div class="line"></div><div class="line"><span class="comment">//调用</span></div><div class="line">Object invokeRet = ReflectionUtils.invokeMethod(invokeMethod, invokeBean, args);</div><div class="line"></div><div class="line">ReflectionUtils.makeAccessible(<span class="keyword">this</span>.bridgedMethod);</div></pre></td></tr></table></figure>
<h2 id="注解读取"><a href="#注解读取" class="headerlink" title="注解读取"></a>注解读取</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// org.springframework.core.annotation.AnnotationUtils</span></div><div class="line"></div><div class="line">org.springframework.jmx.export.annotation.ManagedAttribute ann =</div><div class="line">                AnnotationUtils.findAnnotation(method, org.springframework.jmx.export.annotation.ManagedAttribute.class);</div><div class="line"><span class="keyword">if</span> (ann == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line">ManagedAttribute managedAttribute = <span class="keyword">new</span> ManagedAttribute();</div><div class="line">AnnotationBeanUtils.copyPropertiesToBean(ann, managedAttribute, <span class="string">"defaultValue"</span>);</div><div class="line"><span class="keyword">if</span> (ann.defaultValue().length() &gt; <span class="number">0</span>) &#123;</div><div class="line">    managedAttribute.setDefaultValue(ann.defaultValue());</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> managedAttribute;</div></pre></td></tr></table></figure>
<h1 id="配置加载-properties、xml"><a href="#配置加载-properties、xml" class="headerlink" title="配置加载 properties、xml"></a>配置加载 properties、xml</h1><h2 id="使用Environment"><a href="#使用Environment" class="headerlink" title="使用Environment"></a>使用Environment</h2><p><code>spring3.1</code></p>
<blockquote>
<p>PropertySource加载的properties中的配置，可以通过Environment获取到</p>
</blockquote>
<h2 id="PropertySource"><a href="#PropertySource" class="headerlink" title="PropertySource"></a>PropertySource</h2><p>使用  @PropertySource 加载配置文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@PropertySources</span>(&#123;</div><div class="line">    <span class="meta">@PropertySource</span>(<span class="string">"classpath:db.properties"</span>),</div><div class="line">    <span class="meta">@PropertySource</span>(<span class="string">"classpath:redis.properties"</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Environment env;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 静态(static) bean</div><div class="line">     * 支持<span class="doctag">@value</span>中使用的$&#123;…&#125;占位符</div><div class="line">     * PropertySourcesPlaceHolderConfigurer Bean only required for <span class="doctag">@Value</span>("&#123;&#125;") annotations.</div><div class="line">     * Remove this bean if you are not using <span class="doctag">@Value</span> annotations for injecting properties.</div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PropertySourcesPlaceholderConfigurer <span class="title">propertySourcesPlaceholderConfigurer</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PropertySourcesPlaceholderConfigurer();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> JedisConnectionFactory <span class="title">jedisConnFactory</span><span class="params">(@Value(<span class="string">"$&#123;redis.usePool&#125;"</span>)</span> <span class="keyword">boolean</span> usePool)</span>&#123;</div><div class="line">        String redisHost = env.getProperty(<span class="string">"redis.host"</span>);</div><div class="line">        </div><div class="line">        JedisConnectionFactory jedisConnectionFactory = <span class="keyword">new</span> JedisConnectionFactory();</div><div class="line">        jedisConnectionFactory.setHostName(redisHost);</div><div class="line">        jedisConnectionFactory.setUsePool(usePool);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> jedisConnectionFactory;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- PropertySource xml 配置方式 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- PropertySourcesPlaceholderConfigurer是BeanFactoryPostProcessor的一个实现, 功能为读取properties文件然后用properties文件中实际的值替换占位符变量($&#123;somename&#125;)  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.PropertySourcesPlaceholderConfigurer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreUnresolvablePlaceholders"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:application.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="使用SpEL表达式"><a href="#使用SpEL表达式" class="headerlink" title="使用SpEL表达式"></a>使用SpEL表达式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 通过SpEL表达式#&#123;&#125;获取配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"config"</span> <span class="attr">location</span>=<span class="string">"classpath:props.properties"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ds"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"#&#123;config.driver&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"#&#123;config.url&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"#&#123;config.username&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"#&#123;config.password&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="通过Properties实体"><a href="#通过Properties实体" class="headerlink" title="通过Properties实体"></a>通过Properties实体</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- done logo xml 配置--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">location</span>=<span class="string">"classpath:system/done_logo.xml"</span> /&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 代码获取properties</span></div><div class="line">Properties doneLogo = applicationContext.getBean(<span class="string">"doneLogo"</span>,Properties.class);</div></pre></td></tr></table></figure>
<h2 id="配置注入"><a href="#配置注入" class="headerlink" title="配置注入"></a>配置注入</h2><p>Spring中的 @Value 注解可以获得Spring容器中加载的全局变量。以注解的形式赋予bean的成员变量。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. Property Example</span></div><div class="line"><span class="comment">//@PropertySource("classpath:/config.properties&#125;")</span></div><div class="line"><span class="comment">//@Configuration</span></div><div class="line"></div><div class="line"><span class="comment">// 默认值</span></div><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;mongodb.url:127.0.0.1&#125;"</span>)</div><div class="line"><span class="keyword">private</span> String mongodbUrl;</div><div class="line"></div><div class="line"><span class="meta">@Value</span>(<span class="string">"#&#123;'$&#123;mongodb.url:172.0.0.1&#125;'&#125;"</span>)</div><div class="line"><span class="keyword">private</span> String mongodbUrl;</div><div class="line"></div><div class="line"><span class="meta">@Value</span>(<span class="string">"#&#123;config['mongodb.url']?:'127.0.0.1'&#125;"</span>)</div><div class="line"><span class="keyword">private</span> String mongodbUrl;</div><div class="line"></div><div class="line"><span class="meta">@Value</span>(<span class="string">"#&#123;aBean.age ?: 21&#125;"</span>)</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line"><span class="comment">// 默认为空</span></div><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;stuff.value:@null&#125;"</span>)</div><div class="line"><span class="keyword">private</span> String value;</div><div class="line"></div><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;app.name:#&#123;null&#125;&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String name;</div></pre></td></tr></table></figure>
<h2 id="使用-PropertiesFactoryBean"><a href="#使用-PropertiesFactoryBean" class="headerlink" title="使用 PropertiesFactoryBean"></a>使用 PropertiesFactoryBean</h2><p>PropertiesFacotryBean是FactoryBean的一个实现, 功能为读取properties文件然后将其封装成Properties类的一个Bean</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emailProps"</span></span></div><div class="line">    <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertiesFactoryBean"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span></span></div><div class="line">        <span class="attr">value</span>=<span class="string">"classpath:com/smart/fb/mails.properties"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"secApplicationProperties"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertiesFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreResourceNotFound"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">     </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 不能使用classpath*: --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:important.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:other2.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">PropertiesFactoryBean pfb = <span class="keyword">new</span> PropertiesFactoryBean();</div><div class="line">pfb.setLocation(TEST_PROPS);</div><div class="line">Properties localProps = <span class="keyword">new</span> Properties();</div><div class="line">localProps.setProperty(<span class="string">"key2"</span>, <span class="string">"value2"</span>);</div><div class="line">localProps.setProperty(<span class="string">"tb.array[0].age"</span>, <span class="string">"0"</span>);</div><div class="line">pfb.setProperties(localProps);</div><div class="line"></div><div class="line">pfb.afterPropertiesSet();</div><div class="line">Properties props = pfb.getObject();</div><div class="line">assertEquals(<span class="string">"99"</span>, props.getProperty(<span class="string">"tb.array[0].age"</span>));</div><div class="line">assertEquals(<span class="string">"value2"</span>, props.getProperty(<span class="string">"key2"</span>));</div></pre></td></tr></table></figure>
<h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><p><code>配置文件</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Resource classPathResource = <span class="keyword">new</span> ClassPathResource(<span class="string">"log4j2.xml"</span>);</div><div class="line">        </div><div class="line">FileSystemResource fileSystemResource = <span class="keyword">new</span> FileSystemResource(<span class="string">"F:\\XXX\\log4j2.xml"</span>);</div><div class="line"></div><div class="line">UrlResource urlResource = <span class="keyword">new</span> UrlResource(<span class="string">"http://libs.baidu.com/jquery/1.9.1/jquery.min.js"</span>);</div><div class="line"></div><div class="line">InputStreamResource inputStreamResource = <span class="keyword">new</span> InputStreamResource(<span class="keyword">new</span> FileInputStream(<span class="string">"F:\\XXX\\log4j2.xml"</span>));</div><div class="line"></div><div class="line">ByteArrayResource byteArrayResource = <span class="keyword">new</span> ByteArrayResource(<span class="keyword">new</span> String(<span class="string">"configData"</span>).getBytes());</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Ant模式通配符匹配</span></div><div class="line"><span class="comment">// ?    匹配任何单字符  </span></div><div class="line"><span class="comment">// *   匹配0或者任意数量的字符     </span></div><div class="line"><span class="comment">// **  匹配0或者更多的目录</span></div><div class="line">PathMatchingResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</div><div class="line">Resource[] resources = resolver.getResources(<span class="string">"classpath:mybatis/**/*.xml"</span>);</div><div class="line"></div><div class="line">Resource resources = resolver.getResource(<span class="string">"file:F:\\done-logo.xml"</span>);</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- classpath：只会到你的class路径中查找找文件;  --&gt;</span></div><div class="line"><span class="comment">&lt;!-- classpath*：不仅包含class路径，还包括jar文件中(class路径)进行查找；如果文件不存在，则不加载 --&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- &lt;context:property-placeholder location="classpath*:conf/conf*.properties" /&gt; --&gt;</span></div><div class="line"><span class="comment">&lt;!-- &lt;context:property-placeholder location="classpath:conf/conf*.properties" ignore-unresolvable="true"/&gt; --&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- ignore-resource-not-found：如果属性文件找不到，是否忽略，默认false，即不忽略，找不到将抛出异常  --&gt;</span></div><div class="line"><span class="comment">&lt;!-- ignore-unresolvable：是否忽略解析不到的属性，如果不忽略，找不到将抛出异常  --&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- system-properties-mode 系统属性模式，ENVIRONMENT（默认），NEVER，OVERRIDE --&gt;</span></div><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">ENVIRONMENT：使用Spring 3.1提供的PropertySourcesPlaceholderConfigurer，其他情况使用Spring 3.1之前的PropertyPlaceholderConfigurer </div><div class="line">OVERRIDE： PropertyPlaceholderConfigurer使用，因为在spring 3.1之前版本是没有Enviroment的，所以OVERRIDE是spring 3.1之前版本的Environment </div><div class="line">NEVER：只查找properties-ref、location；</div><div class="line"> --&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:redis.properties"</span> </span></div><div class="line">    <span class="attr">ignore-unresolvable</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">ignore-resource-not-found</span>=<span class="string">"true"</span>/&gt;</div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>= <span class="string">"propertyConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreUnresolvablePlaceholders"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:authen.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:waybill.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span></span></div><div class="line">    <span class="attr">p:host-name</span>=<span class="string">"$&#123;redis.hostName&#125;"</span> </div><div class="line">    <span class="attr">p:port</span>=<span class="string">"$&#123;resis.port&#125;"</span> </div><div class="line">    <span class="attr">p:timeout</span>=<span class="string">"$&#123;redis.timeout&#125;"</span></div><div class="line">    <span class="attr">p:password</span>=<span class="string">"$&#123;redis.password&#125;"</span> </div><div class="line">    <span class="attr">p:use-pool</span>=<span class="string">"$&#123;redis.usePool&#125;"</span> /&gt;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 编程方式获取 property-placeholder的配置，支持默认值</span></div><div class="line">String driverClassName = beanFactory.resolveEmbeddedValue(<span class="string">"$&#123;datasource.driverClassName: defaultDriverClassName&#125;"</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>只能有一个context:property-placeholder；<br>不同模块xml，分别加载properties文件，Spring加载两个模块xml配置时，报错Could not resolve placeholder</p>
</blockquote>
<p>解决办法：<br>各层都按路径，载入properties，应用层优先级最高；</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 不要这样多次加载，因为order配置，引起问题不易排查 --&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 通配方式 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- service层 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">order</span>=<span class="string">"10"</span> <span class="attr">location</span>=<span class="string">"classpath*:conf/*.properties"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- web层 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">order</span>=<span class="string">"0"</span> <span class="attr">location</span>=<span class="string">"classpath*:conf/*.properties"</span>/&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 按文件制定方式 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- proxy 层 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">order</span>=<span class="string">"100"</span> <span class="attr">location</span>=<span class="string">"classpath:conf/waybill-refund-proxy.properties"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- service层 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">order</span>=<span class="string">"10"</span> <span class="attr">location</span>=<span class="string">"conf/wrefund-service.properties,conf/waybill-refund-proxy.properties"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- web层 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">order</span>=<span class="string">"0"</span> <span class="attr">location</span>=<span class="string">"conf/wrefund-schedule.properties,conf/wrefund-service.properties,conf/waybill-refund-proxy.properties"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p><code>placeholders support for import</code><br>I’ve added such support for <code>system property</code> placeholders for import location</p>
<a href="https://jira.spring.io/browse/SPR-1332" title="placeholders support for import" target="_blank" rel="external">placeholders support for import</a>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-Dtest=<span class="built_in">test</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"com/test/dao/dao-$&#123;test&#125;.xml"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="拷贝注解至Bean"><a href="#拷贝注解至Bean" class="headerlink" title="拷贝注解至Bean"></a>拷贝注解至Bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">org.springframework.jmx.export.annotation.ManagedMetric ann =</div><div class="line">                AnnotationUtils.findAnnotation(method, org.springframework.jmx.export.annotation.ManagedMetric.class);</div><div class="line">        <span class="keyword">if</span> (ann == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        ManagedMetric managedMetric = <span class="keyword">new</span> ManagedMetric();</div><div class="line">        AnnotationBeanUtils.copyPropertiesToBean(ann, managedMetric);</div></pre></td></tr></table></figure>
<h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>org.springframework.util.Assert</p>
<h2 id="xml解析"><a href="#xml解析" class="headerlink" title="xml解析"></a>xml解析</h2><p>org.springframework.util.xml.DomUtils#getChildElementValueByTagName</p>
<h2 id="获取原始类"><a href="#获取原始类" class="headerlink" title="获取原始类"></a>获取原始类</h2><p><code>cglib</code><br><code>代理前类</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Return the user-defined class for the given class: usually simply the given</div><div class="line"> * class, but the original class in case of a CGLIB-generated subclass.</div><div class="line"> */</div><div class="line">org.springframework.util.ClassUtils#getUserClass(java.lang.Class&lt;?&gt;)</div><div class="line"></div><div class="line">/**</div><div class="line"> * Determine the ultimate target class of the given bean instance</div><div class="line"> */</div><div class="line">org.springframework.aop.framework.AopProxyUtils#ultimateTargetClass(Object candidate)</div><div class="line"></div><div class="line">/**</div><div class="line"> * Determine the target class of the given bean instance which might be an AOP proxy.</div><div class="line"> */</div><div class="line">org.springframework.aop.support.AopUtils#getTargetClass(Object candidate)</div></pre></td></tr></table></figure>
<h2 id="合并map"><a href="#合并map" class="headerlink" title="合并map"></a>合并map</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"commonLookup"</span> </span></div><div class="line">    <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.MapFactoryBean"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sourceMap"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"myKey"</span> <span class="attr">value</span>=<span class="string">"142"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"myOtherKey"</span> <span class="attr">value</span>=<span class="string">"7"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myLookup"</span> <span class="attr">parent</span>=<span class="string">"commonLookup"</span> </span></div><div class="line">    <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.MapFactoryBean"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sourceMap"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">map</span> <span class="attr">merge</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"myLookupKey"</span> <span class="attr">value</span>=<span class="string">"12"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="工厂方法创建bean"><a href="#工厂方法创建bean" class="headerlink" title="工厂方法创建bean"></a>工厂方法创建bean</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"configurator"</span> <span class="attr">class</span>=<span class="string">"com.me.myapp.Configurator"</span> <span class="attr">factory-method</span>=<span class="string">"getInstance"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="静态字段创建bean"><a href="#静态字段创建bean" class="headerlink" title="静态字段创建bean"></a>静态字段创建bean</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">util:constant</span> <span class="attr">static-field</span>=<span class="string">"java.lang.Integer.MAX_VALUE"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"intMaxValue"</span></span></div><div class="line">    <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.FieldRetrievingFactoryBean"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetClass"</span> <span class="attr">value</span>=<span class="string">"java.lang.Integer"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetField"</span> <span class="attr">value</span>=<span class="string">"MAX_VALUE"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="ResolvableType"><a href="#ResolvableType" class="headerlink" title="ResolvableType"></a>ResolvableType</h2><p>解析类型</p>
<p>Encapsulates a Java {@link java.lang.reflect.Type}, providing access to<br>{@link #getSuperType() supertypes}, {@link #getInterfaces() interfaces}</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取声明的事件类型-- 解析泛型类型</span></div><div class="line"><span class="function"><span class="keyword">static</span> ResolvableType <span class="title">resolveDeclaredEventType</span><span class="params">(Class&lt;?&gt; listenerType)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// Return this type as a &#123;@link ResolvableType&#125; of the specified class. Searches</span></div><div class="line">    <span class="comment">// &#123;@link #getSuperType() supertype&#125; and &#123;@link #getInterfaces() interface&#125;</span></div><div class="line">    ResolvableType resolvableType = ResolvableType.forClass(listenerType).as(ApplicationListener.class);</div><div class="line">    <span class="keyword">return</span> (resolvableType.hasGenerics() ? resolvableType.getGeneric() : <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Determine whether this &#123;@code ResolvableType&#125; is assignable from the specified other type.</span></div><div class="line"><span class="keyword">this</span>.declaredEventType == <span class="keyword">null</span> || <span class="keyword">this</span>.declaredEventType.isAssignableFrom(eventType)</div></pre></td></tr></table></figure>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 基于nnotationAwareOrderComparator排序</span></div><div class="line"><span class="comment">// supports Spring's &#123;@link org.springframework.core.Ordered&#125; interface </span></div><div class="line"><span class="comment">// as well as the &#123;@link Order @Order&#125; and &#123;@link javax.annotation.Priority @Priority&#125;</span></div><div class="line">AnnotationAwareOrderComparator.sort(allListeners);</div></pre></td></tr></table></figure>
<h2 id="Object类型转换"><a href="#Object类型转换" class="headerlink" title="Object类型转换"></a>Object类型转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Object 转 Array</span></div><div class="line"><span class="keyword">if</span> (result.getClass().isArray()) &#123;</div><div class="line">    Object[] events = ObjectUtils.toObjectArray(result);</div><div class="line">    <span class="keyword">for</span> (Object event : events) &#123;</div><div class="line">        publishEvent(event);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Object 转 Collection</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (result <span class="keyword">instanceof</span> Collection&lt;?&gt;) &#123;</div><div class="line">    Collection&lt;?&gt; events = (Collection&lt;?&gt;) result;</div><div class="line">    <span class="keyword">for</span> (Object event : events) &#123;</div><div class="line">        publishEvent(event);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    publishEvent(result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="AnnotatedTypeMetadata"><a href="#AnnotatedTypeMetadata" class="headerlink" title="AnnotatedTypeMetadata"></a>AnnotatedTypeMetadata</h2><p>获取注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MultiValueMap&lt;String, Object&gt; attributes = metadata</div><div class="line">                .getAllAnnotationAttributes(annotationType.getName(), <span class="keyword">true</span>);</div><div class="line"><span class="keyword">if</span> (attributes == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="MultiValueMap"><a href="#MultiValueMap" class="headerlink" title="MultiValueMap"></a>MultiValueMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MultiValueMap&lt;String, Object&gt; allAttributes = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</div></pre></td></tr></table></figure>
<h1 id="Spring-常识"><a href="#Spring-常识" class="headerlink" title="Spring 常识"></a>Spring 常识</h1><h2 id="获取全部bean"><a href="#获取全部bean" class="headerlink" title="获取全部bean"></a>获取全部bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取bean数量</span></div><div class="line">Set&lt;String&gt; beanNames = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;(<span class="keyword">this</span>.beanFactory.getBeanDefinitionCount());</div></pre></td></tr></table></figure>
<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="解决Long转json精度丢失的问题"><a href="#解决Long转json精度丢失的问题" class="headerlink" title="解决Long转json精度丢失的问题"></a>解决Long转json精度丢失的问题</h2><p>Java Config配置方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.configureMessageConverters(converters);</div><div class="line">    <span class="comment">//1、定义一个convert转换消息的对象</span></div><div class="line">    FastJsonHttpMessageConverter fastConverter = <span class="keyword">new</span> FastJsonHttpMessageConverter();</div><div class="line">    <span class="comment">//2、添加fastjson的配置信息</span></div><div class="line">    FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</div><div class="line"></div><div class="line">    fastJsonConfig.setCharset(Charset.forName(<span class="string">"UTF-8"</span>));</div><div class="line">    <span class="comment">/*</span></div><div class="line">    WriteNullListAsEmpty  ：List字段如果为null,输出为[],而非null</div><div class="line">    WriteNullStringAsEmpty ： 字符类型字段如果为null,输出为"",而非null</div><div class="line">    DisableCircularReferenceDetect ：消除对同一对象循环引用的问题，默认为false（如果不配置有可能会进入死循环）</div><div class="line">    WriteNullBooleanAsFalse：Boolean字段如果为null,输出为false,而非null</div><div class="line">    WriteMapNullValue：是否输出值为null的字段,默认为false</div><div class="line">     */</div><div class="line">    fastJsonConfig.setSerializerFeatures(</div><div class="line">            SerializerFeature.WriteNullListAsEmpty,</div><div class="line">            SerializerFeature.WriteNullStringAsEmpty,</div><div class="line">            SerializerFeature.DisableCircularReferenceDetect,</div><div class="line">            SerializerFeature.WriteNullBooleanAsFalse,</div><div class="line">            SerializerFeature.WriteMapNullValue,</div><div class="line">            SerializerFeature.WriteDateUseDateFormat</div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="comment">//解决Long转json精度丢失的问题</span></div><div class="line">    SerializeConfig serializeConfig = SerializeConfig.globalInstance;</div><div class="line">    serializeConfig.put(BigInteger.class, ToStringSerializer.instance);</div><div class="line">    serializeConfig.put(Long.class, ToStringSerializer.instance);</div><div class="line">    serializeConfig.put(Long.TYPE, ToStringSerializer.instance);</div><div class="line">    fastJsonConfig.setSerializeConfig(serializeConfig);</div><div class="line">    <span class="comment">//3.在convert中添加配置信息</span></div><div class="line">    fastConverter.setFastJsonConfig(fastJsonConfig);</div><div class="line"></div><div class="line">    <span class="comment">//4.处理中文乱码问题</span></div><div class="line">    List&lt;MediaType&gt; fastMediaTypes = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    fastMediaTypes.add(MediaType.TEXT_HTML);</div><div class="line">    fastMediaTypes.add(MediaType.APPLICATION_JSON_UTF8);</div><div class="line"></div><div class="line">    <span class="comment">//5.在convert中添加配置信息.</span></div><div class="line">    fastConverter.setSupportedMediaTypes(fastMediaTypes);</div><div class="line">    converters.add(fastConverter);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Xml配置方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * fastjson序列化配置</div><div class="line"> * <span class="doctag">@author</span> wangdianzhuang</div><div class="line"> * <span class="doctag">@create</span> 2018/8/29 上午 10:32</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span>(<span class="string">"defaultFastjsonConfig"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultFastjsonConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SerializeConfig <span class="title">defaultSerializeConfig</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//解决Long转json精度丢失的问题</span></div><div class="line">        SerializeConfig serializeConfig = SerializeConfig.globalInstance;</div><div class="line">        serializeConfig.put(BigInteger.class, ToStringSerializer.instance);</div><div class="line">        serializeConfig.put(Long.class, ToStringSerializer.instance);</div><div class="line">        serializeConfig.put(Long.TYPE, ToStringSerializer.instance);</div><div class="line">        <span class="keyword">return</span> serializeConfig;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 开启mvc 注释驱动 扫描Controller中的注释--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 开启mvc 注释驱动 扫描Controller中的注释--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- FastJson --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"fastJsonHttpMessageConverter"</span></span></div><div class="line">              <span class="attr">class</span>=<span class="string">"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!-- 这里顺序不能反，一定先写text/html,不然ie下出现下载提示 --&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fastJsonConfig"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.alibaba.fastjson.support.config.FastJsonConfig"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"charset"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"serializeConfig"</span> <span class="attr">ref</span>=<span class="string">"defaultSerializeConfig"</span>/&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"serializerFeatures"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">                            <span class="comment">&lt;!-- 避免循环引用 --&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">util:constant</span> <span class="attr">static-field</span>=<span class="string">"com.alibaba.fastjson.serializer.SerializerFeature.DisableCircularReferenceDetect"</span>/&gt;</span></div><div class="line">                            <span class="comment">&lt;!-- 是否输出值为null的字段 --&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">util:constant</span> <span class="attr">static-field</span>=<span class="string">"com.alibaba.fastjson.serializer.SerializerFeature.WriteMapNullValue"</span>/&gt;</span></div><div class="line">                            <span class="comment">&lt;!-- Boolean字段如果为null,输出为false,而非null --&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">util:constant</span> <span class="attr">static-field</span>=<span class="string">"com.alibaba.fastjson.serializer.SerializerFeature.WriteNullBooleanAsFalse"</span>/&gt;</span></div><div class="line">                            <span class="comment">&lt;!-- List字段如果为null,输出为[],而非null --&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">util:constant</span> <span class="attr">static-field</span>=<span class="string">"com.alibaba.fastjson.serializer.SerializerFeature.WriteNullListAsEmpty"</span>/&gt;</span></div><div class="line">                            <span class="comment">&lt;!-- 数值字段如果为null,输出为0,而非null --&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">util:constant</span> <span class="attr">static-field</span>=<span class="string">"com.alibaba.fastjson.serializer.SerializerFeature.WriteNullNumberAsZero"</span>/&gt;</span></div><div class="line">                            <span class="comment">&lt;!-- 字符类型字段如果为null,输出为"",而非null --&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">util:constant</span> <span class="attr">static-field</span>=<span class="string">"com.alibaba.fastjson.serializer.SerializerFeature.WriteNullStringAsEmpty"</span>/&gt;</span></div><div class="line">                            <span class="comment">&lt;!-- Data格式化输出 --&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">util:constant</span> <span class="attr">static-field</span>=<span class="string">"com.alibaba.fastjson.serializer.SerializerFeature.WriteDateUseDateFormat"</span>/&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>mvc:annotation-driven 对父容器中</p>
</blockquote>
<h2 id="请求空串转为null"><a href="#请求空串转为null" class="headerlink" title="请求空串转为null"></a>请求空串转为null</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">binder.registerCustomEditor(String.class, <span class="keyword">new</span> StringTrimmerEditor(<span class="keyword">true</span>));</div><div class="line">binder.registerCustomEditor(Boolean.class, <span class="keyword">new</span> CustomBooleanEditor(<span class="keyword">true</span>));</div></pre></td></tr></table></figure>
<h2 id="Response-1"><a href="#Response-1" class="headerlink" title="Response"></a>Response</h2><p><code>@ResponseBody</code> The return value is converted through HttpMessageConverter instances and written to the response.<br><code>ResponseEntity&lt;B&gt;</code> ResponseEntity is like @ResponseBody but with status and headers.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/something"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handle</span><span class="params">()</span> </span>&#123;</div><div class="line">    String body = ... ;</div><div class="line">    String etag = ... ;</div><div class="line">    <span class="keyword">return</span> ResponseEntity.ok().eTag(etag).build(body);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>HttpEntity<b> For access to request headers and body. The body is converted with an HttpMessageConverter</b></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PostMapping</span>(<span class="string">"/accounts"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpEntity&lt;Account&gt; entity)</span> </span>&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 存活检查</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/health"</span>, method = RequestMethod.GET)</div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">health</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(<span class="string">"alive"</span>,HttpStatus.OK);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="获取request"><a href="#获取request" class="headerlink" title="获取request"></a>获取request</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- spring --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.request.RequestContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// spring boot</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LestoreWebOutsideInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> application.sources(LestoreWebOutsideApplication.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStartup(servletContext);</div><div class="line">        servletContext.addListener(<span class="keyword">new</span> RequestContextListener());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HttpServletRequest req = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();</div><div class="line">HttpServletResponse resp = ((ServletWebRequest)RequestContextHolder.getRequestAttributes()).getResponse();</div></pre></td></tr></table></figure>
<h2 id="SpringMVC-Annotation"><a href="#SpringMVC-Annotation" class="headerlink" title="SpringMVC Annotation"></a>SpringMVC Annotation</h2><ul>
<li>@RequestParam：Annotation which indicates that a method parameter should be bound to a web request parameter</li>
<li>@SessionAttributes：Annotation that indicates the session attributes that a specific handler uses</li>
</ul>
<h2 id="SpringMVC-Solutions"><a href="#SpringMVC-Solutions" class="headerlink" title="SpringMVC Solutions"></a>SpringMVC Solutions</h2><h3 id="Error-creating-bean-with-name-‘org-springframework-validation-beanvalidation-LocalValidatorFactoryBean-0’"><a href="#Error-creating-bean-with-name-‘org-springframework-validation-beanvalidation-LocalValidatorFactoryBean-0’" class="headerlink" title="Error creating bean with name ‘org.springframework.validation.beanvalidation.LocalValidatorFactoryBean#0’"></a>Error creating bean with name ‘org.springframework.validation.beanvalidation.LocalValidatorFactoryBean#0’</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Caused by: javax.validation.ValidationException: Unable to create a Configuration, because no Bean Validation provider could be found. <span class="function">Add a provider like Hibernate <span class="title">Validator</span> <span class="params">(RI)</span> to your classpath.</span></div><div class="line">    at javax.validation.Validation$GenericBootstrapImpl.<span class="title">configure</span><span class="params">(Validation.java:<span class="number">271</span>)</span></div><div class="line">    at org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.<span class="title">afterPropertiesSet</span><span class="params">(LocalValidatorFactoryBean.java:<span class="number">191</span>)</span></div><div class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.<span class="title">invokeInitMethods</span><span class="params">(AbstractAutowireCapableBeanFactory.java:<span class="number">1573</span>)</span></div><div class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.<span class="title">initializeBean</span><span class="params">(AbstractAutowireCapableBeanFactory.java:<span class="number">1511</span>)</span></div></pre></td></tr></table></figure>
<p>原因：依赖中引入javax.validation:validation-api:jar:1.1.0.Final，spring自动初始化LocalValidatorFactoryBean<br>解决：添加依赖org.hibernate:hibernate-validator:jar:4.3.2.Final</p>
<h1 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h1><h2 id="Aware"><a href="#Aware" class="headerlink" title="Aware"></a>Aware</h2><p>BeanNameAware</p>
<blockquote>
<p>Interface to be implemented by beans that want to be aware of their bean name in a bean factory</p>
</blockquote>
<h2 id="父子容器"><a href="#父子容器" class="headerlink" title="父子容器"></a>父子容器</h2><p>父容器仅仅是 bean（对象） 对子容器可见，加载的全局变量仍然相互独</p>
<h3 id="重复AOP"><a href="#重复AOP" class="headerlink" title="重复AOP"></a>重复AOP</h3><blockquote>
<p>DespatcherServlet 加载spring-empty.xml 或者 spring-mvc.xml，aop在父容器中配置，不会有这个问题</p>
</blockquote>
<p>InfrastructureAdvisorAutoProxyCreator 与 AspectJAwareAdvisorAutoProxyCreator</p>
<p>tx命名空间会注册InfrastructureAdvisorAutoProxyCreator<br>aop</p>
<h2 id="BeanFactory和ApplicationContext"><a href="#BeanFactory和ApplicationContext" class="headerlink" title="BeanFactory和ApplicationContext"></a>BeanFactory和ApplicationContext</h2><p>Spring通过配置文件描述Bean之前的依赖关系，利用java<code>反射</code>实例化Bean并建立Bean之间的依赖关系。</p>
<h2 id="WebApplicationContext"><a href="#WebApplicationContext" class="headerlink" title="WebApplicationContext"></a>WebApplicationContext</h2><p>WebApplicationContext必须在拥有web容器的前提下才能完成启动的工作。<br>xml中配置自启动Servlet或ServletContextListenter完成启动Spring Web应用上下文。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// configLocations 中可包含系统变量</span></div><div class="line">ClassPathXmlApplicationContext pFactory = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">"com/smart/attr/beans1.xml"</span>&#125;);</div><div class="line"><span class="comment">// 子容器</span></div><div class="line">ApplicationContext factory = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line"><span class="keyword">new</span> String[]&#123;<span class="string">"com/smart/attr/beans2.xml"</span>&#125;,pFactory);</div></pre></td></tr></table></figure>
<p><code>ContextLoaderListener</code>通过Web容器上下文参数<code>contextConfigLocation</code>获取Spring配置文件位置。<br>可指定多个配置文件，用逗号、空格或分号分隔。</p>
<p>DispatcherServlet是一个Servlet,<code>可同时配置多个</code>，<br>每个 DispatcherServlet有一个自己的 WebApplicationContext上下文，这个上下文继承了 <code>根上下文</code> 中所有东西。</p>
<p>使用工具类取出上下文：<br>WebApplicationContextUtils.getWebApplicationContext(ServletContext);<br>RequestContextUtils.getWebApplicationContext(request);</p>
<p>可不使用listener监听器来加载spring的配置，改用DispatcherServlet来加载spring的配置，不要双亲上下文，只使用一个DispatcherServlet</p>
<h2 id="Bean命名"><a href="#Bean命名" class="headerlink" title="Bean命名"></a>Bean命名</h2><p>id命名规范：字母开头，后面字母、数字、连字符、下划线、句号、冒号；<br>name命名没有字符限制；<br>id是<code>标识符</code>，name是<code>别名</code>；</p>
<p>id 和 name都可以指定多个，以逗号、分号或空格分隔；<br>id 必须唯一；同名name，后面Bean<code>覆盖</code>前面同名的Bean；<br>为了避免无意间Bean覆盖的隐患，<code>尽量使用id而非name命名Bean</code>。</p>
<p>如果id和name都未指定，Spring自动将<code>完全限定名</code>作为Bean的名称。<br>完全限定名相同的多个未命名bean加#i后缀</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- com.smart.ditype.Car --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.smart.ditype.Car"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- com.smart.ditype.Car#1 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.smart.ditype.Car"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 两种别名方式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.smart.ditype.Bar"</span> <span class="attr">id</span>=<span class="string">"bar"</span> <span class="attr">name</span>=<span class="string">"barA,barB"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"bar"</span> <span class="attr">alias</span>=<span class="string">"barC"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h2><p><code>FactoryBean</code></p>
<ul>
<li>使用FactoryBean：从BeanFactory中获取的实际上是FactoryBean的getObject()返回的对象，而不是FactoryBean本身</li>
<li>调用工厂方法</li>
<li>访问静态字段</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"employee"</span> <span class="attr">class</span>=<span class="string">"com.javainterviewpoint.springfactory.EmployeeFactory"</span> </span></div><div class="line">   <span class="attr">factory-method</span>=<span class="string">"createEmployee"</span>&gt; </div><div class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"> </div><div class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"manager"</span> <span class="attr">class</span>=<span class="string">"com.javainterviewpoint.springfactory.Employee"</span></span></div><div class="line">    <span class="attr">factory-bean</span> =<span class="string">"employee"</span> <span class="attr">factory-method</span>=<span class="string">"getManager"</span>/&gt;</div><div class="line"> </div><div class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"seniormanager"</span> </span></div><div class="line">    <span class="attr">factory-bean</span> =<span class="string">"employee"</span> <span class="attr">factory-method</span>=<span class="string">"getSeniorManager"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exposeBeanNameAdvisors"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.interceptor.ExposeBeanNameAdvisors"</span> <span class="attr">factory-method</span>=<span class="string">"createAdvisorIntroducingNamedBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"fooService"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">util:constant</span> <span class="attr">static-field</span>=<span class="string">"java.lang.Integer.MAX_VALUE"</span> /&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"intMaxValue"</span></span></div><div class="line">    <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.FieldRetrievingFactoryBean"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetClass"</span> <span class="attr">value</span>=<span class="string">"java.lang.Integer"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetField"</span> <span class="attr">value</span>=<span class="string">"MAX_VALUE"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="动态注册Bean"><a href="#动态注册Bean" class="headerlink" title="动态注册Bean"></a>动态注册Bean</h2><p><code>org.mybatis.spring.mapper.MapperScannerConfigurer</code></p>
<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>一般java属性名以小写字母开头，<br>JavaBean允许大写字母开头的属性变量名，不过必须满足<code>变量的前两个字母要么全部大写，要么全部小写</code></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>context:annotation-config</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 作用是向 Spring 容器注册 AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、</span></div><div class="line">PersistenceAnnotationBeanPostProcessor 以及 RequiredAnnotationBeanPostProcessor 这 4 个BeanPostProcessor</div><div class="line">注册这4个BeanPostProcessor的作用是使系统能够识别相应的注解--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 包扫描配置也包含了自动注入上述processor的功能，因此当使用 &lt;context:component-scan/&gt; 后，可以将 &lt;context:annotation-config/&gt; 移除。 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"XX.XX"</span>/&gt;</span> </div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"x.y.z.service, x.y.z.controller"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h3><p><code>自动注入</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">default-lazy-init</span>=<span class="string">"false"</span> <span class="attr">default-autowire</span>=<span class="string">"byName"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>default-autowire：根据属性名自动装配<br>根据名字查找与属性完全一致的bean，并将其与属性自动装配</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.ibatis.session.Configuration"</span> <span class="attr">autowire</span>=<span class="string">"no"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Bean维度取消自动注入"><a href="#Bean维度取消自动注入" class="headerlink" title="Bean维度取消自动注入"></a>Bean维度取消自动注入</h3><p><code>取消自动注入</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"autowireTest1"</span> <span class="attr">autowire</span>=<span class="string">"no"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="xml注入map"><a href="#xml注入map" class="headerlink" title="xml注入map"></a>xml注入map</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">"waybillTaskDaoMap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"waybill_sync_task"</span> <span class="attr">value-ref</span>=<span class="string">"waybillSyncTaskDao"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"waybill_sync0_task"</span> <span class="attr">value-ref</span>=<span class="string">"waybillSync0TaskDao"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">"waybillSyncTaskTypes"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"doWaybillSync0TaskRedis"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"doWaybillSync1TaskRedis"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"callbackServiceList"</span> <span class="attr">list-class</span>=<span class="string">"java.util.ArrayList"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"lspDeliveryCallback"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"lspRefuseCallback"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"lspPsyShCallback"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"waybillStateToPd"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"waybillTradeToYiXun"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"waybillTradeToCarService"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><p>按类型匹配入参</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--构造函数注入：type --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car1"</span> <span class="attr">class</span>=<span class="string">"com.smart.ditype.Car"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>红旗CA72<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"double"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>20000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>按索引匹配入参</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 构造函数注入：index  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">class</span>=<span class="string">"com.smart.ditype.Car"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"红旗CA72"</span> /&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"中国一汽"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"20000"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>联合使用类型和索引</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--构造函数注入：type&amp;index --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car3"</span> <span class="attr">class</span>=<span class="string">"com.smart.ditype.Car"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>红旗CA72<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>中国一汽<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">type</span>=<span class="string">"int"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>没设置type和index</code>,通过入参值的类型匹配映射</p>
<p>循环依赖问题，将<code>构造函数注入</code>调整为<code>属性注入方式</code>即可</p>
<h3 id="注入参数"><a href="#注入参数" class="headerlink" title="注入参数"></a>注入参数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"boss1"</span> <span class="attr">class</span>=<span class="string">"com.smart.ditype.Boss"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">local</span>=<span class="string">"car"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">parent</span>=<span class="string">"office"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p><ref> 3种方式引用Bean：<br>bean同一容器或父容器的Bean；<br>local同一配置文件中的Bean；<br>parent引用父容器中的Bean；</ref></p>
<h3 id="集合类型属性"><a href="#集合类型属性" class="headerlink" title="集合类型属性"></a>集合类型属性</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"boss1"</span> <span class="attr">class</span>=<span class="string">"com.smart.attr.Boss"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"favorites"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- list&gt;</span></div><div class="line">            &lt;value&gt;看报&lt;/value&gt;</div><div class="line">            &lt;/list --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>看报<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"stage1"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobs"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>AM<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>会见客户<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>PM<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>公司内部会议<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mails"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Properties属性配置 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"jobMail"</span>&gt;</span>john-office@baobaotao.com<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"lifeMail"</span>&gt;</span>john-life@baobaotao.com<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobTime"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>会见客户<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>124<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="通过util命名空间配置集合类型Bean"><a href="#通过util命名空间配置集合类型Bean" class="headerlink" title="通过util命名空间配置集合类型Bean"></a>通过util命名空间配置集合类型Bean</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"favoriteList1"</span> <span class="attr">list-class</span>=<span class="string">"java.util.LinkedList"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>看报<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>赛车<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>高尔夫<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">util:set</span> <span class="attr">id</span>=<span class="string">"favoriteSet1"</span>  &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>看报<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>赛车<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>高尔夫<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">util:set</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">"emails1"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"AM"</span> <span class="attr">value</span>=<span class="string">"会见客户"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"PM"</span> <span class="attr">value</span>=<span class="string">"公司内部会议"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emails"</span></span></div><div class="line">    <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.MapFactoryBean"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sourceMap"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"AM"</span> <span class="attr">value</span>=<span class="string">"会见客户"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"PM"</span> <span class="attr">value</span>=<span class="string">"公司内部会议"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emailProps"</span></span></div><div class="line">    <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertiesFactoryBean"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span></span></div><div class="line">        <span class="attr">value</span>=<span class="string">"classpath:com/smart/fb/mails.properties"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"emailProps1"</span> <span class="attr">location</span>=<span class="string">"classpath:com/smart/fb/mails.properties"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>获取类的静态变量:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">class</span>=<span class="string">"com.smart.fb.Car"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brand"</span> <span class="attr">ref</span>=<span class="string">"hongQi"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 获取类的静态变量 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hongQi"</span></span></div><div class="line">    <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.FieldRetrievingFactoryBean"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"staticField"</span></span></div><div class="line">        <span class="attr">value</span>=<span class="string">"com.smart.fb.CarBrandType.HONG_QI"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car3"</span> <span class="attr">class</span>=<span class="string">"com.smart.fb.Car"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brand"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 用常量的全限定名作为FieldRetrievingFactoryBean的id，其效果和通过配置staticField属性是一样的 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"com.smart.fb.CarBrandType.HONG_QI"</span></span></div><div class="line">            <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.FieldRetrievingFactoryBean"</span>&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car4"</span> <span class="attr">class</span>=<span class="string">"com.smart.fb.Car"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brand"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 使用常量配置 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">util:constant</span></span></div><div class="line">            <span class="attr">static-field</span>=<span class="string">"com.smart.fb.CarBrandType.HONG_QI"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>属性路径引用：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 属性引用FactoryBean:属性路径引用 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"boss"</span> <span class="attr">class</span>=<span class="string">"com.smart.fb.Boss"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"John"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.smart.fb.Car"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brand"</span> <span class="attr">value</span>=<span class="string">"红旗CA72"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car5"</span> <span class="attr">class</span>=<span class="string">"com.smart.fb.Car"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brand"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"boss.car.brand"</span></span></div><div class="line">            <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPathFactoryBean"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car6"</span> <span class="attr">class</span>=<span class="string">"com.smart.fb.Car"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brand"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">util:property-path</span> <span class="attr">path</span>=<span class="string">"boss.car.brand"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><code>相同配置</code><br><code>通用配置</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"abstractTaskConfig1"</span> <span class="attr">abstract</span>=<span class="string">"true"</span> <span class="attr">class</span>=<span class="string">"com.jd.ql.waybill.schedule.config.TaskConfig"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"refIdEx"</span> <span class="attr">value</span>=<span class="string">"$.waybillCode"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"taskTypeNum"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"entityType"</span> <span class="attr">value</span>=<span class="string">"com.jd.ql.waybill.schedule.sample.Waybill"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"workerLogic"</span> <span class="attr">ref</span>=<span class="string">"waybillWorkerLogic"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"taskDesc"</span> <span class="attr">value</span>=<span class="string">"Tb异步任务示例"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"tbTaskConfig1"</span> <span class="attr">parent</span>=<span class="string">"abstractTaskConfig1"</span> <span class="attr">class</span>=<span class="string">"com.jd.ql.waybill.schedule.config.TbTaskConfig"</span> <span class="attr">depends-on</span>=<span class="string">"commonDbTaskDao"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"taskTypeKey"</span> <span class="attr">value</span>=<span class="string">"doSampleTask"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queueCount"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxExecuteCount"</span> <span class="attr">value</span>=<span class="string">"4"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"intervalMin"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbTaskDao"</span> <span class="attr">ref</span>=<span class="string">"commonDbTaskDao"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"taskType"</span> <span class="attr">value</span>=<span class="string">"com.jd.ql.waybill.schedule.domain.CommonDbTask"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmqTaskConfig1"</span> <span class="attr">parent</span>=<span class="string">"abstractTaskConfig1"</span> <span class="attr">class</span>=<span class="string">"com.jd.ql.waybill.schedule.config.JmqTaskConfig"</span> <span class="attr">depends-on</span>=<span class="string">"waybillDevTestProducer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"topicName"</span> <span class="attr">value</span>=<span class="string">"test_waybill_schedule"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageProducer"</span> <span class="attr">ref</span>=<span class="string">"waybillDevTestProducer"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"taskType"</span> <span class="attr">value</span>=<span class="string">"com.jd.ql.waybill.schedule.domain.CommonTask"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="运行时注入-属性占位符"><a href="#运行时注入-属性占位符" class="headerlink" title="运行时注入-属性占位符"></a>运行时注入-属性占位符</h3><p>TODO</p>
<h3 id="运行时注入-Spring表达式语言-SpEL"><a href="#运行时注入-Spring表达式语言-SpEL" class="headerlink" title="运行时注入-Spring表达式语言(SpEL)"></a>运行时注入-Spring表达式语言(SpEL)</h3><p>TODO</p>
<h2 id="Bean作用域"><a href="#Bean作用域" class="headerlink" title="Bean作用域"></a>Bean作用域</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.xxc.scope.domain.Person"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>singleton: 单例</li>
<li><p>prototype: 每次getBean() 返回新实例</p>
</li>
<li><p>request: 仅web应用中</p>
</li>
<li>session: 仅web应用中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// proxyMode 解决request域或Session域bean注入单例bean中遇到的问题</span></div><div class="line"><span class="comment">// 1. StoreService是单例的，StoreService在spring上下文加载时创建；此时注入shoppingCart，但shoppingCart还不存在；</span></div><div class="line"><span class="comment">// 2. StoreService中注入的shoppingCart不应该是固定的，而是每个用户一个；</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreService</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShoppingCart</span><span class="params">(ShoppingCart shoppingCart)</span></span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 配置proxyMode，spring 不会讲实际的ShoppingCart注入到StoreService中，而是注入一个ShoppingCart的代理</span></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="meta">@Scope</span>(scopeName=<span class="string">"session"</span>, proxyMode=ScopedProxyMode.TARGET_CLASS)</div><div class="line"><span class="function">ShoppingCart <span class="title">shoppingCart</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ShoppingCart();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shoppingCart"</span> <span class="attr">class</span>=<span class="string">"com.foo.ShoppingCart"</span> <span class="attr">scope</span>=<span class="string">"session"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:scoped-proxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="校验Bean成员变量是否设置"><a href="#校验Bean成员变量是否设置" class="headerlink" title="校验Bean成员变量是否设置"></a>校验Bean成员变量是否设置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"CustomerBean"</span> <span class="attr">class</span>=<span class="string">"com.mkyong.common.Customer"</span> </span></div><div class="line">     <span class="attr">dependency-check</span>=<span class="string">"simple"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"person"</span> <span class="attr">ref</span>=<span class="string">"PersonBean"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"action"</span> <span class="attr">value</span>=<span class="string">"buy"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"CustomerBean"</span> <span class="attr">class</span>=<span class="string">"com.mkyong.common.Customer"</span> </span></div><div class="line">     <span class="attr">dependency-check</span>=<span class="string">"objects"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"action"</span> <span class="attr">value</span>=<span class="string">"buy"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"CustomerBean"</span> <span class="attr">class</span>=<span class="string">"com.mkyong.common.Customer"</span> </span></div><div class="line">     <span class="attr">dependency-check</span>=<span class="string">"all"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"action"</span> <span class="attr">value</span>=<span class="string">"buy"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="meta元素"><a href="#meta元素" class="headerlink" title="meta元素"></a>meta元素</h2><p>Bean可配置额外的meta声明;可通过BeanDefinition的getAttribute(key)获取</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"footmark.HelloWorld"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">key</span>=<span class="string">"format"</span> <span class="attr">value</span>=<span class="string">"DVD"</span>/&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">key</span>=<span class="string">"genre"</span> <span class="attr">value</span>=<span class="string">"Action"</span>/&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="lookup-method"><a href="#lookup-method" class="headerlink" title="lookup-method"></a>lookup-method</h2><ul>
<li>spring动态改变bean方法返回的对象</li>
<li>Bean类型可为抽象类（Spring使用cglib实现）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bar"</span> <span class="attr">class</span>=<span class="string">"com.sunday.common.domain.Bar"</span> <span class="attr">p:name</span>=<span class="string">"lookup-methond-demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">class</span>=<span class="string">"com.sunday.spring3_learn.api.impl.BarServiceImpl"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">lookup-method</span> <span class="attr">name</span>=<span class="string">"queryBar"</span> <span class="attr">bean</span>=<span class="string">"bar"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="replaced-method"><a href="#replaced-method" class="headerlink" title="replaced-method"></a>replaced-method</h2><p>动态更改原方法的逻辑</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myValueCalculator"</span> <span class="attr">class</span>=<span class="string">"x.y.z.MyValueCalculator"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- arbitrary method replacement --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">replaced-method</span> <span class="attr">name</span>=<span class="string">"computeValue"</span> <span class="attr">replacer</span>=<span class="string">"replacementComputeValue"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">arg-type</span>&gt;</span>String<span class="tag">&lt;/<span class="name">arg-type</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">replaced-method</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="注入静态字段"><a href="#注入静态字段" class="headerlink" title="注入静态字段"></a>注入静态字段</h2><p><code>static</code><br><code>静态</code></p>
<p>Spring Bean赋值给静态字段 </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.MethodInvokingFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"staticMethod"</span> <span class="attr">value</span>=<span class="string">"foo.bar.Class.setTheProperty"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arguments"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"theProperty"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><p><code>beanFactory java config</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span>(name = <span class="string">"tool"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ToolFactory <span class="title">toolFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">    ToolFactory factory = <span class="keyword">new</span> ToolFactory();</div><div class="line">    factory.setFactoryId(<span class="number">7070</span>);</div><div class="line">    factory.setToolId(<span class="number">2</span>);</div><div class="line">    <span class="keyword">return</span> factory;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="DataSource"><a href="#DataSource" class="headerlink" title="DataSource"></a>DataSource</h2><p><code>dbcp</code><br><code>datasource</code><br><code>javaconfig</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span>(destroyMethod = <span class="string">"close"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">    BasicDataSource dataSource = <span class="keyword">new</span> BasicDataSource();</div><div class="line">    dataSource.setDriverClassName(driverClassName);</div><div class="line">    dataSource.setUrl(databaseUrl);</div><div class="line">    dataSource.setUsername(databaseUserName);</div><div class="line">    dataSource.setPassword(databasePassword);</div><div class="line">    dataSource.setValidationQuery(databaseValidationQuery);</div><div class="line">    dataSource.setTestOnBorrow(<span class="keyword">true</span>);</div><div class="line">    dataSource.setTestOnReturn(<span class="keyword">true</span>);</div><div class="line">    dataSource.setTestWhileIdle(<span class="keyword">true</span>);</div><div class="line">    dataSource.setTimeBetweenEvictionRunsMillis(<span class="number">1800000</span>);</div><div class="line">    dataSource.setNumTestsPerEvictionRun(<span class="number">3</span>);</div><div class="line">    dataSource.setMinEvictableIdleTimeMillis(<span class="number">1800000</span>);</div><div class="line">    <span class="keyword">return</span> dataSource;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h2><p>按名称进行装配，名称可以通过name属性指定，<br>没有指定name属性，当注解写在字段上时，默认取字段名</p>
<p>@Resource默认是按照名称来装配注入的，当找不到与名称匹配的bean，按照类型来装配注入</p>
<h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>默认是按照类型进行装配注入<br>默认要求依赖对象必须存在，可以设置required</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h2><p><code>包含多个相同类型Bean场景</code></p>
<p>使用<code>@Autowire</code>d注入时会首先使用被标记为<code>@Primary</code>的Bean</p>
<h2 id="Qualifier"><a href="#Qualifier" class="headerlink" title="Qualifier"></a>Qualifier</h2><p>@Qualifier is used to reference a bean by its name or id. </p>
<p>@Primary is also good if e.g. 95% of @Autowired wants a particular bean. That way,<br>only the @Autowired that wants the other bean(s) need to specify @Qualifier.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="meta">@Qualifier</span>(<span class="string">"main"</span>)</div><div class="line"><span class="keyword">private</span> MovieCatalog movieCatalog;</div></pre></td></tr></table></figure>
<h2 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h2><p><code>条件化配置</code></p>
<p><code>Spring 3.1</code>引入，基于运行时激活的Profile，会使用或者忽略不同的Bean或配置类</p>
<p>两个配置项确定Profile<br>spring.profiles.default<br>spring.profiles.active</p>
<p>没有配置spring.profiles.active时，Spring会查找spring.profiles.default的值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@Profile</span>(<span class="string">"production"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductionConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Profile</span>(<span class="string">"dev"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevDatasourceConfig</span></span>;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Profile</span>(<span class="string">"!dev"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevDatasourceConfig</span></span>;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Profile</span>(<span class="string">"dev"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevDatasourceConfig</span> <span class="keyword">implements</span> <span class="title">DatasourceConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Setting up datasource for DEV environment. "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">profile</span>=<span class="string">"dev"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"devDatasourceConfig"</span></span></div><div class="line">      <span class="attr">class</span>=<span class="string">"org.baeldung.profiles.DevDatasourceConfig"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Set-Profiles"><a href="#Set-Profiles" class="headerlink" title="Set Profiles"></a>Set Profiles</h3><p>Context Parameter in web.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/app-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>spring.profiles.active<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<p>WebApplicationInitializer interface</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebApplicationInitializer</span> </span></div><div class="line">  <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> &#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">  </div><div class="line">        servletContext.setInitParameter(</div><div class="line">          <span class="string">"spring.profiles.active"</span>, <span class="string">"dev"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ConfigurableEnvironment</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> ConfigurableEnvironment env;</div><div class="line">env.setActiveProfiles(<span class="string">"someProfile"</span>);</div></pre></td></tr></table></figure>
<p>JVM System Parameter</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export spring_profiles_active=dev</div></pre></td></tr></table></figure>
<p>Maven Profile</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Spring 支持application.properties或application.yml 中配置profile</div><div class="line"># application.properties</div><div class="line">spring.profiles.active=@spring.profiles.active@</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">spring.profiles.active</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">spring.profiles.active</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">spring.profiles.active</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">spring.profiles.active</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></div></pre></td></tr></table></figure>
<p>we need to enable resource filtering in pom.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
<p>@ActiveProfile in Tests</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ActiveProfiles</span>(<span class="string">"dev"</span>)</div></pre></td></tr></table></figure>
<h3 id="Get-Active-Profiles"><a href="#Get-Active-Profiles" class="headerlink" title="Get Active Profiles"></a>Get Active Profiles</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfileManager</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    Environment environment;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getActiveProfiles</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> String profileName : environment.getActiveProfiles()) &#123;</div><div class="line">            System.out.println(<span class="string">"Currently active profile - "</span> + profileName);</div><div class="line">        &#125;   </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="条件化配置"><a href="#条件化配置" class="headerlink" title="条件化配置"></a>条件化配置</h2><p><code>Spring 4.0</code><br>配置存在于应用中，在满足特定条件之前都忽略这个配置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context,</span></span></div><div class="line">            AnnotatedTypeMetadata metadata) &#123;</div><div class="line">        <span class="keyword">if</span> (classLoader == <span class="keyword">null</span>) &#123;</div><div class="line">            classLoader = ClassUtils.getDefaultClassLoader();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            forName(<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>, classLoader);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String className, ClassLoader classLoader)</div><div class="line">                <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">        <span class="keyword">if</span> (classLoader != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> classLoader.loadClass(className);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Class.forName(className);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 只有当JdbcTemplateCondition类条件成立时，才会创建MyService</span></div><div class="line"><span class="meta">@Conditional</span>(JdbcTemplateCondition.class)</div><div class="line"><span class="keyword">public</span> MyService myService&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="获取bean"><a href="#获取bean" class="headerlink" title="获取bean"></a>获取bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, CustomConverter&gt; contextConverters = applicationContext.getBeansOfType(CustomConverter.class);</div></pre></td></tr></table></figure>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p><code>alias</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"b1"</span> <span class="attr">class</span>=<span class="string">"com.wengyingjian.springframework.test.aliassamesname.Bean1"</span> <span class="attr">name</span>=<span class="string">"bean1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"b2"</span> <span class="attr">class</span>=<span class="string">"com.wengyingjian.springframework.test.aliassamesname.Bean2"</span> <span class="attr">name</span>=<span class="string">"bean2"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"bean1"</span> <span class="attr">alias</span>=<span class="string">"bean2"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><p>spring中有作用域scope的概念。<br>除了singleton、prototype、request、session等spring为我们提供的域，我们还可以自定义scope。</p>
<p>像是自定义一个 ThreadScope实现Scope接口<br>再把它注册到beanFactory中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Scope threadScope = <span class="keyword">new</span> ThreadScope();</div><div class="line">beanFactory.registerScope(<span class="string">"thread"</span>, threadScope);</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"..."</span> <span class="attr">scope</span>=<span class="string">"thread"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h2 id="BeanFactoryPostProcessor"><a href="#BeanFactoryPostProcessor" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Modify the application context's internal bean factory after its standard</div><div class="line">     * initialization. All bean definitions will have been loaded, but no beans</div><div class="line">     * will have been instantiated yet. This allows for overriding or adding</div><div class="line">     * properties even to eager-initializing beans.</div><div class="line">     * <span class="doctag">@param</span> beanFactory the bean factory used by the application context</div><div class="line">     * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Role"><a href="#Role" class="headerlink" title="@Role"></a>@Role</h2><ul>
<li>BeanDefinition#ROLE_APPLICATION：a user-defined bean</li>
<li>BeanDefinition#ROLE_SUPPORT：a supporting part of some larger configuration</li>
<li>BeanDefinition#ROLE_INFRASTRUCTURE：entirely background role and has no relevance to the end-user</li>
</ul>
<h2 id="AutoProxyRegistrar"><a href="#AutoProxyRegistrar" class="headerlink" title="AutoProxyRegistrar"></a>AutoProxyRegistrar</h2><p><code>org.springframework.context.annotation.AutoProxyRegistrar</code></p>
<p>Registers an auto proxy creator against the current {@link BeanDefinitionRegistry}</p>
<h2 id="ImportBeanDefinitionRegistrar"><a href="#ImportBeanDefinitionRegistrar" class="headerlink" title="ImportBeanDefinitionRegistrar"></a>ImportBeanDefinitionRegistrar</h2><p>Interface to be implemented by types that register additional bean definitions when</p>
<ul>
<li>processing @{@link Configuration} classes.</li>
</ul>
<h1 id="AnnotationMetadata"><a href="#AnnotationMetadata" class="headerlink" title="AnnotationMetadata"></a>AnnotationMetadata</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// org.springframework.context.annotation.AutoProxyRegistrar</span></div><div class="line">Set&lt;String&gt; annoTypes = importingClassMetadata.getAnnotationTypes();</div><div class="line"><span class="keyword">for</span> (String annoType : annoTypes) &#123;</div><div class="line">    AnnotationAttributes candidate = MetadataUtils.attributesFor(importingClassMetadata, annoType);</div><div class="line">    Object mode = candidate.get(<span class="string">"mode"</span>);</div><div class="line">    Object proxyTargetClass = candidate.get(<span class="string">"proxyTargetClass"</span>);</div><div class="line">    <span class="keyword">if</span> (mode != <span class="keyword">null</span> &amp;&amp; proxyTargetClass != <span class="keyword">null</span> &amp;&amp; mode.getClass().equals(AdviceMode.class) &amp;&amp;</div><div class="line">            proxyTargetClass.getClass().equals(Boolean.class)) &#123;</div><div class="line">        candidateFound = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (mode == AdviceMode.PROXY) &#123;</div><div class="line">            AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry);</div><div class="line">            <span class="keyword">if</span> ((Boolean) proxyTargetClass) &#123;</div><div class="line">                AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="StandardAnnotationMetadata"><a href="#StandardAnnotationMetadata" class="headerlink" title="StandardAnnotationMetadata"></a>StandardAnnotationMetadata</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> AnnotationMetadata metadata;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Create a new AnnotatedGenericBeanDefinition for the given bean class.</div><div class="line"> * <span class="doctag">@param</span> beanClass the loaded bean class</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotatedGenericBeanDefinition</span><span class="params">(Class&lt;?&gt; beanClass)</span> </span>&#123;</div><div class="line">    setBeanClass(beanClass);</div><div class="line">    <span class="keyword">this</span>.metadata = <span class="keyword">new</span> StandardAnnotationMetadata(beanClass, <span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="org-springframework-context-annotation-MetadataUtils"><a href="#org-springframework-context-annotation-MetadataUtils" class="headerlink" title="org.springframework.context.annotation.MetadataUtils"></a>org.springframework.context.annotation.MetadataUtils</h2><h1 id="Spring-Events"><a href="#Spring-Events" class="headerlink" title="Spring Events"></a>Spring Events</h1><p><code>事件</code></p>
<h2 id="Spring事件"><a href="#Spring事件" class="headerlink" title="Spring事件"></a>Spring事件</h2><p><code>Standard Events</code></p>
<blockquote><footer><strong>StandardEvents context-functionality-events.png</strong></footer></blockquote>
<blockquote><footer><strong>图片来源</strong><cite><a href="https://docs.spring.io/spring/docs/4.3.12.RELEASE/spring-framework-reference/htmlsingle/#context-functionality-events" target="_blank" rel="external">context-functionality-events</a></cite></footer></blockquote>
<ul>
<li>ContextRefreshedEvent </li>
<li>ContextClosedEvent</li>
<li>ContextStartedEvent</li>
<li>ContextStoppedEvent</li>
</ul>
<blockquote>
<p>if you want to get ContextStartedEvent, you should call start() on ApplicationContext.<br>LifecycleProcessor().onRefresh() trigger before ContextRefreshedEvent， both before <code>init</code> beans<br>LifecycleProcessor().onClose() trigger after ContextClosedEvent, both before <code>destroy</code> beans</p>
</blockquote>
<h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>事件处理过程异常，线程会异常终止。</p>
<p>事件接收</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 实现接口 ApplicationListener 或者 注入 ApplicationEventPublisher（springEventPublisher）</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationListener</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span>&gt; <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(E event)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发布事件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获得 publisher</span></div><div class="line"><span class="comment">// 方式1：实现接口 ApplicationEventPublisherAware</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationEventPublisherAware</span> <span class="keyword">extends</span> <span class="title">Aware</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 方式2：注入</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSpringEventPublisher</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ApplicationEventPublisher publisher;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doStuffAndPublishAnEvent</span><span class="params">(<span class="keyword">final</span> String message)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Publishing custom event."</span>);</div><div class="line">        CustomSpringEvent customSpringEvent = <span class="keyword">new</span> CustomSpringEvent(<span class="keyword">this</span>, message);</div><div class="line">        publisher.publishEvent(customSpringEvent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>applicationEventPublisher在afterPropertiesSet之前已初始化完成</p>
</blockquote>
<p>异步处理（默认同步synchronous）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 异步处理 Asynchronous Events</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsynchronousSpringEventsConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"applicationEventMulticaster"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ApplicationEventMulticaster <span class="title">applicationEventMulticaster</span><span class="params">()</span> </span>&#123;</div><div class="line">        SimpleApplicationEventMulticaster eventMulticaster </div><div class="line">          = <span class="keyword">new</span> SimpleApplicationEventMulticaster();</div><div class="line">         </div><div class="line">        eventMulticaster.setTaskExecutor(<span class="keyword">new</span> SimpleAsyncTaskExecutor());</div><div class="line">        <span class="keyword">return</span> eventMulticaster;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>ConcurrentTaskExecutor、ThreadPoolTaskExecutor、SimpleThreadPoolTaskExecutor</p>
</blockquote>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER</span></div><div class="line"><span class="comment">// TaskUtils.LoggingErrorHandler</span></div><div class="line"></div><div class="line"><span class="comment">// TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER</span></div><div class="line"><span class="comment">// TaskUtils.PropagatingErrorHandler</span></div><div class="line"></div><div class="line"><span class="comment">// 异常处理 applicationEventMulticaster配置errorHandler</span></div><div class="line">eventMulticaster.setErrorHandler(TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER);</div></pre></td></tr></table></figure>
<h3 id="事件注解"><a href="#事件注解" class="headerlink" title="事件注解"></a>事件注解</h3><p><code>As of Spring 4.2</code><br>Annotation-based Event Listeners</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EventListener</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processBlackListEvent</span><span class="params">(BlackListEvent event)</span> </span>&#123;</div><div class="line">    <span class="comment">// notify appropriate parties via notificationAddress...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 支持SpEL expression</span></div><div class="line"><span class="comment">// @EventListener(condition = "#blEvent.test == 'foo'")</span></div><div class="line"><span class="meta">@EventListener</span>(condition = <span class="string">"#creationEvent.awesome"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleOrderCreatedEvent</span><span class="params">(CreationEvent&lt;Order&gt; creationEvent)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Spring 4.2开始，ApplicationEventPublisher可以发送任意类型的对象</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// when said object isn’t an ApplicationEvent, we wrap it in a PayloadApplicationEvent for you. </div><div class="line">ApplicationEventPublisher#publishEvent(java.lang.Object)</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 接收普通对象事件</span></div><div class="line"><span class="comment">// 方式1 PayloadApplicationEvent&lt;T&gt;</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerApplicationListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">PayloadApplicationEvent</span>&lt;<span class="title">Integer</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(PayloadApplicationEvent&lt;Integer&gt; event)</span> </span>&#123;</div><div class="line">        Integer payload = event.getPayload();</div><div class="line">        System.out.println(payload);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 方式2 注解</span></div><div class="line"><span class="comment">// 注解方式处理事件，可以有返回值，返回值将再次被发布</span></div><div class="line"><span class="comment">// org.springframework.context.event.ApplicationListenerMethodAdapter#processEvent</span></div><div class="line"><span class="comment">// If we return a non-null value from a method annotated with @EventListener as the result, Spring Framework will send that result as a new event for us.</span></div><div class="line"><span class="meta">@EventListener</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processBlackListEvent</span><span class="params">(Integer event)</span> </span>&#123;</div><div class="line">    System.out.println(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="SmartApplicationListener-amp-GenericApplicationListener"><a href="#SmartApplicationListener-amp-GenericApplicationListener" class="headerlink" title="SmartApplicationListener &amp; GenericApplicationListener"></a>SmartApplicationListener &amp; GenericApplicationListener</h2><p>SmartApplicationListener <code>Spring 3.0+</code><br>GenericApplicationListener <code>Spring 4.2+</code></p>
<p>扩展ApplicationListener，支持按eventType 和 sourceType 定义事件监听<br>其中 PayloadApplicationEvent source为ApplicationContext</p>
<h3 id="Transaction-bound-event"><a href="#Transaction-bound-event" class="headerlink" title="Transaction bound event"></a>Transaction bound event</h3><p>As of Spring <code>4.2</code>, the listener of an event can be bound to a phase of the transaction.</p>
<p><code>TransactionSynchronizationEventAdapter</code></p>
<p>在事务中发布事件，实际事件触发hook到事务的不同阶段【可多次触发】</p>
<ul>
<li>BEFORE_COMMIT</li>
<li>AFTER_COMMIT(default)</li>
<li>AFTER_ROLLBACK</li>
<li>AFTER_COMPLETION (an alias for AFTER_COMMIT and AFTER_ROLLBACK)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 发布事件</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createOrder</span><span class="params">(Order order)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.publisher.publishEvent(<span class="keyword">new</span> OrderCreatedEvent(order)); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 处理事件</span></div><div class="line"><span class="meta">@TransactionalEventListener</span>(phase = TransactionPhase.AFTER_COMMIT, condition = <span class="string">"#creationEvent.awesome"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleOrderCreatedEvent</span><span class="params">(CreationEvent&lt;Order&gt; creationEvent)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a href="https://spring.io/blog/2015/02/11/better-application-events-in-spring-framework-4-2" title="EclipseLink" target="_blank" rel="external">EclipseLink</a>
<a href="https://www.baeldung.com/spring-events" title="Spring Events" target="_blank" rel="external">Spring Events</a>
<h2 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h2><p><code>[&#39;laɪfˌsaɪkl]</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lifecycle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isRunning</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Lifecycle Bean 按Phased分组</span></div><div class="line"><span class="comment">// start时，按升序</span></div><div class="line"><span class="comment">// stop时，按降序</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Phased</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPhase</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Lifecycle Bean 在ApplicationContext finishRefresh时，不会启动；</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SmartLifecycle</span> <span class="keyword">extends</span> <span class="title">Lifecycle</span>, <span class="title">Phased</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAutoStartup</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">(Runnable callback)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>SmartLifecycle bean stop()不会被调用DefaultLifecycleProcessor#doStop</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- SmartLifecycle beans stop 超时时间 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lifecycleProcessor"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.DefaultLifecycleProcessor"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- timeout value in milliseconds --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeoutPerShutdownPhase"</span> <span class="attr">value</span>=<span class="string">"10000"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String[] dependentBeans = <span class="keyword">this</span>.beanFactory.getDependentBeans(beanName);</div></pre></td></tr></table></figure>
<h1 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h1><ul>
<li>close() Close this application context, destroying all beans in its bean factory.</li>
<li>registerShutdownHook() – Register a shutdown hook with the JVM runtime, closing this context on JVM shutdown unless it has already been closed at that time.</li>
</ul>
<blockquote>
<p>Spring web shutdown</p>
</blockquote>
<h1 id="mistakes"><a href="#mistakes" class="headerlink" title="mistakes"></a>mistakes</h1><h2 id="xml中占位符解析失败"><a href="#xml中占位符解析失败" class="headerlink" title="xml中占位符解析失败"></a>xml中占位符解析失败</h2><p>properties已经配置，bean加载解析placeholder失败</p>
<blockquote>
<p>properties 重复加载</p>
</blockquote>
<h1 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h1><h2 id="org-aspectj-apache-bcel-classfile-ClassFormatException-Invalid-byte-tag-in-constant-pool-15"><a href="#org-aspectj-apache-bcel-classfile-ClassFormatException-Invalid-byte-tag-in-constant-pool-15" class="headerlink" title="org.aspectj.apache.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 15"></a>org.aspectj.apache.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 15</h2><p>项目中声明String类型的Bean，Spring启动报错</p>
<ol>
<li>项目使用注解切面，ump的@JProfiler</li>
<li>jdk 使用jdk8</li>
<li>org.aspectj:aspectjweaver:1.6.12</li>
</ol>
<p>Spring 启动时会检查所有Bean的所有方法，是否注解@JProfiler<br>这时会解析String类，aspectjweaver解析jdk8中的String类会报错org.aspectj.apache.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 15</p>
<p>因为jdk8 引入了aspectjweaver1.6.12 不识别的结构体<a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.4.8" target="_blank" rel="external">https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.4.8</a><br>报错位置org.aspectj.apache.bcel.classfile.Constant#readConstant</p>
<p>升级aspectjweaver到1.8.10可以解决； 或者不使用String类型Bean</p>
<h2 id="手动注入"><a href="#手动注入" class="headerlink" title="手动注入"></a>手动注入</h2><p><code>How to inject dependencies into a self-instantiated object in Spring?</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 手动创建的对象，注入Spring依赖</span></div><div class="line"><span class="comment">// 创建任务并由线程池执行</span></div><div class="line">TraceCompareTask traceCompareTask = <span class="keyword">new</span> TraceCompareTask(taskInfo);</div><div class="line">applicationContext.getBeanFactory().autowireBean(traceCompareTask);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot]]></title>
      <url>http://xiaozhuang.github.io/2017/05/14/spring-boot/</url>
      <content type="html"><![CDATA[<p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。<br>该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置<br><a id="more"></a></p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="4个核心"><a href="#4个核心" class="headerlink" title="4个核心"></a>4个核心</h2><ul>
<li>自动配置 为常见配置常见进行自动化配置；如ClassPath里发现H2数据库的库，自动配置H2数据库</li>
<li>起步依赖 把库聚合再一起，并且依赖库的版本已经过测试，不会出现不兼容</li>
<li>命令行界面 Spring Boot Cli 让只写代码即可实现应用程序成为可能</li>
<li>Actuator 提供运行时检视应用内部情况的能力</li>
</ul>
<p>Actuator 包含</p>
<ul>
<li>Spring上下文配置的Bean</li>
<li>Spring Boot自动配置做的决策</li>
<li>应用取到的环境变量、系统变量、配置属性和命令行参数</li>
<li>最近处理过的HTTP请求的追踪</li>
<li>内存用量、垃圾回收、web请求及数据源用量相关指标</li>
</ul>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>方式1：mvn命令启动</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 项目目录下</span></div><div class="line">mvn spring-boot:run</div></pre></td></tr></table></figure>
<p>方式2：编译jar包启动</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 打包</span></div><div class="line">mvn clean package</div><div class="line"><span class="comment"># 启动</span></div><div class="line">java -jar spring_boot_learn-0.0.1-SNAPSHOT.jar</div><div class="line"></div><div class="line"><span class="comment"># 指定多环境配置</span></div><div class="line">java -jar spring_boot_learn-</div><div class="line">0.0.1-SNAPSHOT.jar --spring.profiles.active=prod</div></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>application.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">server.port=8080</div><div class="line">server.context-path=/learn</div></pre></td></tr></table></figure>
<p>application.yml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: 8081</div><div class="line">  context-path: /learn</div></pre></td></tr></table></figure>
<h1 id="Conf"><a href="#Conf" class="headerlink" title="Conf"></a>Conf</h1><h2 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="ConfigurationProperties"></a>ConfigurationProperties</h2><p><code>加载properties文件</code></p>
<p>方案1：<br>ConfigurationProperties + EnableConfigurationProperties</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ConfigurationProperties</span>(locations = <span class="string">"classpath:mail.properties"</span>, </div><div class="line">                         ignoreUnknownFields = <span class="keyword">false</span>, </div><div class="line">                         prefix = <span class="string">"mail"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailProperties</span> </span>&#123; </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Smtp</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> auth;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> starttlsEnable;  </div><div class="line">    <span class="comment">// ... getters and setters </span></div><div class="line">  &#125;</div><div class="line">  <span class="meta">@NotBlank</span> <span class="keyword">private</span> String host;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> port;  </div><div class="line">  <span class="keyword">private</span> String from; </div><div class="line">  <span class="keyword">private</span> String username;</div><div class="line">  <span class="keyword">private</span> String password; </div><div class="line">  <span class="meta">@NotNull</span> <span class="keyword">private</span> Smtp smtp; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mail.host=localhost</div><div class="line">mail.port=25</div><div class="line">mail.smtp.auth=false</div><div class="line">mail.smtp.starttls-enable=false</div><div class="line">mail.from=me@localhost</div><div class="line">mail.username=</div><div class="line">mail.password=</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableConfigurationProperties</span>(MailProperties.class)</div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailConfiguration</span> </span>&#123; </div><div class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> MailProperties mailProperties; </div><div class="line"></div><div class="line">    <span class="meta">@Bean</span> <span class="function"><span class="keyword">public</span> JavaMailSender <span class="title">javaMailSender</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="comment">// omitted for readability</span></div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>方案2：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(locations = <span class="string">"classpath:mail.properties"</span>, </div><div class="line">                         prefix = <span class="string">"mail"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailConfiguration</span> </span>&#123; </div><div class="line">	 <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Smtp</span> </span>&#123;</div><div class="line">	    <span class="keyword">private</span> <span class="keyword">boolean</span> auth;</div><div class="line">	    <span class="keyword">private</span> <span class="keyword">boolean</span> starttlsEnable;</div><div class="line">	    <span class="comment">// ... getters and setters</span></div><div class="line">	 &#125;</div><div class="line"></div><div class="line">	 <span class="meta">@NotBlank</span> <span class="keyword">private</span> String host; </div><div class="line">	 <span class="keyword">private</span> <span class="keyword">int</span> port;</div><div class="line">	 <span class="keyword">private</span> String from; </div><div class="line">	 <span class="keyword">private</span> String username;</div><div class="line">	 <span class="keyword">private</span> String password; </div><div class="line">	</div><div class="line">	 <span class="meta">@NotNull</span> <span class="keyword">private</span> Smtp smtp; </div><div class="line">	 <span class="comment">// ... getters and setters  </span></div><div class="line">	 </div><div class="line">	 <span class="meta">@Bean</span> <span class="function"><span class="keyword">public</span> JavaMailSender <span class="title">javaMailSender</span><span class="params">()</span> </span>&#123;</div><div class="line">	  <span class="comment">// omitted for readability</span></div><div class="line">	 &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 添加依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- spring-boot-devtools plugin--&gt;</span></div><div class="line"><span class="comment">&lt;!-- &lt;plugin&gt;</span></div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">    &lt;configuration&gt;</div><div class="line">        &lt;fork&gt;true&lt;/fork&gt;</div><div class="line">    &lt;/configuration&gt;</div><div class="line">&lt;/plugin&gt; --&gt;</div></pre></td></tr></table></figure>
<p>idea 配置修改：<br>File -&gt;Setting -&gt;Compile -&gt; make project automatically</p>
<p>Ctrl + Shift + Alt + / –&gt; Registry –&gt; compiler.automake.allow.when.app.running</p>
<h2 id="配置多个数据源"><a href="#配置多个数据源" class="headerlink" title="配置多个数据源"></a>配置多个数据源</h2><p>TodoList</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: data-multidatasource</div><div class="line">  datasource:</div><div class="line">    driver-class-name: org.hsqldb.jdbc.JDBCDriver</div><div class="line">    url: jdbc:hsqldb:mem:db1</div><div class="line">    username: sa</div><div class="line">    password:</div><div class="line">  second-datasource:</div><div class="line">    driver-class-name: org.hsqldb.jdbc.JDBCDriver</div><div class="line">    url: jdbc:hsqldb:mem:db2</div><div class="line">    username: sa</div><div class="line">    password:</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 禁用自动数据源</div><div class="line">spring.datasource.initialize=false</div><div class="line"></div><div class="line">spring.datasource.type=org.apache.commons.dbcp2.BasicDataSource</div><div class="line">spring.datasource.url=jdbc:mysql://192.168.61.211:3306/waybill_refund?characterEncoding=UTF-8</div><div class="line">spring.datasource.username=waybill</div><div class="line">spring.datasource.password=waybill</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="meta">@Primary</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">primaryDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> DataSourceBuilder.create().build();</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="meta">@Bean</span>(name = <span class="string">"secondDatasource"</span>)</div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.second-datasource"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">secondDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> DataSourceBuilder.create().build();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableSwagger</span>2</div><div class="line"><span class="comment">// jar 包部署，启动异常不报错</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;JSSProperties.class&#125;)</div><div class="line"><span class="meta">@ConditionalOnClass</span>(&#123;JingdongStorageService.class&#125;)</div><div class="line"><span class="meta">@ConditionalOnProperty</span>(name = JSSProperties.JSS_PREFIX_ENABLED, matchIfMissing = <span class="keyword">true</span>)</div></pre></td></tr></table></figure>
<h1 id="Spring-Boot配置"><a href="#Spring-Boot配置" class="headerlink" title="Spring Boot配置"></a>Spring Boot配置</h1><p>ReadingListApplication.java : 应用程序的启动引导类（boot class），也是主要的Spring配置类<br>application.properties : 用于配置应用程序的和Spring Boot的属性</p>
<p>@SpringBootApplication<br>开启了Spring的组件扫描和Spring Boot的自动配置功能；<br>实际是3个注解的组合：</p>
<ul>
<li>@Configuration： 标明该类使用Spring基于Java的配置</li>
<li>@ComponentScan： 启用组件扫描(on the package where the application is located)</li>
<li>@EnableAutoConfiguration： 开启Spring Boot自动配置</li>
</ul>
<p>如果需要Spring Boot自动配置以外的<code>其他Spring配置</code>， 可配置到@Configuration标注的类里</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/** </span></div><div class="line">  * If specific</div><div class="line">  * packages are not defined, scanning will occur from the package of the</div><div class="line">  * class that declares this annotation.</div><div class="line">  */</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ComponentScan&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>application.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 修改Tomcat端口号</div><div class="line">server.port=8080</div></pre></td></tr></table></figure>
<p>停用AutoConfig</p>
<p>由@SpringBootApplication 改为@Configuration，@ComponentScan</p>
<h2 id="Spring-Boot-maven插件"><a href="#Spring-Boot-maven插件" class="headerlink" title="Spring Boot maven插件"></a>Spring Boot maven插件</h2><p>Spring Boot maven 构建插件主要功能是把项目打包成一个可执行的超级JAR（uber-JAR）<br>将依赖打入JAR，并添加描述文件，使可通过java -jar来运行</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用maven命令运行</span></div><div class="line">mvn spring-boot:run</div></pre></td></tr></table></figure>
<h2 id="spring-boot-starter-parent"><a href="#spring-boot-starter-parent" class="headerlink" title="spring-boot-starter-parent"></a>spring-boot-starter-parent</h2><p>将spring-boot-starter-parent作为模块parent，<br>继承了很多常用库的依赖版本，声明依赖时，<code>不用再指定版本号</code></p>
<h2 id="起步依赖"><a href="#起步依赖" class="headerlink" title="起步依赖"></a>起步依赖</h2><p>起步依赖ArtifactId以spring-boot-starter-前缀</p>
<p>起步依赖将常用依赖进行分组整合，降低项目依赖的复杂度</p>
<p>起步依赖并不需要指定版本号，起步依赖的版本是由正在使用的Spring Boot的版本决定的</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 排除传递依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>起步依赖中的各个依赖版本之间的兼容性都经过测试，只在特殊情况下覆盖这些依赖。</p>
<h2 id="Spring-Boot条件化配置"><a href="#Spring-Boot条件化配置" class="headerlink" title="Spring Boot条件化配置"></a>Spring Boot条件化配置</h2><p><code>org.springframework.boot.autoconfigure</code></p>
<p>spring-boot-autoconfigure的JAR文件，包含很多条件化配置类</p>
<p>SpringBoot 运用Spring条件化配置，定义多个特殊的条件化配置注解</p>
<ul>
<li>@ConditionalOnBean 配置了某个Bean</li>
<li><p>@ConditionalonMissBean 没有配置某个Bean</p>
</li>
<li><p>@ConditionalOnClass ClassPath里有指定的类</p>
</li>
<li><p>@ConditionalOnMissingClass ClassPath里缺少指定的类</p>
</li>
<li><p>@ConditionalOnExpression 给定的Spring Expression Language（SpEL）表达式计算结果为true</p>
</li>
<li><p>@ConditionalOnJava Java的版本匹配特定值或者一个范围</p>
</li>
<li><p>@ConditionalOnJndi 参数中给定的JNDI必须存在一个；如果没有参数，则要有JNDI InitialContext</p>
</li>
<li><p>@ConditionalOnProperty 指定配置属性要有一个明确的值</p>
</li>
<li><p>@ConditionalOnResource ClassPath里有指定的资源</p>
</li>
<li><p>@ConditionalOnWebApplication 是一个Web应用</p>
</li>
<li>@ConditionalOnNotWebApplication 不是一个Web应用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// DataSource 自动化配置； 其中EmbeddedDatabaseType在spring-jdbc包中</span></div><div class="line"><span class="comment">// </span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ConditionalOnClass</span>(&#123; DataSource.class, EmbeddedDatabaseType.class &#125;)</div><div class="line"><span class="meta">@EnableConfigurationProperties</span>(DataSourceProperties.class)</div><div class="line"><span class="meta">@Import</span>(&#123; DataSourcePoolMetadataProvidersConfiguration.class,</div><div class="line">    DataSourceInitializationConfiguration.class &#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceAutoConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Configuration</span></div><div class="line">  <span class="meta">@Conditional</span>(PooledDataSourceCondition.class)</div><div class="line">  <span class="meta">@ConditionalOnMissingBean</span>(&#123; DataSource.class, XADataSource.class &#125;)</div><div class="line">  <span class="meta">@Import</span>(&#123; DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,</div><div class="line">      DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.Generic.class,</div><div class="line">      DataSourceJmxConfiguration.class &#125;)</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PooledDataSourceConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@EnableConfigurationProperties<br>{@link ConfigurationProperties} beans can be registered in the standard way</p>
<h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><h3 id="覆盖Spring-Boot自动化配置"><a href="#覆盖Spring-Boot自动化配置" class="headerlink" title="覆盖Spring Boot自动化配置"></a>覆盖Spring Boot自动化配置</h3><p>要覆盖Spring Boot的自动配置，只需编写一个显式的配置。<br>Spring Boot的设计是加载应用级的配置，随后在考虑自动配置。</p>
<h3 id="通过属性文件外置配置"><a href="#通过属性文件外置配置" class="headerlink" title="通过属性文件外置配置"></a>通过属性文件外置配置</h3><p>Spring Boot自动配置的Bean提供300多个微调的属性</p>
<p>SpringBoot 支持多种设置途径（按优先级顺序）</p>
<ul>
<li>命令行参数</li>
<li>java:comp/env里的JNDI属性</li>
<li>JVM系统属性</li>
<li>操作系统环境变量</li>
<li>随机生成的带random.* 前缀的属性</li>
<li>应用程序外的application.properties 或application.yml</li>
<li>应用程序内的application.properties 或application.yml</li>
<li>通过@PropertySource标注的属性源</li>
<li>默认属性</li>
</ul>
<p>application.properties、application.yml文件能放在4个位置（按优先级顺序）</p>
<ul>
<li>外置，相对于应用程序目录的/config 子目录里</li>
<li>外置，相对应用程序运行的目录里</li>
<li>内置，config包里</li>
<li>内置，ClassPath根目录</li>
</ul>
<h3 id="自动配置微调"><a href="#自动配置微调" class="headerlink" title="自动配置微调"></a>自动配置微调</h3><h4 id="禁用模板缓存（模板默认缓存）"><a href="#禁用模板缓存（模板默认缓存）" class="headerlink" title="禁用模板缓存（模板默认缓存）"></a>禁用模板缓存（模板默认缓存）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">spring.thymeleaf.cache</div><div class="line">spring.freemarker.cache</div><div class="line">spring.groovy.template.cache</div><div class="line">spring.velocity.cache</div></pre></td></tr></table></figure>
<h4 id="配置嵌入式服务器"><a href="#配置嵌入式服务器" class="headerlink" title="配置嵌入式服务器"></a>配置嵌入式服务器</h4><p>默认Tomcat，端口8080</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server.port=80</div></pre></td></tr></table></figure>
<p>开启HTTPS服务<br>server:<br>  port:8443<br>  ssl:<br>    key-store: file:///path/to/mykeys.jks<br>    key-store-password: letmein<br>    key-password: letmein</p>
<blockquote>
<p>开发环境HTTPS服务器多使用8443端口</p>
</blockquote>
<h4 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h4><p>SpringBoot默认使用logback</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 排除默认logback日志 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 引入log4j2依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h4><p>支持自动配置的连接池</p>
<ul>
<li>HikariCP</li>
<li>Commons DBCP</li>
<li>Commons DBCP2</li>
</ul>
<blockquote>
<p>DataSourceAutoConfiguration</p>
</blockquote>
<p>从JNDI查找DataSource:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  datasource:</div><div class="line">    jnid-name: java:/comp/env/jdbc/readingListDS</div></pre></td></tr></table></figure>
<h3 id="应用程序Bean的配置外置"><a href="#应用程序Bean的配置外置" class="headerlink" title="应用程序Bean的配置外置"></a>应用程序Bean的配置外置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"amazon"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmazonProperties</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> String associateId;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAssociateId</span><span class="params">(String associateId)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.associateId = associateId;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getAssociateId</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> associateId;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@ConfigurationProperties注解不会生效，除非先向Spring配置类添加@EnableConfigurationProperties注解<br>Spring Boot自动配置后，全部配置类都已加上@EnableConfigurationProperties注解，无需显示添加</p>
<p>SpringBoot属性解析器，会自动把<code>驼峰规则</code>、<code>连字符</code>、<code>下划线</code>的同名属性关联起来</p>
<h2 id="使用Profile进行配置"><a href="#使用Profile进行配置" class="headerlink" title="使用Profile进行配置"></a>使用Profile进行配置</h2><p>特定于Profile的属性文件</p>
<p>如果正在使用application.properties，可以创建<code>额外</code>的属性文件<br>遵循application-{profile}.properties<br>提供特定于Profile的属性</p>
<p>多Profilede YAML文件进行配置</p>
<p>logging:<br>  level:<br>    root: INFO</p>
<hr>
<p>spring:<br>  profiles: development</p>
<p>logging:<br>  level:<br>    root: DEBUG</p>
<hr>
<p>spring:<br>  profiles: production</p>
<p>logging：<br>  path: /tmp/<br>  file: BookWorm.log<br>  level:<br>    root: WARN</p>
<p>使用一组连字符（—）作为分隔符。</p>
<h2 id="定制应用错误页面"><a href="#定制应用错误页面" class="headerlink" title="定制应用错误页面"></a>定制应用错误页面</h2><p>SpringBoot自动配置默认错误处理器会查找名为error的视图</p>
<ul>
<li>实现Spring的View接口的Bean，其ID为error</li>
<li>Thymeleaf使用error.html</li>
<li>FreeMarker使用error.ftl</li>
<li>Velocity使用error.vm</li>
<li>JSP使用error.jsf</li>
</ul>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootSampleApplicationTests</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="深入Actuator"><a href="#深入Actuator" class="headerlink" title="深入Actuator"></a>深入Actuator</h1><p>Spring Boot的Actuator监控和度量应用程序的端点</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Actuator端点"><a href="#Actuator端点" class="headerlink" title="Actuator端点"></a>Actuator端点</h2><ul>
<li>autoconfig 自动配置报告（记录哪些自动配置条件通过）</li>
<li>configprops 配置属性如何注入Bean</li>
<li>beans 描述应用程序上下文里的全部Bean</li>
<li>dump 线程活动的快照</li>
<li>env 全部环境属性</li>
<li>env/{name}</li>
<li>health 应用健康指标（由HealthIndicator实现类提供）</li>
<li>info 应用程序定制信息</li>
<li>mappings 全部URL路径及对应控制器</li>
<li>metrics 各种应用程序度量信息，内存用量和HTTP请求计数</li>
<li>metrics/{name} 指定名称应用程序度量信息</li>
<li>trace 基本的HTTP请求跟踪信息（时间戳、HTTP头等）</li>
<li>shutdown 关闭应用程序，要求endpoints.shutdown.enabled=true (post)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Actuator需接入security 或者 禁用安全控制</div><div class="line">management.security.enabled=false</div></pre></td></tr></table></figure>
<h3 id="spring-boot-starter-actuator安全使用规范"><a href="#spring-boot-starter-actuator安全使用规范" class="headerlink" title="spring-boot-starter-actuator安全使用规范"></a>spring-boot-starter-actuator安全使用规范</h3><p>请求（/trace）会直接泄露实时用户核心cookie信息</p>
<p>禁止trace功能，并且加入访问控制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#禁止trace功能</div><div class="line">endpoints.trace.enabled=false</div><div class="line"></div><div class="line">#禁止shutdown功能</div><div class="line">endpoints.shutdown.enabled=false</div><div class="line"></div><div class="line">#禁止configprops功能</div><div class="line">endpoints.configprops.enabled=false</div></pre></td></tr></table></figure>
<h2 id="连接Actuator的远程shell"><a href="#连接Actuator的远程shell" class="headerlink" title="连接Actuator的远程shell"></a>连接Actuator的远程shell</h2><p>Spring Boot 集成了CRaSH，一种能嵌入任意java应用程序的shell；<br>监听2000端口，可通过SSH工具连接shell；</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-remote-shell<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">autoconfig</div><div class="line">beans</div><div class="line"><span class="comment"># 调用actuator端点</span></div><div class="line">endpoint </div><div class="line"><span class="comment"># Spring Boot 度量信息（实时更新）</span></div><div class="line">metrics</div></pre></td></tr></table></figure>
<h2 id="通过JMX监控应用程序"><a href="#通过JMX监控应用程序" class="headerlink" title="通过JMX监控应用程序"></a>通过JMX监控应用程序</h2><p>Actuator端点发布在org.springframework.boot域下</p>
<h2 id="定制Actuator"><a href="#定制Actuator" class="headerlink" title="定制Actuator"></a>定制Actuator</h2><h3 id="修改端点ID"><a href="#修改端点ID" class="headerlink" title="修改端点ID"></a>修改端点ID</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">endpoints:</div><div class="line">  shutdown:</div><div class="line">    id: kill</div></pre></td></tr></table></figure>
<h3 id="启用和禁用端点"><a href="#启用和禁用端点" class="headerlink" title="启用和禁用端点"></a>启用和禁用端点</h3><p>禁用指定端点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">endpoints:</div><div class="line">  metrice:</div><div class="line">    enabled: false</div></pre></td></tr></table></figure>
<p>禁用全部端点，仅启用指定端点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">endpoints:</div><div class="line">  enabled: false</div><div class="line">  metrice:</div><div class="line">    enabled:true</div></pre></td></tr></table></figure>
<h3 id="添加自定义度量信息"><a href="#添加自定义度量信息" class="headerlink" title="添加自定义度量信息"></a>添加自定义度量信息</h3><p>方式1:增加、减少、重置特定名称的度量信息（注入该Bean即可调用）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CounterService</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Increment the specified counter by 1.</div><div class="line">   * <span class="doctag">@param</span> metricName the name of the counter</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">(String metricName)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Decrement the specified counter by 1.</div><div class="line">   * <span class="doctag">@param</span> metricName the name of the counter</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">decrement</span><span class="params">(String metricName)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Reset the specified counter.</div><div class="line">   * <span class="doctag">@param</span> metricName the name of the counter</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(String metricName)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方式2:将某个值记录到特定名称的度量信息里（注入该Bean即可调用）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GaugeService</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Set the specified gauge value.</div><div class="line">   * <span class="doctag">@param</span> metricName the name of the gauge to set</div><div class="line">   * <span class="doctag">@param</span> value the value of the gauge</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">submit</span><span class="params">(String metricName, <span class="keyword">double</span> value)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3:发布自定义度量信息</p>
<p>Bean实现PublicMetrics接口，通过metrics方法发布多个度量信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PublicMetrics</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Return an indication of current state through metrics.</div><div class="line">   * <span class="doctag">@return</span> the public metrics</div><div class="line">   */</div><div class="line">  Collection&lt;Metric&lt;?&gt;&gt; metrics();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建自定义追踪仓库"><a href="#创建自定义追踪仓库" class="headerlink" title="创建自定义追踪仓库"></a>创建自定义追踪仓库</h3><p>/trace端点报告的跟踪信息存储在内存里，保存100条</p>
<p>方式1：创建InMemoryTraceRepository Bean自定义容量</p>
<p>方式2：实现TraceRepository接口，创建自定义Trace存储服务</p>
<h2 id="插入自定义健康指示器"><a href="#插入自定义健康指示器" class="headerlink" title="插入自定义健康指示器"></a>插入自定义健康指示器</h2><p>创建Bean实现HealthIndicator接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Health.Builder builder = <span class="keyword">new</span> Health.Builder();</div><div class="line">builder.up().build();</div><div class="line"></div><div class="line"></div><div class="line">Health.Builder builder = <span class="keyword">new</span> Health.Builder();</div><div class="line">builder.down(ex).build();</div></pre></td></tr></table></figure>
<h2 id="保护Actuator端点"><a href="#保护Actuator端点" class="headerlink" title="保护Actuator端点"></a>保护Actuator端点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 设置Actuator端点相对于上下文的路径，默认空</div><div class="line">management.context-path=/mgmt</div></pre></td></tr></table></figure>
<h1 id="部署Spring-Boot应用程序"><a href="#部署Spring-Boot应用程序" class="headerlink" title="部署Spring Boot应用程序"></a>部署Spring Boot应用程序</h1><h2 id="构建war文件"><a href="#构建war文件" class="headerlink" title="构建war文件"></a>构建war文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 1. 打包方式修改为war --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div></pre></td></tr></table></figure>
<!-- 2. 创建SpringBootServletInitializer子类 -->
<p>创建一个SpringBootServletInitializer的子类，覆盖configure() 方法来指定Spring的配置类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> application.sources(WaybillMinorWebApplication.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>SpringBootServletInitializer会在Spring上下文中查找Filter、Servlet或ServletContextInitializer类型的Bean，并把他们绑定到Servlet容器里。</p>
</blockquote>
<p>这样，同一war包，可以同时支持java -jar 和 应用服务器（Tomcat）部署</p>
<blockquote>
<p>添加依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="配置Servlet"><a href="#配置Servlet" class="headerlink" title="配置Servlet"></a>配置Servlet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 参考DispatcherServlet配置</span></div><div class="line"><span class="comment">// org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTOTEST_SERVLET_BEAN_NAME = <span class="string">"jdJspServlet"</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTOTEST_SERVLET_REGISTRATION_BEAN_NAME = <span class="string">"jdJspServletRegistration"</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  tomcat 加固</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@Bean</span>(name = AUTOTEST_SERVLET_REGISTRATION_BEAN_NAME)</div><div class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">dispatcherServletRegistration</span><span class="params">()</span> </span>&#123;</div><div class="line">    ServletRegistrationBean registration = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> JDJspServlet(), <span class="string">"*.jsp"</span>, <span class="string">"*.jspx"</span>);</div><div class="line">    registration.setName(AUTOTEST_SERVLET_BEAN_NAME);</div><div class="line"></div><div class="line">    Map&lt;String,String&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">8</span>);</div><div class="line">    <span class="comment">/*开启jsp功能*/</span></div><div class="line">    params.put(<span class="string">"enableJsp"</span>,<span class="string">"false"</span>);</div><div class="line">    params.put(<span class="string">"xpoweredBy"</span>,<span class="string">"false"</span>);</div><div class="line">    registration.setInitParameters(params);</div><div class="line"></div><div class="line">    <span class="comment">// 或者</span></div><div class="line">    <span class="comment">// registration.addInitParameter("enableJsp", "false");</span></div><div class="line"></div><div class="line">    registration.setLoadOnStartup(<span class="number">3</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> registration;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Spring-Boot-开发者工具"><a href="#Spring-Boot-开发者工具" class="headerlink" title="Spring Boot 开发者工具"></a>Spring Boot 开发者工具</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="自动重启"><a href="#自动重启" class="headerlink" title="自动重启"></a>自动重启</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Excluding Resources --&gt;</div><div class="line">spring.devtools.restart.exclude=static/**,public/**</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// isabling Restart</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">  System.setProperty(<span class="string">"spring.devtools.restart.enabled"</span>, <span class="string">"false"</span>);</div><div class="line">  SpringApplication.run(MyApp.class, args);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="LiveReload"><a href="#LiveReload" class="headerlink" title="LiveReload"></a>LiveReload</h2><p>Spring Boot启动时内嵌LiveReload服务器，资源变化时触发浏览器刷新。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.devtools.livereload.enabled=false</div></pre></td></tr></table></figure>
<h2 id="默认开发属性"><a href="#默认开发属性" class="headerlink" title="默认开发属性"></a>默认开发属性</h2><p>如果存在开发者工具，视图模板缓存会禁用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 开发工具激活后，如下属性会设置为false --&gt;</div><div class="line">spring.thymeleaf.cache</div><div class="line">spring.freemarker.cache</div><div class="line">spring.velocity.cache</div><div class="line">spring.mustache.cache</div><div class="line">spring.groovy.template.cache</div></pre></td></tr></table></figure>
<h2 id="全局匹配开发者工具"><a href="#全局匹配开发者工具" class="headerlink" title="全局匹配开发者工具"></a>全局匹配开发者工具</h2><p>user.dir 添加配置文件spring-boot.devtools.properties<br>可以配置希望多个项目共享的各种开发者工具</p>
<h1 id="SpringBoot-Starter"><a href="#SpringBoot-Starter" class="headerlink" title="SpringBoot Starter"></a>SpringBoot Starter</h1><p><code>自定义 Starter</code></p>
<p>@EnableAutoConfiguration自动配置原理</p>
<p>注解会导入一个EnableAutoConfigurationImportSelector的类,而这个类会去读取一个META-INF/spring.factories中<br>key为org.springframework.boot.autoconfigure.EnableAutoConfiguration对应的全限定名的值</p>
<p>读取spring.factories是通过org.springframework.core.io.support.SpringFactoriesLoader实现。</p>
<h1 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h1><h2 id="ContextLoader-getCurrentWebApplicationContext-always-returns-null"><a href="#ContextLoader-getCurrentWebApplicationContext-always-returns-null" class="headerlink" title="ContextLoader.getCurrentWebApplicationContext() always returns null"></a>ContextLoader.getCurrentWebApplicationContext() always returns null</h2><p>解决方案：ApplicationContextAware</p>
<a href="https://stackoverflow.com/questions/22167912/contextloader-getcurrentwebapplicationcontext-always-returns-null" title="contextloader-getcurrentwebapplicationcontext-always-returns-null" target="_blank" rel="external">contextloader-getcurrentwebapplicationcontext-always-returns-null</a>
<h2 id="log4j2"><a href="#log4j2" class="headerlink" title="log4j2"></a>log4j2</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-1.2-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lmax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>disruptor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Needed for Async Logging with Log4j 2 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lmax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>disruptor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-1.2-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Source]]></title>
      <url>http://xiaozhuang.github.io/2017/05/03/spring-source/</url>
      <content type="html"><![CDATA[<p>Spring 源码学习<br><a id="more"></a></p>
<h1 id="Spring-IoC"><a href="#Spring-IoC" class="headerlink" title="Spring IoC"></a>Spring IoC</h1><h2 id="Bean生命周期"><a href="#Bean生命周期" class="headerlink" title="Bean生命周期"></a>Bean生命周期</h2><p>Spring Bean Life Cycle Callback Methods</p>
<blockquote><footer><strong>BeanLifeCycle spring-bean-life-cycle-tutorial.jpg</strong></footer></blockquote>
<blockquote><footer><strong>图片来源</strong><cite><a href="https://www.concretepage.com/spring/spring-bean-life-cycle-tutorial" target="_blank" rel="external">Spring Bean Life Cycle Tutorial</a></cite></footer></blockquote>
<ul>
<li>constructor</li>
<li>setter method</li>
<li>BeanName<code>Aware</code>.setBeanName()</li>
<li>BeanClassLoader<code>Aware</code>.setBeanClassLoader()</li>
<li>BeanFactoryAware.setBeanFactory()</li>
<li>ApplicationContextAware.setApplicationContext();</li>
<li>BeanPostProcessor.postProcessBeforeInitialization()</li>
<li>@PostConstruct</li>
<li>InitializingBean.afterPropertiesSet() </li>
<li>init-method</li>
<li>BeanPostProcessor.postProcessAfterInitialization()</li>
<li>Now the bean instance is ready to be used. Perform the task using the bean.</li>
<li>@PreDestroy</li>
<li>DisposableBean.destroy()</li>
<li>destroy-method</li>
</ul>
<blockquote>
<p>ServletContextAware、ServletConfigAware、ResourceLoaderAware、LoadTimeWeaverAware<br>BeanPostProcessor 作用在于对于新构造的实例可以做一些自定义的修改，方法的返回值会被Spring容器作为处理后的Bean注册到容器中，应用级别的处理，将处理每个Bean；</p>
</blockquote>
<h3 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h3><ul>
<li>postProcessBeforeInitialization</li>
<li>postProcessAfterInitialization</li>
</ul>
<h3 id="InstantiationAwareBeanPostProcessor"><a href="#InstantiationAwareBeanPostProcessor" class="headerlink" title="InstantiationAwareBeanPostProcessor"></a>InstantiationAwareBeanPostProcessor</h3><ul>
<li>postProcessBeforeInstantiation：Bean<code>实例化</code>之前调用</li>
<li>postProcessAfterInstantiation：Bean<code>实例化</code>之后调用</li>
<li>postProcessPropertyValues：</li>
</ul>
<h2 id="PropertyDescriptor"><a href="#PropertyDescriptor" class="headerlink" title="PropertyDescriptor"></a>PropertyDescriptor</h2><p><code>java.beans.PropertyDescriptor</code></p>
<p>Java Bean 属性访问器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取访问器</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> PropertyDescriptor[] getPropertyDescriptors(Class&lt;?&gt; clazz)</div><div class="line"></div><div class="line"><span class="comment">// 获取属性访问器 org.springframework.beans.BeanUtils#getPropertyDescriptor</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PropertyDescriptor <span class="title">getPropertyDescriptor</span><span class="params">(Class&lt;?&gt; clazz, String propertyName)</span></span></div></pre></td></tr></table></figure>
<p>Spring启动时读取Bean配置信息，<br>在Spring容器中生成Bean注册表（BeanDefinition ConcurrentHashMap），<br>根据Bean注册表实例化Bean，<br>装配Bean之间的依赖关系。</p>
<p>Bean 别名：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 1.使用name属性 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testBean"</span> <span class="attr">class</span>=<span class="string">"testBean,testBean2"</span> <span class="attr">class</span>=<span class="string">"com.TestBean"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 2.使用alias标签 --&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testBean"</span> <span class="attr">class</span>=<span class="string">"com.TestBean"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"testBean"</span> <span class="attr">alias</span>=<span class="string">"testBean,testBean2"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>使用FactoryBean接口定制实例化bean的逻辑：<code>org.springframework.beans.factory.FactoryBean</code><br>配置文件中<bean>的class属性配置时FactoryBean时，<br>通过getBean()方法返回的不是FactoryBean本身，<br>而是FactoryBean#getObject()方法返回的对象。</bean></p>
<h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><p><code>org.springframework.beans.factory.BeanFactory</code></p>
<h3 id="AutowireCapableBeanFactory"><a href="#AutowireCapableBeanFactory" class="headerlink" title="AutowireCapableBeanFactory"></a>AutowireCapableBeanFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Resolve the bean instance that uniquely matches the given object type, if any, including its bean name.</span></div><div class="line"><span class="comment">// @since 4.3.3</span></div><div class="line">&lt;T&gt; <span class="function">NamedBeanHolder&lt;T&gt; <span class="title">resolveNamedBean</span><span class="params">(Class&lt;T&gt; requiredType)</span></span></div></pre></td></tr></table></figure>
<h3 id="ListableBeanFactory"><a href="#ListableBeanFactory" class="headerlink" title="ListableBeanFactory"></a>ListableBeanFactory</h3><p><code>org.springframework.beans.factory.ListableBeanFactory</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取指定类型BeanName，包含子类</span></div><div class="line">String[] getBeanNamesForType(Class&lt;?&gt; type, <span class="keyword">boolean</span> includeNonSingletons, <span class="keyword">boolean</span> allowEagerInit)</div></pre></td></tr></table></figure>
<h3 id="HierarchicalBeanFactory"><a href="#HierarchicalBeanFactory" class="headerlink" title="HierarchicalBeanFactory"></a>HierarchicalBeanFactory</h3><p><code>org.springframework.beans.factory.HierarchicalBeanFactory</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 检查当前BeanFactory是否包含指定Bean</span></div><div class="line"><span class="comment">// Return whether the local bean factory contains a bean of the given name,</span></div><div class="line"><span class="comment">// ignoring beans defined in ancestor contexts.</span></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsLocalBean</span><span class="params">(String name)</span></span></div></pre></td></tr></table></figure>
<h3 id="ConfigurableBeanFactory"><a href="#ConfigurableBeanFactory" class="headerlink" title="ConfigurableBeanFactory"></a>ConfigurableBeanFactory</h3><p><code>org.springframework.beans.factory.config.ConfigurableBeanFactory</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Determine whether the specified bean is currently in creation.</span></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isCurrentlyInCreation</span><span class="params">(String beanName)</span></span>;</div></pre></td></tr></table></figure>
<h2 id="ImportBeanDefinitionRegistrar"><a href="#ImportBeanDefinitionRegistrar" class="headerlink" title="ImportBeanDefinitionRegistrar"></a>ImportBeanDefinitionRegistrar</h2><p>Interface to be implemented by types that register additional bean definitions when processing @{@link Configuration} classes.</p>
<p>自定义注解import ImportBeanDefinitionRegistrar，ImportBeanDefinitionRegistrar中注册BeanDefinition</p>
<blockquote>
<p>示例 @EnableAspectJAutoProxy</p>
</blockquote>
<h2 id="ImportSelector"><a href="#ImportSelector" class="headerlink" title="ImportSelector"></a>ImportSelector</h2><p><code>注解引入JavaConfig</code><br><code>注解引入配置</code></p>
<p>Interface to be implemented by types that determine which @{@link Configuration} class(es) should be imported based on a given selection criteria</p>
<p>实现类返回需导入至Spring中的JavaConfig</p>
<blockquote>
<p>示例：@EnableTransactionManagement -&gt; TransactionManagementConfigurationSelector.class</p>
</blockquote>
<h1 id="Spring-MyBatis"><a href="#Spring-MyBatis" class="headerlink" title="Spring MyBatis"></a>Spring MyBatis</h1><h1 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h1><p>cglib动态代理是使用ASM开源包，将代理对象类的class类文件加载进来，然后利用字节码技术修改class文件的字节码生成子类，进而实现代理类。</p>
<h2 id="Pointcut"><a href="#Pointcut" class="headerlink" title="Pointcut"></a>Pointcut</h2><p><code>org.springframework.aop.Pointcut</code><br><code>切点</code></p>
<p>Pointcut由ClassFilter和MethodMatcher构成</p>
<blockquote>
<p>org.springframework.aop.MethodMatcher、org.springframework.aop.ClassFilter</p>
</blockquote>
<h2 id="Advisor"><a href="#Advisor" class="headerlink" title="Advisor"></a>Advisor</h2><p><code>org.springframework.aop.Advisor</code><br><code>切面</code></p>
<p>切面同时包含横切代码和连接点信息。</p>
<h2 id="PointcutAdvisor"><a href="#PointcutAdvisor" class="headerlink" title="PointcutAdvisor"></a>PointcutAdvisor</h2><p><code>org.springframework.aop.PointcutAdvisor</code></p>
<p>具有切点的切面，它包含Advice和Pointcut两个类</p>
<p>PointcutAdvisor主要有6个具体的实现类:</p>
<p>DefaultPointcutAdvisor：常用切面类型，可通过任意Pointcut和Advice定义切面，不支持引介切面<br>NameMatchMethodPointcutAdvisor：可按方法名定义切面<br>RegexpMethodPointcutAdvisor：按正则表达式匹配方法名切点定义切面<br>StaticMethodMatcherPointcutAdvisor：静态匹配切点定义切面（静态匹配：按targetClass、method； 动态匹配：按targetClass、method、args）<br>AspectJExpressionPointcutAdvisor：用于AspectJ切点表达式定义切点的切面<br>AspectJPointcutAdvisor：用于AspectJ语法定义切点的切面</p>
<h2 id="IntroductionAdvisor"><a href="#IntroductionAdvisor" class="headerlink" title="IntroductionAdvisor"></a>IntroductionAdvisor</h2><p>Advisor分两大类：IntroductionAdvisor（引介通知器）和PointcutAdvisor（切点通知器）。</p>
<p>IntroductionAdvisor主要为了给targetClass追加接口（或者说追加更多的方法），这种增强属于类级别的增强；<br>而PointcutAdvisor主要为了拦截方法，这种增强属于方法级别的增强。</p>
<blockquote>
<p>正是由于两类Advisor的增强级别不同，而导致了对ClassFilter的使用方式不同。IntroductionAdvisor进行类级别增强，因此只需要直接持有ClassFilter即可；而PointcutAdvisor进行方法级别增强，因此需要同时使用ClassFilter和MethodMatcher（方法匹配器）。PointcutAdvisor内部持有一个Pointcut，而Pointcut就是由ClassFilter和MethodMatcher组成的。</p>
</blockquote>
<h2 id="AnnotationAwareAspectJAutoProxyCreator"><a href="#AnnotationAwareAspectJAutoProxyCreator" class="headerlink" title="AnnotationAwareAspectJAutoProxyCreator"></a>AnnotationAwareAspectJAutoProxyCreator</h2><p><code>注解切面</code></p>
<blockquote>
<p>通过InstantiationAwareBeanPostProcessor生成代理类</p>
</blockquote>
<h1 id="Utils"><a href="#Utils" class="headerlink" title="Utils"></a>Utils</h1><h2 id="NamedThreadLocal"><a href="#NamedThreadLocal" class="headerlink" title="NamedThreadLocal"></a>NamedThreadLocal</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;JmsUserCredentials&gt; threadBoundCredentials =</div><div class="line">			<span class="keyword">new</span> NamedThreadLocal&lt;JmsUserCredentials&gt;(<span class="string">"Current JMS user credentials"</span>);</div></pre></td></tr></table></figure>
<h2 id="BeanFactoryUtils"><a href="#BeanFactoryUtils" class="headerlink" title="BeanFactoryUtils"></a>BeanFactoryUtils</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// beanFactory中获取指定类型beanName，包含父容器中Bean</span></div><div class="line"><span class="comment">// Get all bean names for the given type, including those defined in ancestor * factories.</span></div><div class="line">String[] globalAdvisorNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Advisor.class);</div><div class="line"></div><div class="line"><span class="comment">// Obtain a bean of type &#123;@code T&#125; from the given &#123;@code BeanFactory&#125; declaring a qualifier</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">qualifiedBeanOfType</span><span class="params">(BeanFactory beanFactory, Class&lt;T&gt; beanType, String qualifier)</span></span></div></pre></td></tr></table></figure>
<h2 id="OrderComparator"><a href="#OrderComparator" class="headerlink" title="OrderComparator"></a>OrderComparator</h2><p><code>org.springframework.core.Ordered</code> 对象排序</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;Object&gt; beans = <span class="keyword">new</span> ArrayList&lt;Object&gt;(globalAdvisorNames.length + globalInterceptorNames.length);</div><div class="line">OrderComparator.sort(beans);</div></pre></td></tr></table></figure>
<h2 id="ClassUtils"><a href="#ClassUtils" class="headerlink" title="ClassUtils"></a>ClassUtils</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取所有接口</span></div><div class="line">ClassUtils.getAllInterfacesForClass(targetClass, <span class="keyword">this</span>.proxyClassLoader)</div><div class="line"></div><div class="line"><span class="comment">// 获取类的而所有接口</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Class&gt; <span class="title">getAllInterfacesForClassAsSet</span><span class="params">(Class clazz)</span> </span></div><div class="line"></div><div class="line"><span class="comment">// 获取类加载器</span></div><div class="line"><span class="comment">// Return the default ClassLoader to use: typically the thread context ClassLoader, if available; the ClassLoader that loaded the ClassUtils class will be used as fallback.</span></div><div class="line">ClassUtils.<span class="title">getDefaultClassLoader</span><span class="params">()</span></div><div class="line"></div><div class="line"><span class="comment">// 获取方法个数</span></div><div class="line">org.springframework.util.ClassUtils#getMethodCountForName</div></pre></td></tr></table></figure>
<h2 id="Assert"><a href="#Assert" class="headerlink" title="Assert"></a>Assert</h2><p><code>断言</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Assert.notNull(intf, <span class="string">"Interface must not be null"</span>);</div><div class="line"></div><div class="line">Objects.requireNonNull(h)</div></pre></td></tr></table></figure>
<h2 id="arraycopy"><a href="#arraycopy" class="headerlink" title="arraycopy"></a>arraycopy</h2><p><code>数组拷贝</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.arraycopy(specifiedInterfaces, <span class="number">0</span>, proxiedInterfaces, <span class="number">0</span>, specifiedInterfaces.length);</div></pre></td></tr></table></figure>
<h2 id="WeakCache"><a href="#WeakCache" class="headerlink" title="WeakCache"></a>WeakCache</h2><p>Cache mapping pairs of {@code (key, sub-key) -&gt; value}</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WeakCache&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;</div><div class="line">        proxyClassCache = <span class="keyword">new</span> WeakCache&lt;&gt;(<span class="keyword">new</span> KeyFactory(), <span class="keyword">new</span> ProxyClassFactory());</div></pre></td></tr></table></figure>
<h2 id="StringUtils"><a href="#StringUtils" class="headerlink" title="StringUtils"></a>StringUtils</h2><h3 id="toStringArray"><a href="#toStringArray" class="headerlink" title="toStringArray"></a>toStringArray</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// String集合转数组</span></div><div class="line">StringUtils.toStringArray(resultList)</div></pre></td></tr></table></figure>
<h1 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h1><h1 id="BeanCreationException"><a href="#BeanCreationException" class="headerlink" title="BeanCreationException"></a>BeanCreationException</h1><p><code>org.springframework.beans.factory.BeanCreationException</code></p>
<h1 id="MyBatis-Spring"><a href="#MyBatis-Spring" class="headerlink" title="MyBatis-Spring"></a>MyBatis-Spring</h1><h2 id="SqlSessionTemplate事务支持"><a href="#SqlSessionTemplate事务支持" class="headerlink" title="SqlSessionTemplate事务支持"></a>SqlSessionTemplate事务支持</h2><p>SqlSessionTemplate 获取当前线程SqlSession（<code>SqlSessionUtils#getSqlSession</code>）</p>
<p>当前线程无SqlSession，则用SqlSessionFactory创建SqlSession；<br>创建SqlSession时通过Environment中TransactionFactory获取Transaction创建Executor（<code>DefaultSqlSessionFactory#openSessionFromDataSource</code>）<br>创建Statement时，通过Transaction获取连接(<code>SimpleExecutor#prepareStatement</code>)</p>
<p>SqlSessionFactory通过SqlSessionFactoryBean创建，默认使用SpringManagedTransaction（<code>SqlSessionFactoryBean#buildSqlSessionFactory</code>）</p>
<p>SpringManagedTransaction通过DataSourceUtils#getConnection获取Connection（<code>SpringManagedTransaction#getConnection</code>）</p>
<p>DataSourceUtils#getConnection通过TransactionSynchronizationManager.getResource使用<code>dataSource</code>获取<code>当前线程</code>的ConnectionHolder（<code>DataSourceUtils#getConnection</code>）</p>
<p>获取到的是Spring事务管理开启事务的Connection</p>
<blockquote>
<p>如果Spring注解@Transactional中value 指定事务管理器错误（不是<code>当前数据源</code>的事务管理器），Spring将使用该事务管理器开启事务<br>MyBatis执行时通过TransactionSynchronizationManager使用<code>数据源</code>获取当前线程Connection，<br>将从数据源中获取Connection，并通过SqlSessionUtils#isSqlSessionTransactional检查结果为不提交事务<br>导致事务不生效；如果defaultAutoCommit设置为false，数据将无法提交</p>
<p>源码参考：<br>org.springframework.transaction.interceptor.TransactionAspectSupport#invokeWithinTransaction<br>org.mybatis.spring.SqlSessionTemplate.SqlSessionInterceptor</p>
</blockquote>
<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><ul>
<li>ThemeResolver：主题解析器</li>
<li>HandlerMapping：处理器映射</li>
<li>handlerAdapter：处理器适配器</li>
<li>HandlerExceptionResolver：处理器异常解析器</li>
<li>RequestToViewNameTranslator：视图逻辑名称转换器</li>
<li><p>ViewResolver：视图解析器</p>
</li>
<li><p>HandlerExecutionChain</p>
</li>
</ul>
<h2 id="ServletContainerInitializer"><a href="#ServletContainerInitializer" class="headerlink" title="ServletContainerInitializer"></a>ServletContainerInitializer</h2><p><code>SpringServletContainerInitializer</code></p>
<blockquote>
<p>SpringMVC不使用web.xml配置，继承ServletContainerInitializer创建初始化类</p>
</blockquote>
<p>Servlet3.0之后允许取消web.xml，允许<code>动态加载Servlet</code>，需要实现ServletContainerInitializer</p>
<ul>
<li>Servlet容器启动会扫描，当前应用里面每一个jar包的ServletContainerInitializer的实现</li>
<li>实现类必须绑定在META-INF/services/javax.servlet.ServletContainerInitializer</li>
<li>可以给ServletContainerInitializer 的实现类添加 @HandlesTypes 注解</li>
<li>ServletContainerInitializer实现的onStartup方法将获取到ServletContext 和 @HandlesTypes 注解的实现类的集合</li>
</ul>
<blockquote>
<p>示例：SpringServletContainerInitializer<br>不使用xml配置SpringMVC参考继承AbstractAnnotationConfigDispatcherServletInitializer<br>SpringMVC动态添加Servlet使用WebApplicationInitializer</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerDispatcherServlet</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</div><div class="line">	String servletName = getServletName();</div><div class="line"></div><div class="line">	DispatcherServlet dispatcherServlet = <span class="keyword">new</span> DispatcherServlet(servletAppContext);</div><div class="line">	ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, dispatcherServlet);</div><div class="line"></div><div class="line">	registration.setLoadOnStartup(<span class="number">1</span>);</div><div class="line">	registration.addMapping(getServletMappings());</div><div class="line">	registration.setAsyncSupported(isAsyncSupported());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><ul>
<li>DeferredImportSelector</li>
<li>@Transactional注解中value指定Qualifier</li>
<li>父子容器中切面</li>
<li>包扫描</li>
</ul>
<blockquote>
<p>org.springframework.transaction.interceptor.TransactionInterceptor</p>
</blockquote>
<p>Cglib 无接口类proxy</p>
<ul>
<li>[ ] Advised</li>
<li>[ ] Advisor</li>
<li>[ ] SpringProxy</li>
<li>[ ] Advice</li>
<li>[ ] Interceptor</li>
</ul>
<p>PointcutAdvisor</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">((IntroductionAdvisor) advisor).getClassFilter().matches(targetClass);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Sriing </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高性能 MySQL]]></title>
      <url>http://xiaozhuang.github.io/2017/04/25/mysql/</url>
      <content type="html"><![CDATA[<p>MySQL 笔记<br><a id="more"></a></p>
<h1 id="创建高性能的索引"><a href="#创建高性能的索引" class="headerlink" title="创建高性能的索引"></a>创建高性能的索引</h1><p>索引是存储引擎用于快速找到记录的一种数据结构。</p>
<p>索引能够轻易将查询性能提高<code>几个数量级</code>，<br>“最优”的索引有时比一个“好的”索引性能好<code>两个数量级</code>。</p>
<p>创建一个真正“最优”的索引经常需要重写查询。</p>
<h2 id="索引基础"><a href="#索引基础" class="headerlink" title="索引基础"></a>索引基础</h2><h3 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h3><p>MySQL中，索引是在存储引擎层而不是服务器层实现的。</p>
<h4 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B-Tree索引"></a>B-Tree索引</h4><p>InnoDB使用B+Tree<br><img src="/2017/04/25/mysql/btreeIndexBtree.png" alt="btreeIndexBtree.png" title=""><br><blockquote><footer><strong>图片来源</strong><cite><a href="http://zhongmingmao.me/2017/05/13/innodb-btree-index/" target="_blank" rel="external">InnoDB备忘录B+Tree索引</a></cite></footer></blockquote></p>
<p>B+Tree，即每一个叶子节点都包含指向下一个叶子节点的指针，从而方便叶子节点的范围遍历。</p>
<p>B-Tree对索引列是<code>顺序</code>存储的，很适合查找范围数据。</p>
<p>B-Tree索引的查询类型：</p>
<ul>
<li>全值匹配</li>
<li>匹配最左前缀（只使用索引第一列）</li>
<li>匹配列前缀（只使用某一列索引开头部分）</li>
<li>匹配范围值</li>
<li>精确匹配某一列并范围匹配另外一列</li>
</ul>
<p>B-Tree索引的限制：</p>
<ul>
<li>不是按最左列开始查找，则无法使用索引</li>
<li>不能跳过索引中的列</li>
<li>查询中有某个列的范围查询，则其右边所有列都无法使用索引（可通过多个等于条件替换范围条件）</li>
</ul>
<blockquote>
<p>优化性能的时候，可能需要使用<code>相同的列</code>但<code>顺序不同</code>的索引来满足不同类型的查询需求</p>
</blockquote>
<h4 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h4><p>哈希索引基于哈希表实现</p>
<p>MySQL中只有Memory存储引擎显式支持哈希索引</p>
<p>哈希索引本身只需存储对应的哈希值和行指针，索引结构十分紧凑，<code>查找速度非常快</code>。</p>
<p>哈希索引限制：</p>
<ul>
<li>哈希索引只包含哈希值和行指针，不存储字段值，不能使用索引中的值避免读取行（性能影响不明显）</li>
<li>哈希索引数据不是按照<code>索引值顺序</code>存储的，也就无法用于排序</li>
<li>哈希索引不支持<code>部分索引列</code>匹配查找，因为哈希索引使用索引列全部内容计算哈希值</li>
<li>哈希索引只支持等值比较查询（包括=、IN()、&lt;=&gt;），不支持范围查询</li>
<li>哈希冲突很多的话，索引维护代价很高，查询速度降低</li>
</ul>
<blockquote>
<p><code>&lt;=&gt;</code> is MySQL’s null-safe “equal to” operator</p>
</blockquote>
<p>自定义哈希索引：<br>在B-Tree基础上创建伪哈希索引。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> <span class="keyword">url</span> <span class="keyword">where</span> <span class="keyword">url</span>=<span class="string">"http://www.mysql.com"</span>;</div></pre></td></tr></table></figure>
<p>新增一个被索引的url_crc列，使用CRC32做哈希(可以使用触发器实现)</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> <span class="keyword">url</span> <span class="keyword">where</span> <span class="keyword">url</span>=<span class="string">"http://www.mysql.com"</span></div><div class="line">	<span class="keyword">and</span> url_crc=<span class="keyword">CRC32</span>(<span class="string">"http://www.mysql.com"</span>)</div></pre></td></tr></table></figure>
<p>避免CRC32产生大量冲突，可以使用FNV64()作为哈希函数</p>
<blockquote>
<p>FNV64() 移植自PerconaServer的函数，<br>可以以插件的方式在任何MySQL版本中使用</p>
</blockquote>
<h2 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h2><ul>
<li>大大减少的服务器需要扫描的数据量</li>
<li>帮助服务器避免排序和临时表</li>
<li>将随机IO变为顺序IO</li>
</ul>
<p>如何评价一个索引是否合适某个查询（三星系统）：</p>
<ul>
<li>索引将<code>相关记录放在一起</code>则获得一星；</li>
<li>索引中数据顺序和查找中的排列顺序一致 则获得二星；</li>
<li>索引中的列 包含了查询中需要的全部列 则获得三星；</li>
</ul>
<p>索引是最好的解决方案吗?<br>非常小的表，全表扫描更高效<br>中到大型表，索引非常有效<br>TB级别的数据，定位单条记录的意义不大，经常使用块级别元数据技术替代索引。</p>
<h2 id="高性能的索引策略"><a href="#高性能的索引策略" class="headerlink" title="高性能的索引策略"></a>高性能的索引策略</h2><h3 id="独立的列"><a href="#独立的列" class="headerlink" title="独立的列"></a>独立的列</h3><p>如果查询中的列不是独立的，则MySQL就不会使用索引。</p>
<p>“独立的列”指索引列不能是表达式的一部分，也不能是函数的参数。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- where TO_DAYS(create_data) = 'xxx'</span></div><div class="line"><span class="keyword">SELECT</span> actor_id	</div><div class="line"><span class="keyword">FROM</span> actor</div><div class="line"><span class="keyword">WHERE</span> actor_id + <span class="number">1</span> = <span class="number">5</span></div></pre></td></tr></table></figure>
<h3 id="前缀索引和索引选择性"><a href="#前缀索引和索引选择性" class="headerlink" title="前缀索引和索引选择性"></a>前缀索引和索引选择性</h3><p>索引很长的字符列，会让索引变得大且慢。</p>
<p>可索引开始的部分字符，以大大节约索引空间，从而提高索引效率。</p>
<p>对于blob、text或很长的varchar类型的列，必须使用前缀索引。</p>
<p>选择足够长的前缀以保证较高的选择性。</p>
<p>选择性：不重复的索引值和数据表的记录总数的比值。</p>
<p>使前缀选择性接近完整列选择性：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 计算完整列选择性</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">DISTINCT</span> city)/<span class="keyword">COUNT</span>(*) <span class="keyword">from</span> sakila.city_demo;</div><div class="line"></div><div class="line"><span class="comment">-- 计算前缀选择性</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> <span class="keyword">LEFT</span>(city, <span class="number">6</span>))/<span class="keyword">COUNT</span>(*) <span class="keyword">as</span> sel6,</div><div class="line"><span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> <span class="keyword">LEFT</span>(city, <span class="number">7</span>))/<span class="keyword">COUNT</span>(*) <span class="keyword">as</span> sel7</div><div class="line"><span class="keyword">from</span> sakila.city_demo;</div></pre></td></tr></table></figure>
<p>创建前缀索引：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert table sakila.city_demo ADD Key (city(7));</div></pre></td></tr></table></figure>
<blockquote>
<p>有时候后缀索引也有用途，如查找某个域名的所有电子邮件；<br>MySQL不支持反向索引，需把字符串反转后存储，并建立索引，可使用触发器实现。</p>
</blockquote>
<h3 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h3><p>在多个列上建立独立的单列索引大部分情况下并不能提高MySQL的查询性能。</p>
<p>MySQL5.0及更新版本引入了“索引合并”策略，<br>查询能够使用两个单列索引进行扫描，并将结果进行合并。</p>
<p>通过Explain的Extra列可以看到嵌套操作。</p>
<p>索引合并策略有时候是一种优化结果，<br>更多时候说明表上的索引建立的很糟糕。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 关闭索引合并优化</span></div><div class="line"><span class="keyword">set</span> <span class="keyword">global</span> optimizer_switch=<span class="string">"index_merge=off"</span></div><div class="line"></div><div class="line"><span class="comment">-- 禁止某个索引（force index(索引名或者主键PRI)）</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">ignore</span> <span class="keyword">index</span>(PRI) <span class="keyword">limit</span> <span class="number">2</span>;</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">ignore</span> <span class="keyword">index</span>(ziduan1_index) <span class="keyword">limit</span> <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="comment">-- 强制使用索引（force index(索引名或者主键PRI)）</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">force</span> <span class="keyword">index</span>(PRI) <span class="keyword">limit</span> <span class="number">2</span>;</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">force</span> <span class="keyword">index</span>(ziduan1_index) <span class="keyword">limit</span> <span class="number">2</span>;</div></pre></td></tr></table></figure>
<p>部分场景中使用Index Merge存在性能问题<br>优先考虑如何避免SQL使用INDEX MERGER,<br>一个办法就是修改SQL让其只能使用其中一个索引</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 避免走索引（函数,MySQL不会使用该列索引）</span></div><div class="line">AND CONCAT(P.OUTBOUND_NO,’’) = 'CSLxxxxxxxxxxxxxxxxxx'</div></pre></td></tr></table></figure>
<h3 id="选择合适的索引顺序"><a href="#选择合适的索引顺序" class="headerlink" title="选择合适的索引顺序"></a>选择合适的索引顺序</h3><p>当不需要考虑排序和分组时，将选择性最高的列放在最前面通常是很好的。</p>
<p>可能需要根据运行频率最高的查询来调整索引列的顺序，<br>让这种情况下索引的选择性最高。</p>
<h3 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h3><p>聚簇索引是一种数据存储方式。</p>
<p>InnoDB的聚簇索引实际上在<code>同一结构</code>中保存了B-Tree<code>索引</code>和<code>数据行</code>。</p>
<p>表有聚簇索引时，它的<code>数据行</code>实际上存放在索引的<code>叶子页</code>中。</p>
<p>InnoDB通过主键聚集数据，二级索引的叶子节点存储的不是“行指针”而是主键值。</p>
<h4 id="聚簇索引优点："><a href="#聚簇索引优点：" class="headerlink" title="聚簇索引优点："></a>聚簇索引优点：</h4><ul>
<li>可以把相关数据放在一起</li>
<li>数据访问更快（索引和数据保存在同一个B-Tree中）</li>
<li>覆盖索引扫描的查询可以直接使用叶子节点中的主键值</li>
</ul>
<h4 id="聚簇索引缺点："><a href="#聚簇索引缺点：" class="headerlink" title="聚簇索引缺点："></a>聚簇索引缺点：</h4><ul>
<li>插入速度严重依赖插入顺序</li>
<li>更新主键代价高（InnoDB会将每个被更新行移动到新位置）</li>
<li>插入新行或更新主键，可能面临“页分裂”问题</li>
<li>可能导致全表扫描变慢</li>
<li>二级索引可能较大（包含引用行主键）</li>
<li>二级索引访问需要两次索引查找</li>
</ul>
<h4 id="InnoDB表中按主键顺序插入行"><a href="#InnoDB表中按主键顺序插入行" class="headerlink" title="InnoDB表中按主键顺序插入行"></a>InnoDB表中按主键顺序插入行</h4><p>InnoDB按主键顺序插入数据速度最快。</p>
<p>使用auto_increment自增列可以保证数据行按顺序写入，<br>根据主键做关联操作性能也会更好。</p>
<p>InnoDB默认的填充因子为页大小的15/16，留出部分空间用于以后修改。</p>
<p>InnoDB应该尽可能按主键顺序插入数据，<br>并尽可能使用单调递增的主键插入新行。</p>
<h4 id="UUID聚簇索引缺点"><a href="#UUID聚簇索引缺点" class="headerlink" title="UUID聚簇索引缺点"></a>UUID聚簇索引缺点</h4><ul>
<li>写入的目标页可能不在缓存中，导致大量随机I/O</li>
<li>写入是乱序的，InnoDB频繁做页分裂操作，以便为新行分配空间（页分裂导致移动大量数据）</li>
<li>频繁页分裂，页会变得稀疏并不规则地填充，最终会有碎片</li>
</ul>
<p>从性能角度考虑，使用UUID作为聚簇索引会很糟糕（空间占用、页分裂、碎片）。<br>不按主键顺序插入数据，完成后最好使用optimize table命令重新组织一下表。</p>
<h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>一个索引包含所有需要查询的字段的值，称之为“覆盖索引”</p>
<p>由于InnoDB的聚簇索引，覆盖索引对InnnoDB表特别有用。<br>二级索引叶子节点保存行的主键，<br>如果二级索引能够覆盖查询，可以避免对主键索引的二次查询。</p>
<p>MySQL只能使用B-Tree索引做覆盖索引。</p>
<p>索引覆盖查询，在explain的extra列可以看到<code>Using Index</code>信息。</p>
<p>InnoDB二级索引叶子节点包含主键值，<br>二级索引可以有效地利用这些“额外”的主键来覆盖查询。</p>
<p>延迟关联：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> actor = <span class="string">'SEAN CARREY'</span></div><div class="line"><span class="keyword">AND</span> title <span class="keyword">like</span> <span class="string">'%APOLLO%'</span></div></pre></td></tr></table></figure>
<p>MySQL能在索引中做<code>最左前缀</code>匹配的LIKE比较（通配符开头LIKE不使用索引），<br>故该SQL只是用actor索引。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> <span class="string">`products`</span></div><div class="line"><span class="keyword">JOIN</span>(</div><div class="line">	<span class="keyword">select</span> <span class="string">`prod_id`</span></div><div class="line">	<span class="keyword">from</span> <span class="string">`products`</span></div><div class="line">	<span class="string">`actor`</span> = <span class="string">'SEAN CARREY'</span> <span class="keyword">AND</span> <span class="string">`title`</span> <span class="keyword">like</span> <span class="string">'%APOLLO%'</span></div><div class="line">) <span class="keyword">as</span> t1 <span class="keyword">on</span> (t1.<span class="string">`prod_id`</span> = <span class="string">`products`</span>.<span class="string">`prod_id`</span>)</div></pre></td></tr></table></figure>
<p>子查询使用覆盖索引（actor、title、prod_id）执行like过滤，较少数据行访问</p>
<p>使用延迟关联优化limit分页：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="string">`cols`</span> <span class="keyword">from</span> <span class="keyword">profiles</span> <span class="keyword">JOIN</span>(</div><div class="line">	<span class="keyword">select</span> <span class="string">`primary_key`</span> <span class="keyword">from</span> <span class="keyword">profiles</span></div><div class="line">	<span class="keyword">where</span> <span class="string">`x`</span>.<span class="string">`sex`</span> = <span class="string">'M'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> rating <span class="keyword">limit</span> <span class="number">10000</span>, <span class="number">10</span> </div><div class="line">) <span class="keyword">AS</span> <span class="string">`x`</span> <span class="keyword">USING</span>(<span class="string">'primary_key'</span>)</div></pre></td></tr></table></figure>
<h3 id="使用索引扫描来做排序"><a href="#使用索引扫描来做排序" class="headerlink" title="使用索引扫描来做排序"></a>使用索引扫描来做排序</h3><p>MySQL中两种方式生成有序结果：</p>
<ul>
<li>排序操作</li>
<li>按索引顺序扫描</li>
</ul>
<p>只有当索引的列顺序和ORDER BY子句的顺序<code>完全一致</code>，并且所有列的排序方向都一样时，<br>才能够使用索引来对结果做排序。</p>
<p>查询需要关联多张表，只有当ORDER BY子句引用的字段<code>全部为第一个表</code>时，才能使用索引做排序。</p>
<blockquote>
<p>索引列都是正序排序的</p>
</blockquote>
<h3 id="冗余和重复索引"><a href="#冗余和重复索引" class="headerlink" title="冗余和重复索引"></a>冗余和重复索引</h3><p>重复索引：<code>相同列</code>上按照<code>相同的顺序</code>创建的相同类型的索引。</p>
<p>应该避免创建重复索引，发现时也应该立即移除。</p>
<p>大多数情况下都不需要冗余索引，应该尽量扩展已有索引而不是创建新索引。</p>
<p>表中索引越多插入速度越慢。</p>
<h3 id="未使用的索引"><a href="#未使用的索引" class="headerlink" title="未使用的索引"></a>未使用的索引</h3><p>pt-index-usage分析查询日志，找出未使用的索引</p>
<h3 id="索引和锁"><a href="#索引和锁" class="headerlink" title="索引和锁"></a>索引和锁</h3><p>索引可以让查询锁定更少的行</p>
<p>InnoDB只有访问行时才会加锁，索引能减少InnoDB访问的行数</p>
<p>InnoDB在二级索引上使用共享锁，访问主键索引需要排他锁</p>
<h3 id="索引注意事项"><a href="#索引注意事项" class="headerlink" title="索引注意事项"></a>索引注意事项</h3><p>查询类型不一致，隐式类型转换，不走索引；<br>在索引列上使用函数，该列不走索引；</p>
<h2 id="索引案例学习"><a href="#索引案例学习" class="headerlink" title="索引案例学习"></a>索引案例学习</h2><h3 id="支持多种过滤条件"><a href="#支持多种过滤条件" class="headerlink" title="支持多种过滤条件"></a>支持多种过滤条件</h3><p>可以在索引中加入更多列，并通过IN()的方式覆盖那些不在WHERE子句中的列。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 通过添加覆盖所有值的in条件，以满足不跳过索引中列的条件</span></div><div class="line">where `sex` IN('M' , 'F')</div></pre></td></tr></table></figure>
<blockquote>
<p>IN()列很多时，会影响查询优化器效率</p>
</blockquote>
<h3 id="避免多个范围条件"><a href="#避免多个范围条件" class="headerlink" title="避免多个范围条件"></a>避免多个范围条件</h3><p>如：查询几周上线过的用户，可以事先计算好active列，并由定时任务维护。</p>
<h1 id="查询性能优化"><a href="#查询性能优化" class="headerlink" title="查询性能优化"></a>查询性能优化</h1><p>查询生命周期：<br>从客户端到服务器，在服务器上进行解析，生成执行计划，执行，并返回结果给客户端。</p>
<h2 id="慢查询基础：优化数据访问"><a href="#慢查询基础：优化数据访问" class="headerlink" title="慢查询基础：优化数据访问"></a>慢查询基础：优化数据访问</h2><h3 id="取出全部列"><a href="#取出全部列" class="headerlink" title="取出全部列"></a>取出全部列</h3><p>使用<code>select *</code>时需确认是否真的需要全部列</p>
<p>如果程序使用某种缓存机制，获取超过需要的数据可能有其好处。</p>
<h3 id="是否在扫描额外的记录"><a href="#是否在扫描额外的记录" class="headerlink" title="是否在扫描额外的记录"></a>是否在扫描额外的记录</h3><p>衡量查询开销的三个指标：</p>
<ul>
<li>响应时间</li>
<li>扫描的行数</li>
<li>返回的行数</li>
</ul>
<p>MySQL应用where条件的三种方式，从好到坏依次是：</p>
<ul>
<li>索引中使用where条件过滤不匹配元素</li>
<li>覆盖索引扫描返回记录，然后过滤（Extra，Using index）</li>
<li>从数据表返回数据，然后过滤（Extra，Using where）</li>
</ul>
<h2 id="重构查询的方式"><a href="#重构查询的方式" class="headerlink" title="重构查询的方式"></a>重构查询的方式</h2><h3 id="切分查询"><a href="#切分查询" class="headerlink" title="切分查询"></a>切分查询</h3><p>定期清除大量数据：一次删除1w行一般来说是比较高效而且对服务器影响较小的做法。</p>
<p>每次删除数据后，暂停一会儿，可将原本一次性的压力分散到一个很长的时间段中。</p>
<h3 id="分解关联查询"><a href="#分解关联查询" class="headerlink" title="分解关联查询"></a>分解关联查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`tag`</span></div><div class="line">	<span class="keyword">JOIN</span> <span class="string">`tag_post`</span> <span class="keyword">ON</span> <span class="string">`tag_post`</span>.<span class="string">`tag_id`</span> = <span class="string">`tag`</span>.<span class="string">`id`</span></div><div class="line">	<span class="keyword">JOIN</span> <span class="string">`post`</span> <span class="keyword">ON</span> <span class="string">`tag_post`</span>.<span class="string">`id`</span> = <span class="string">`post`</span>.<span class="string">`id`</span></div><div class="line"><span class="keyword">Where</span> <span class="string">`tag`</span>.<span class="string">`tag`</span> = <span class="string">'mysql'</span></div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`tag`</span> <span class="keyword">where</span> <span class="string">`tag`</span> = <span class="string">'mysql'</span>;</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`tag_post`</span> <span class="keyword">where</span> <span class="string">`tag_id`</span> = <span class="string">'1234'</span>;</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`post`</span> <span class="keyword">where</span> <span class="string">`post`</span>.<span class="string">`id`</span> <span class="keyword">in</span> (<span class="number">123</span>, <span class="number">356</span>, <span class="number">567</span>, <span class="number">9098</span>, <span class="number">8904</span>);</div></pre></td></tr></table></figure>
<p><code>分解关联查询</code>优势：</p>
<ul>
<li>让缓存更高效（许多应用可以方便地缓存<code>单表查询</code>的结果对象）</li>
<li>分解后，执行单个查询减少锁竞争</li>
<li>在应用层做关联，容易对数据库进行拆分</li>
<li>相当于在应用中实现哈希关联</li>
</ul>
<p>应用场景：</p>
<ul>
<li>能够方便缓存单个查询结果时</li>
<li>可以将数据分布到不同MySQL服务器上时</li>
<li>能够使用IN()替换关联查询时</li>
<li>使用同一数据表时</li>
</ul>
<h2 id="查询执行的基础"><a href="#查询执行的基础" class="headerlink" title="查询执行的基础"></a>查询执行的基础</h2><h3 id="MySQL客户端-服务器通信协议"><a href="#MySQL客户端-服务器通信协议" class="headerlink" title="MySQL客户端/服务器通信协议"></a>MySQL客户端/服务器通信协议</h3><p>通信协议是<code>半双工</code>的:要么服务器向客户端发送数据，要么客户端向服务器发送数据。</p>
<p>客户端用一个<code>单独的</code>数据包将查询传递给服务器。<br>查询语句很长时，参数<code>max_allowed_packet</code>就特别重要了。</p>
<p>服务器响应给客户的数据通常很多，由<code>多个数据包</code>组成。<br>服务器开始响应客户端请求时，客户端必须完整地接收整个返回结果，而不能简单的只取前几条结果。</p>
<p>客户端从服务器取数据时，实际上是MySQL向客户端<code>推送</code>数据的过程。</p>
<h3 id="查询优化器"><a href="#查询优化器" class="headerlink" title="查询优化器"></a>查询优化器</h3><p>优化器将合法的语法树，转化成执行计划。</p>
<p>一条查询可以有很<code>多种执行方式</code>，最后返回相同结果。优化器的作用是找到其中最好的执行计划。</p>
<p>查询当前会话的<code>last_query_cost</code>，得知MySQL计算的当前查询的成本</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> SQL_NO_CACHE <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> <span class="string">`person`</span></div><div class="line"></div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">STATUS</span> <span class="keyword">LIKE</span> <span class="string">'last_query_cost'</span></div></pre></td></tr></table></figure>
<p>MySQL如何执行关联查询：<code>嵌套循环关联</code><br>MySQL先在一个表中循环取出单条数据，然后再嵌套循环到下一个表中寻找匹配的行，<br>以此下去，直到找到所有表中匹配的行为止。<br>然后根据各个表匹配的行，返回查询中所需要的各个列。</p>
<h3 id="排序优化"><a href="#排序优化" class="headerlink" title="排序优化"></a>排序优化</h3><p>MySQL中两种排序算法：</p>
<p>两次传输排序（旧版本使用）：<br>读取行指针和需要排序的字段，对其进行排序，然后再根据排序后的结果读取所需要的数据行。</p>
<p>单次传输排序（新版本使用）：<br>先读取查询所需的所有列，然后再根据给定的列进行排序，最后直接返回排序结果。</p>
<p>当查询需要所有列的总长度不超过参数<code>max_length_for_sort_data</code>,MySQL则使用<code>单次传输排序</code></p>
<p>MySQL进行文件排序时需要使用的<code>临时存储空间</code>可能<code>比想象的要大得多</code>。<br>MySQL在排序时，对每一个排序记录都会分配一个足够长的<code>定长空间</code>来存放，<br>这个定长空间必须足够长以容纳其中<code>最长</code>的字符串。</p>
<p>MySQL中分两种情况处理关联查询文件排序：<br>ORDER BY子句中所有列都来自关联的第一个表，关联处理第一个表的时候进行文件排序（Extra，Using filesort）。</p>
<p>除此之外的所有情况，MySQL先将关联的结果存放到一个临时表，再进行文件排序（Extra，Using temporary；Using filesort）。</p>
<h2 id="MySQL查询优化器的局限性"><a href="#MySQL查询优化器的局限性" class="headerlink" title="MySQL查询优化器的局限性"></a>MySQL查询优化器的局限性</h2><h3 id="关联子查询"><a href="#关联子查询" class="headerlink" title="关联子查询"></a>关联子查询</h3><h4 id="最糟糕的一类查询是WHERE条件中包含IN-的子查询语句"><a href="#最糟糕的一类查询是WHERE条件中包含IN-的子查询语句" class="headerlink" title="最糟糕的一类查询是WHERE条件中包含IN()的子查询语句"></a>最糟糕的一类查询是WHERE条件中包含IN()的子查询语句</h4><p><code>《高性能MySQL第3版》示例，MySQL5.6.26、5.7.11实验未复现</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="string">`film`</span>.* <span class="keyword">FROM</span> <span class="string">`sakila`</span>.<span class="string">`film`</span></div><div class="line"><span class="keyword">WHERE</span> <span class="string">`film_id`</span> <span class="keyword">IN</span> (</div><div class="line">  <span class="keyword">SELECT</span> <span class="string">`film_id`</span> <span class="keyword">FROM</span> <span class="string">`sakila`</span>.<span class="string">`film_actor`</span> <span class="keyword">WHERE</span> <span class="string">`actor_id`</span> = <span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>IN子查询会被MySQL改写，且因为第二个子查询使用第一个查询film_id，导致第一个表全扫描</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="string">`film`</span>.* <span class="keyword">FROM</span> <span class="string">`sakila`</span>.<span class="string">`film`</span></div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (</div><div class="line">  <span class="keyword">SELECT</span> <span class="string">`film_id`</span> <span class="keyword">FROM</span> <span class="string">`sakila`</span>.<span class="string">`film_actor`</span> <span class="keyword">WHERE</span> <span class="string">`actor_id`</span> = <span class="number">1</span></div><div class="line">  <span class="keyword">AND</span> <span class="string">`film`</span>.<span class="string">`film_id`</span> = <span class="string">`film_actor`</span>.<span class="string">`film_id`</span>)</div></pre></td></tr></table></figure>
<p>优化方式1（内连接）：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="string">`film`</span>.*</div><div class="line"><span class="keyword">FROM</span> <span class="string">`sakila`</span>.<span class="string">`film`</span></div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`sakila`</span>.<span class="string">`film_actor`</span> <span class="keyword">USING</span>(film_id)</div><div class="line"><span class="keyword">WHERE</span> actor_id = <span class="number">1</span>;</div></pre></td></tr></table></figure>
<p>优化方式2（GROUP_CONCAT）：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`sakila`</span>.<span class="string">`film`</span></div><div class="line"><span class="keyword">WHERE</span> FIND_IN_SET(<span class="string">`film_id`</span>,</div><div class="line">  (<span class="keyword">SELECT</span> <span class="keyword">GROUP_CONCAT</span>(<span class="string">`film_id`</span>) <span class="keyword">FROM</span> <span class="string">`sakila`</span>.<span class="string">`film_actor`</span> <span class="keyword">WHERE</span> <span class="string">`actor_id`</span> = <span class="number">1</span>))</div></pre></td></tr></table></figure>
<h4 id="如何用好关联子查询"><a href="#如何用好关联子查询" class="headerlink" title="如何用好关联子查询"></a>如何用好关联子查询</h4><p>如果有人跟你说：“别用关联子查询”，那么不要理他。<br>先测试，然后做出自己的判断。</p>
<p>很多时候，关联子查询是一种非常合理、自然，甚至性能最好的写法。</p>
<p>查询有演员的电影：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">  <span class="keyword">DISTINCT</span> <span class="string">`film`</span>.<span class="string">`film_id`</span></div><div class="line"><span class="keyword">FROM</span></div><div class="line">  <span class="string">`sakila`</span>.<span class="string">`film`</span></div><div class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`sakila`</span>.<span class="string">`film_actor`</span> <span class="keyword">USING</span> (<span class="string">`film_id`</span>)</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">  <span class="string">`film`</span>.<span class="string">`film_id`</span></div><div class="line"><span class="keyword">FROM</span></div><div class="line">  <span class="string">`sakila`</span>.<span class="string">`film`</span></div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(</div><div class="line">   <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`sakila`</span>.<span class="string">`film_actor`</span> <span class="keyword">WHERE</span> <span class="string">`film_actor`</span>.<span class="string">`film_id`</span> = <span class="string">`film`</span>.<span class="string">`film_id`</span></div><div class="line">)</div></pre></td></tr></table></figure>
<blockquote>
<p>《高性能MySQL第3版》介绍，关联子查询效率更高；EXPLAIN显示第一个查询用到了临时表</p>
</blockquote>
<ul>
<li>不需要听取那些关于子查询的<code>“绝对真理”</code></li>
<li>应该用<code>测试验证</code>对子查询的执行计划和响应时间的假设</li>
</ul>
<h3 id="同一个表上同时查询和更新"><a href="#同一个表上同时查询和更新" class="headerlink" title="同一个表上同时查询和更新"></a>同一个表上同时查询和更新</h3><p>MySQL不允许对同一张表同时进行查询和更新。</p>
<p>可使用<code>生成表</code>的形势绕过该限制。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> tb1</div><div class="line">	<span class="keyword">inner</span> <span class="keyword">join</span> (</div><div class="line">		<span class="keyword">select</span> <span class="string">`type`</span>, <span class="keyword">count</span>(*) <span class="keyword">AS</span> <span class="keyword">count</span></div><div class="line">		<span class="keyword">from</span> <span class="string">`tb1`</span></div><div class="line">		<span class="keyword">group</span> <span class="keyword">by</span> <span class="string">`type`</span>) <span class="keyword">as</span> <span class="string">`der`</span> <span class="keyword">using</span>(<span class="string">`type`</span>)</div><div class="line"><span class="keyword">set</span> <span class="string">`tb1`</span>.<span class="string">`cnt`</span> = <span class="string">`der`</span>.<span class="string">`cnt`</span>;</div></pre></td></tr></table></figure>
<p>执行了2个查询：</p>
<ul>
<li>子查询中SELECT语句</li>
<li>多表关联UPDATE，关联的表时临时表</li>
</ul>
<h2 id="优化特定类型的查询"><a href="#优化特定类型的查询" class="headerlink" title="优化特定类型的查询"></a>优化特定类型的查询</h2><h3 id="优化COUNT-查询"><a href="#优化COUNT-查询" class="headerlink" title="优化COUNT()查询"></a>优化COUNT()查询</h3><p>COUNT()的作用：</p>
<ul>
<li>统计某列值的数量</li>
<li>统计行数</li>
</ul>
<p>统计列值时，要求列值<code>是非空的</code>（不统计NULL）</p>
<p>COUNT(*) 会忽略所有列的值，直接统计所有的行数</p>
<p>统计颜色数量：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 1.使用sum()</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(<span class="keyword">IF</span>(<span class="string">`color`</span> = <span class="string">'blue'</span>, <span class="number">1</span>, <span class="number">0</span>)) <span class="keyword">AS</span> <span class="string">`blue`</span>, <span class="keyword">SUM</span>(<span class="keyword">IF</span>(<span class="string">`color`</span> = <span class="string">'red'</span>, <span class="number">1</span>, <span class="number">0</span>)) <span class="keyword">AS</span> <span class="string">`red`</span></div><div class="line"><span class="keyword">FROM</span> <span class="string">`items`</span></div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(<span class="string">`color`</span> = <span class="string">'blue'</span>) <span class="keyword">AS</span> <span class="string">`blue`</span>, <span class="keyword">SUM</span>(<span class="string">`color`</span> = <span class="string">'red'</span>) <span class="keyword">AS</span> <span class="string">`red`</span></div><div class="line"><span class="keyword">FROM</span> <span class="string">`items`</span></div><div class="line"></div><div class="line"><span class="comment">-- 2.使用count()</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="string">`color`</span> = <span class="string">'blue'</span> <span class="keyword">OR</span> <span class="literal">NULL</span>), <span class="keyword">COUNT</span>(<span class="string">`color`</span> = <span class="string">'red'</span> <span class="keyword">OR</span> <span class="literal">NULL</span>)</div><div class="line"><span class="keyword">FROM</span> <span class="string">`items`</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Why do I need “OR NULL” in MySQL when counting rows with a condition</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="number">4</span>=<span class="number">4</span>, <span class="number">3</span>=<span class="number">4</span>, <span class="number">1</span> <span class="keyword">or</span> <span class="literal">null</span>, <span class="number">0</span> <span class="keyword">or</span> <span class="literal">null</span></div><div class="line"><span class="comment">-- 1   |   0   |   1   |   NULL</span></div></pre></td></tr></table></figure>
<p>COUNT adds up the columns / expressions that evaluate to NOT NULL.</p>
<h3 id="优化关联查询"><a href="#优化关联查询" class="headerlink" title="优化关联查询"></a>优化关联查询</h3><ul>
<li>确保on或者using子句中的列上有索引（一般只需关联顺序中<code>第二个表</code>相应列上创建索引）</li>
<li>确保任何group by和order by表达式只涉及一个表中的列（这样才能使用索引优化）</li>
</ul>
<h3 id="优化子查询"><a href="#优化子查询" class="headerlink" title="优化子查询"></a>优化子查询</h3><p>建议: 尽可能使用关联查询替代。</p>
<p>子查询需要创建和填充<code>临时表</code>，而子查询中创建的临时表是<code>没有任何索引</code>的。</p>
<h3 id="优化group-by-和-distinct"><a href="#优化group-by-和-distinct" class="headerlink" title="优化group by 和 distinct"></a>优化group by 和 distinct</h3><p>采用查找表的<code>标识列</code>分组的效率会比其他列更高。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="string">`actor`</span>.<span class="string">`first_name`</span>,<span class="string">`actor`</span>.<span class="string">`last_name`</span>,<span class="keyword">COUNT</span>(*)</div><div class="line"><span class="keyword">FROM</span> <span class="string">`film_actor`</span></div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`actor`</span> <span class="keyword">USING</span>(<span class="string">`actor_id`</span>)</div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="string">`actor`</span>.<span class="string">`first_name`</span>,<span class="string">`actor`</span>.<span class="string">`last_name`</span></div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="string">`actor`</span>.<span class="string">`first_name`</span>,<span class="string">`actor`</span>.<span class="string">`last_name`</span></div><div class="line"><span class="keyword">FROM</span> <span class="string">`actor`</span> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> (</div><div class="line">   <span class="keyword">SELECT</span> <span class="string">`actor_id`</span>,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="string">`cnt`</span> <span class="keyword">FROM</span> <span class="string">`film_actor`</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="string">`actor_id`</span></div><div class="line">)<span class="keyword">AS</span> <span class="string">`t2`</span> <span class="keyword">USING</span>(<span class="string">`actor_id`</span>)</div></pre></td></tr></table></figure>
<p>分组查询的select中直接使用<code>非分组列</code>通常都不是什么好主意，<br>因为这样的结果通常是<code>不确定的</code>。</p>
<p>建议将MySQL的SQL_MODE设置为：<code>ONLY_FULL_GROUP_BY</code></p>
<p>使用group by子句时，若<code>无</code>order by子句，结果会按分组字段排序；<br>可在group by子句中使用desc或asc；<br>可使用order by null，不再进行排序；</p>
<h3 id="优化LIMIT分页"><a href="#优化LIMIT分页" class="headerlink" title="优化LIMIT分页"></a>优化LIMIT分页</h3><p>方式1：使用覆盖索引扫描，然后关联操作返回所需列。（延迟关联）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="string">`cols`</span> <span class="keyword">from</span> <span class="keyword">profiles</span> <span class="keyword">JOIN</span>(</div><div class="line">	<span class="keyword">select</span> <span class="string">`primary_key`</span> <span class="keyword">from</span> <span class="keyword">profiles</span></div><div class="line">	<span class="keyword">where</span> <span class="string">`x`</span>.<span class="string">`sex`</span> = <span class="string">'M'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> rating <span class="keyword">limit</span> <span class="number">10000</span>, <span class="number">10</span> </div><div class="line">) <span class="keyword">AS</span> <span class="string">`x`</span> <span class="keyword">USING</span>(<span class="string">'primary_key'</span>)</div></pre></td></tr></table></figure>
<p>方式2：存储排名</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="string">`film_id`</span>,<span class="string">`description`</span></div><div class="line"><span class="keyword">FROM</span> <span class="string">`sakila`</span>.<span class="string">`film`</span></div><div class="line"><span class="keyword">WHERE</span> <span class="string">`position`</span> <span class="keyword">BETWEEN</span> <span class="number">50</span> <span class="keyword">AND</span> <span class="number">54</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`position`</span></div></pre></td></tr></table></figure>
<h3 id="优化union查询"><a href="#优化union查询" class="headerlink" title="优化union查询"></a>优化union查询</h3><p>MySQL<code>总是</code>通过创建并填充<code>临时表</code>的方式来执行UNION查询。</p>
<p>除非确实需要服务器消除重复行，否则一定要使用<code>union all</code>。</p>
<p>如果没有ALL关键字，MySQL会给临时表加上distinct，导致临时表的数据做唯一性检查。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> aid,title <span class="keyword">FROM</span> article </div><div class="line"><span class="keyword">UNION</span> ALL </div><div class="line"><span class="keyword">SELECT</span> bid,title <span class="keyword">FROM</span> blog</div></pre></td></tr></table></figure>
<h3 id="静态查询分析"><a href="#静态查询分析" class="headerlink" title="静态查询分析"></a>静态查询分析</h3><p>pt-query-advisor分析查询日志、分析查询模式，<br>然后给出所有可能存在潜在问题的查询，并给出足够详细的建议。</p>
<h3 id="使用用户自定义变量"><a href="#使用用户自定义变量" class="headerlink" title="使用用户自定义变量"></a>使用用户自定义变量</h3><p>用户自定义变量是一个用来存储内容的<code>临时容器</code>，在连接MySQL的整个过程中都存在。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> @min_actor := (<span class="keyword">SELECT</span> <span class="keyword">MIN</span>(<span class="string">`actor_id`</span>) <span class="keyword">FROM</span> <span class="string">`actor`</span>);</div></pre></td></tr></table></figure>
<p>避免重复查询刚刚更新的数据：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> <span class="string">`person`</span> <span class="keyword">SET</span> <span class="string">`last_update`</span> = <span class="keyword">NOW</span>() <span class="keyword">WHERE</span> <span class="string">`id`</span> = <span class="string">'4'</span> <span class="keyword">AND</span> @tmp_name := <span class="keyword">NOW</span>();</div><div class="line"><span class="comment">-- 查询用户自定义变量，不用查询任何数据表，速度很快</span></div><div class="line"><span class="keyword">SELECT</span> @tmp_name;</div></pre></td></tr></table></figure>
<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="查看建表语句"><a href="#查看建表语句" class="headerlink" title="查看建表语句"></a>查看建表语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 查看数据库表</span></div><div class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</div><div class="line"><span class="comment">-- 查看建表语句</span></div><div class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> &lt;table_neme&gt;</div></pre></td></tr></table></figure>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="ROUND"><a href="#ROUND" class="headerlink" title="ROUND()"></a>ROUND()</h2><p>四舍五入</p>
<h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><table>
<thead>
<tr>
<th>函数</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>NOW()</td>
<td>2008-12-29 16:25:46</td>
</tr>
<tr>
<td>CURDATE()</td>
<td>2008-12-29</td>
</tr>
<tr>
<td>CURTIME()</td>
<td>16:25:46</td>
</tr>
</tbody>
</table>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts_e = ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)</div></pre></td></tr></table></figure>
<h2 id="时间计算"><a href="#时间计算" class="headerlink" title="时间计算"></a>时间计算</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> (<span class="keyword">NOW</span>()-<span class="built_in">INTERVAL</span> <span class="number">10</span> <span class="keyword">MINUTE</span>)</div></pre></td></tr></table></figure>
<h2 id="时间精度"><a href="#时间精度" class="headerlink" title="时间精度"></a>时间精度</h2><p>MySQL在5.6.4以及更高版本提供了对秒以下精度时间的存储支持，在以前的版本是会将秒以下的精度忽略掉的。<br>TIME、TIMESTAMP、DATETIME均提供了小数点后6位的支持（微秒）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> fractest( c1 <span class="keyword">TIME</span>(<span class="number">2</span>), c2 DATETIME(<span class="number">2</span>), c3 <span class="keyword">TIMESTAMP</span>(<span class="number">2</span>) );</div></pre></td></tr></table></figure>
<h2 id="MySQL版本区别5-5与5-7之DEFAULT-CURRENT-TIMESTAMP"><a href="#MySQL版本区别5-5与5-7之DEFAULT-CURRENT-TIMESTAMP" class="headerlink" title="MySQL版本区别5.5与5.7之DEFAULT CURRENT_TIMESTAMP"></a>MySQL版本区别5.5与5.7之DEFAULT CURRENT_TIMESTAMP</h2><p>在5.5到5.6.4版本里，对于DEFAULT CURRENT_TIMESTAMP子句，只能TIMESTAMP类型列上指定。<br>而从5.6.5开始（也包括5.7），DEFAULT CURRENT_TIMESTAMP子句可以指定到TIMESTAMP或者DATETIME类型列</p>
<h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><h3 id="建表添加分区"><a href="#建表添加分区" class="headerlink" title="建表添加分区"></a>建表添加分区</h3><p>分区字段与Id作联合主键</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`waybill_sync_task`</span> (</div><div class="line">  <span class="string">`SYNC_TASK_ID`</span> <span class="built_in">BIGINT</span> (<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`WAYBILL_CODE`</span> <span class="built_in">VARCHAR</span> (<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`OPERATE_TYPE`</span> <span class="built_in">INT</span> (<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`TASK_DATA`</span> <span class="built_in">VARCHAR</span> (<span class="number">4096</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`TASK_EXE_COUNT`</span> <span class="built_in">INT</span> (<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`STATUS`</span> <span class="built_in">INT</span> (<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`CREATE_TIME`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0000-00-00 00:00:00'</span>,</div><div class="line">  <span class="string">`UPDATE_TIME`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`REMARK`</span> <span class="built_in">VARCHAR</span> (<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`YN`</span> <span class="built_in">INT</span> (<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`FROM_METHOD`</span> <span class="built_in">VARCHAR</span> (<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`UNIQUE_HASHCODE`</span> <span class="built_in">VARCHAR</span> (<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`QUEUE_ID`</span> <span class="built_in">VARCHAR</span> (<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'??????'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`SYNC_TASK_ID`</span>, <span class="string">`CREATE_TIME`</span>),</div><div class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`UNQ_WAYBILL_SYNC_TASK_HCODE`</span> (</div><div class="line">    <span class="string">`UNIQUE_HASHCODE`</span>,</div><div class="line">    <span class="string">`CREATE_TIME`</span></div><div class="line">  ),</div><div class="line">  <span class="keyword">KEY</span> <span class="string">`IND_WAYBILL_SYNC_TASK_STATUS`</span> (<span class="string">`STATUS`</span>),</div><div class="line">  <span class="keyword">KEY</span> <span class="string">`idx_qid_sta`</span> (<span class="string">`QUEUE_ID`</span>, <span class="string">`STATUS`</span>)</div><div class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> AUTO_INCREMENT = <span class="number">18566180</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8 <span class="comment">/*!50500 PARTITION BY RANGE COLUMNS(CREATE_TIME) (</span></div><div class="line"> PARTITION P201705 VALUES LESS THAN ('2017-06-01 00:00:00') ENGINE = InnoDB,</div><div class="line"> PARTITION P201706 VALUES LESS THAN ('2017-07-01 00:00:00') ENGINE = InnoDB,</div><div class="line"> PARTITION P201707 VALUES LESS THAN ('2017-08-01 00:00:00') ENGINE = InnoDB,</div><div class="line"> PARTITION P201708 VALUES LESS THAN ('2017-09-01 00:00:00') ENGINE = InnoDB,</div><div class="line"> PARTITION P201709 VALUES LESS THAN ('2017-10-01 00:00:00') ENGINE = InnoDB,</div><div class="line"> PARTITION P201710 VALUES LESS THAN ('2017-11-01 00:00:00') ENGINE = InnoDB,</div><div class="line"> PARTITION P201711 VALUES LESS THAN ('2017-12-01 00:00:00') ENGINE = InnoDB,</div><div class="line"> PARTITION P201712 VALUES LESS THAN ('2018-01-01 00:00:00') ENGINE = InnoDB)*/;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`pickup_goods_0`</span> (</div><div class="line">  <span class="string">`PICKUP_GOOD_ID`</span> <span class="built_in">BIGINT</span> (<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`PICKUP_CODE`</span> <span class="built_in">VARCHAR</span> (<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'取件单编码'</span>,</div><div class="line">  <span class="string">`PRODUCT_NAME`</span> <span class="built_in">VARCHAR</span> (<span class="number">2000</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`PRODUCT_COUNT`</span> <span class="built_in">INT</span> (<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品数量'</span>,</div><div class="line">  <span class="string">`PRODUCT_SOURCE`</span> <span class="built_in">INT</span> (<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品来源 1为京东、2为千寻、3为好药师、4为奢侈品360Top'''</span>,</div><div class="line">  <span class="string">`PRODUCT_TYPE`</span> <span class="built_in">INT</span> (<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品类型 1-普通商品、2-大家电商品、3-奢侈品商品、4-为合约订单商品、5-发票商品名称为发票号、6-发票复印件商品名称为发票号、7-外包装、8-检测报告、9-附件明细商品名称为附件明细'</span>,</div><div class="line">  <span class="string">`PRODUCT_WEIGHT`</span> <span class="keyword">DOUBLE</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品重量'</span>,</div><div class="line">  <span class="string">`PRODUCT_VOLUME`</span> <span class="keyword">DOUBLE</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品体积'</span>,</div><div class="line">  <span class="string">`REMARK`</span> <span class="built_in">VARCHAR</span> (<span class="number">400</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`CREATE_TIME`</span> <span class="keyword">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0000-00-00 00:00:00'</span>,</div><div class="line">  <span class="string">`YN`</span> <span class="built_in">INT</span> (<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`SKU`</span> <span class="built_in">VARCHAR</span> (<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'取件单商品编号'</span>,</div><div class="line">  <span class="string">`UPDATE_TIME`</span> <span class="keyword">TIMESTAMP</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</div><div class="line">  <span class="string">`PRODUCT_ATTRIBUTE`</span> <span class="built_in">VARCHAR</span> (<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品属性名'</span>,</div><div class="line">  <span class="string">`HALF_RECEIVE_REASON`</span> <span class="built_in">INT</span> (<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'半收原因 1：少货2：错货3：破损4：临保5：包装破损6：内物破损'</span>,</div><div class="line">  <span class="string">`serial_no`</span> <span class="built_in">VARCHAR</span> (<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'SN或69码'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`PICKUP_GOOD_ID`</span>, <span class="string">`CREATE_TIME`</span>),</div><div class="line">  <span class="keyword">KEY</span> <span class="string">`PICKUP_CODE`</span> (<span class="string">`PICKUP_CODE`</span>)</div><div class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8 <span class="comment">/*!50100 PARTITION BY RANGE ( UNIX_TIMESTAMP(CREATE_TIME)) (</span></div><div class="line"> PARTITION p201601 VALUES LESS THAN (1451577600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201602 VALUES LESS THAN (1454169600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201603 VALUES LESS THAN (1456761600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201604 VALUES LESS THAN (1459353600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201605 VALUES LESS THAN (1461945600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201606 VALUES LESS THAN (1464537600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201607 VALUES LESS THAN (1467129600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201608 VALUES LESS THAN (1469721600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201609 VALUES LESS THAN (1472313600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201610 VALUES LESS THAN (1474905600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201611 VALUES LESS THAN (1477497600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201612 VALUES LESS THAN (1480089600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201701 VALUES LESS THAN (1482681600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201702 VALUES LESS THAN (1485273600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201703 VALUES LESS THAN (1487865600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201704 VALUES LESS THAN (1490457600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201705 VALUES LESS THAN (1493049600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201706 VALUES LESS THAN (1495641600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201707 VALUES LESS THAN (1498233600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201708 VALUES LESS THAN (1500825600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201709 VALUES LESS THAN (1503417600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201710 VALUES LESS THAN (1506009600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201711 VALUES LESS THAN (1508601600) ENGINE = InnoDB,</div><div class="line"> PARTITION p201712 VALUES LESS THAN (1511193600) ENGINE = InnoDB)*/;</div></pre></td></tr></table></figure>
<h3 id="添加分区"><a href="#添加分区" class="headerlink" title="添加分区"></a>添加分区</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 原分区将被覆盖更新</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`waybill_c_0`</span> <span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span>(<span class="keyword">UNIX_TIMESTAMP</span>(CREATE_TIME))</div><div class="line">(<span class="keyword">PARTITION</span> p201701 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1485878400</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201702 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1488297600</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201703 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1490976000</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201704 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1493568000</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201705 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1496246400</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201706 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1498838400</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201707 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1501516800</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201708 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1504195200</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201709 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1506787200</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201710 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1509465600</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201711 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1512057600</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201712 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1514736000</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201801 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1517414400</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201802 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1519833600</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201803 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1522512000</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201804 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1525104000</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201805 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1527782400</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201806 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1530374400</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201807 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1533052800</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201808 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1535731200</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201809 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1538323200</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201810 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1541001600</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201811 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1543593600</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>,</div><div class="line"> <span class="keyword">PARTITION</span> p201812 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1546272000</span>) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>);</div><div class="line"></div><div class="line"><span class="comment">-- 添加分区</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`waybill_extend_0`</span></div><div class="line">	<span class="keyword">ADD</span> <span class="keyword">PARTITION</span> (</div><div class="line">		<span class="keyword">PARTITION</span> p201801 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1517414400</span>),</div><div class="line">		<span class="keyword">PARTITION</span> p201802 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">1519833600</span>));</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> waybill_extend_0 <span class="keyword">drop</span> <span class="keyword">partition</span> p201801</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">-- 查询分区数据量</span></div><div class="line"><span class="keyword">SELECT</span> PARTITION_NAME,TABLE_ROWS</div><div class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.PARTITIONS</div><div class="line"><span class="keyword">WHERE</span> TABLE_NAME = <span class="string">'common_task_mq'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- 表information_schema</span></div><div class="line"><span class="comment">-- 对InnoDB表统计信息持久化时，表的row发生变化大于10%(counter &gt; n_rows / 10 /* 10%)并且innodb_stats_auto_recalc=on，统计信信息会更新</span></div><div class="line"><span class="keyword">SELECT</span> TABLE_SCHEMA,TABLE_NAME,PARTITION_NAME,PARTITION_DESCRIPTION,TABLE_ROWS</div><div class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.PARTITIONS</div><div class="line"><span class="keyword">WHERE</span> TABLE_NAME = <span class="string">'waybill_c'</span> <span class="keyword">AND</span> TABLE_SCHEMA = <span class="string">'wmdb'</span>;</div></pre></td></tr></table></figure>
<p>information_schema.partitions中数据项<br>TABLE_SCHEMA  库名<br>TABLE_NAME  表名<br>PARTITION_NAME  分区名<br>PARTITION_DESCRIPTION 分区范围的值<br>TABLE_ROWS  分区上数据行数</p>
<h3 id="无分区表添加分区"><a href="#无分区表添加分区" class="headerlink" title="无分区表添加分区"></a>无分区表添加分区</h3><p>如果想在已经建好的表上进行分区，如果使用alter添加分区的话，mysql会提示错误：<br>ERROR 1505 <hy000> Partition management on a not partitioned table is not possible<br>正确的方法是新建一个具有分区的表，结构一致，然后用insert into 分区表 select * from 原始表</hy000></p>
<h3 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h3><p><code>partition</code></p>
<ul>
<li>使用分区删除历史数据</li>
<li>使用分区删除历史数据后，无需整理表碎片</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> common_db_task <span class="keyword">ENGINE</span>=<span class="string">'innodb'</span>;</div><div class="line"><span class="comment">-- data_free即为碎片占用空间(byte字节)</span></div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> <span class="keyword">STATUS</span> <span class="keyword">FROM</span> waybil_schedule <span class="keyword">LIKE</span> <span class="string">'common_db_task'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>delete大量的数据后，可能会发现数据文件尺寸并没有减小。是因为删除操作后在数据文件中留下碎片所致<br>使用OPTIMIZE TABLE来重新利用未使用的空间，并整理数据文件的碎片<br>重建操作能更新索引统计数据并释放成簇索引中的未使用的空间<br>myisam可以直接使用 optimize table table.name, 当是InnoDB引擎时，会报“Table does not support optimize, doing recreate + analyze instead”，一般情况下，由myisam转成innodb，会用alter table table_name engine=’innodb’进行转换，优化也可以用这个。所以InnoDB引擎时用alter table table.name engine=’innodb’来代替optimize做优化<br>查看前后效果可以使用show table status命令,例如show table status from [database] like ‘[table_name]’;返回结果中的data_free即为空洞所占据的存储空间。</p>
</blockquote>
<a href="https://blog.csdn.net/chenpeng19910926/article/details/79739722" title="optimize table命令" target="_blank" rel="external">optimize table命令</a>
<h2 id="执行脚本文件"><a href="#执行脚本文件" class="headerlink" title="执行脚本文件"></a>执行脚本文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql -h10.10.10.10 -P3306 -uroot -p123456 yourdatabase &lt; text_file &gt; out_file</div><div class="line"></div><div class="line">mysql -uroot -p123456 -P3306 -Ne <span class="string">"show create table `waybill_0`.`waybill_c_0`"</span> &gt; d:\a.txt</div></pre></td></tr></table></figure>
<h2 id="导出数据库建表语句"><a href="#导出数据库建表语句" class="headerlink" title="导出数据库建表语句"></a>导出数据库建表语句</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mysqldump -h192.168.137.155 -uroot -p123456 waybill_10 &gt; d:\waybill_10.sql</div><div class="line">mysqldump -h192.168.137.155 -uroot -p123456 --databases db1 db2 db3 &gt; d:\dump.sql</div><div class="line"></div><div class="line"><span class="comment"># --skip-add-locks Do not add locks</span></div><div class="line"><span class="comment"># --no-data Do not dump table contents</span></div><div class="line">mysqldump -h192.168.137.155 -uroot -p123456 --skip-add-locks --no-data waybill_10 &gt; d:\waybill_10.sql</div><div class="line">mysqldump -h192.168.137.155 -uroot -p123456 --port 3306 --skip-add-locks --no-data waybill_10 &gt; d:\waybill_10.sql</div><div class="line"></div><div class="line">mysqldump -h127.0.0.1 -uroot -p123456 --port 3307 --skip-add-locks --no-data --databases waybill_0 waybill_1 waybill_2 waybill_3 &gt; d:\waybill_1-4.sql</div></pre></td></tr></table></figure>
<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; drop database &lt;db_name&gt;;</div></pre></td></tr></table></figure>
<h2 id="事务验证"><a href="#事务验证" class="headerlink" title="事务验证"></a>事务验证</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> autocommit=0;</div><div class="line">begin;</div><div class="line"></div><div class="line">delete from `<span class="built_in">test</span>`.`num` <span class="built_in">where</span> number = <span class="string">'2'</span>;</div><div class="line">delete from `<span class="built_in">test</span>`.`num` <span class="built_in">where</span> number = <span class="string">'3'</span>;</div><div class="line"></div><div class="line">INSERT INTO `<span class="built_in">test</span>`.`num` (`number`, `content`) VALUES (<span class="string">'2'</span>, <span class="string">'content'</span>);</div><div class="line">INSERT INTO `<span class="built_in">test</span>`.`num` (`number`, `content`) VALUES (<span class="string">'3'</span>, <span class="string">'content'</span>);</div><div class="line"></div><div class="line">commit;</div></pre></td></tr></table></figure>
<h2 id="查看数据库版本"><a href="#查看数据库版本" class="headerlink" title="查看数据库版本"></a>查看数据库版本</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">"%version%"</span>;</div></pre></td></tr></table></figure>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`waybill_task`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span>;</div></pre></td></tr></table></figure>
<h2 id="删除数据库-1"><a href="#删除数据库-1" class="headerlink" title="删除数据库"></a>删除数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="string">`waybill_task`</span>;</div></pre></td></tr></table></figure>
<h2 id="添加唯一索引"><a href="#添加唯一索引" class="headerlink" title="添加唯一索引"></a>添加唯一索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`phone`</span> </div><div class="line"><span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`ix_phone`</span> (<span class="string">`country`</span>, <span class="string">`area`</span>, <span class="string">`number`</span>, <span class="string">`extension`</span>);</div><div class="line"></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> waybill_extend_0 <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> idx_unq_waybill_code_data_key(waybill_code,data_key);</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`$&#123;dbName&#125;`</span>.<span class="string">`$&#123;tbName&#125;`</span> <span class="keyword">ADD</span> <span class="keyword">INDEX</span> idx_unq_waybill_code_data_key(waybill_code,data_key);</div></pre></td></tr></table></figure>
<h2 id="添加普通索引"><a href="#添加普通索引" class="headerlink" title="添加普通索引"></a>添加普通索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`blocker_work_task_his`</span>   </div><div class="line">  <span class="keyword">ADD</span>  <span class="keyword">INDEX</span> <span class="string">`idx_ref_id`</span> (<span class="string">`ref_id`</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>What are differences between Index v.s. Key in MySQL<br>There’s no difference. They are synonyms.</p>
</blockquote>
<h1 id="连接池配置"><a href="#连接池配置" class="headerlink" title="连接池配置"></a>连接池配置</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;db.driverClassName&#125;"</span>/&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;db.url&#125;"</span>/&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;db.username&#125;"</span>/&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;db.password&#125;"</span>/&gt;</span> </div><div class="line"><span class="comment">&lt;!--initialSize: 初始化连接--&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span> </div><div class="line"><span class="comment">&lt;!--maxIdle: 最大空闲连接--&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span> </div><div class="line"><span class="comment">&lt;!--minIdle: 最小空闲连接--&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span> </div><div class="line"><span class="comment">&lt;!--maxActive: 最大连接数量--&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"15"</span>/&gt;</span> </div><div class="line"><span class="comment">&lt;!--removeAbandoned: 是否自动回收超时连接--&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"removeAbandoned"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span> </div><div class="line"><span class="comment">&lt;!--removeAbandonedTimeout: 超时时间(以秒数为单位)--&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"removeAbandonedTimeout"</span> <span class="attr">value</span>=<span class="string">"55"</span>/&gt;</span> </div><div class="line"><span class="comment">&lt;!--maxWait: 超时等待时间以毫秒为单位 6000毫秒/1000等于6秒--&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"3000"</span>/&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>SELECT 1<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">waybill.main.datasource.driverClassName=com.mysql.jdbc.Driver</div><div class="line">waybill.main.datasource.url=jdbc:mysql://qlwyoth.mysql.jddb.com:3358/waybill_oth?characterEncoding=UTF-8</div><div class="line"># defaultAutoCommit设置为true，否则</div><div class="line">waybill.main.datasource.defaultAutoCommit=true</div><div class="line">waybill.main.datasource.maxActive=10</div><div class="line">waybill.main.datasource.maxIdle=5</div><div class="line">waybill.main.datasource.maxWait=3000</div><div class="line">waybill.main.datasource.initialSize=2</div><div class="line">waybill.main.datasource.minIdle=2</div><div class="line">waybill.main.datasource.minEvictableIdleTimeMillis=300000</div><div class="line">waybill.main.datasource.timeBetweenEvictionRunsMillis=120000</div><div class="line">waybill.main.datasource.removeAbandoned=true</div><div class="line">waybill.main.datasource.removeAbandonedTimeout=120</div><div class="line">waybill.main.datasource.logAbandoned=true</div></pre></td></tr></table></figure>
<blockquote>
<p>enableAutoCommitOnReturn：默认true, If true, connections being returned to the pool will be checked and configured with Connection.setAutoCommit(true) if the auto commit setting is false when the connection is returned.</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>默认值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>validationQuery</code></td>
<td>SQL查询</td>
<td>用来验证从连接池取出的连接,在将连接返回给调用者之前.如果指定,则查询必须是一个SQL SELECT并且必须返回至少一行记录</td>
</tr>
<tr>
<td>timeBetweenEvictionRunsMillis</td>
<td>-1</td>
<td>在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位.如果设置为非正数,则不运行空闲连接回收器线程</td>
</tr>
<tr>
<td>testWhileIdle</td>
<td>false</td>
<td>指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.注意:设置为true后如果要生效,validationQuery参数必须设置为非空字符串</td>
</tr>
<tr>
<td>testOnReturn</td>
<td>false</td>
<td>指明是否在归还到池中前进行检验。注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串</td>
</tr>
<tr>
<td><code>testOnBorrow</code></td>
<td>true</td>
<td>指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个.注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串</td>
</tr>
<tr>
<td><code>removeAbandonedTimeout</code></td>
<td>300</td>
<td>泄露的连接可以被删除的超时值,单位秒</td>
</tr>
<tr>
<td><code>removeAbandoned</code></td>
<td>false</td>
<td>标记是否删除泄露的连接,如果他们超过了removeAbandonedTimout的限制.如果设置为true,连接被认为是被泄露并且可以被删除,如果空闲时间超过removeAbandonedTimeout.设置为true可以为写法糟糕的没有关闭连接的程序修复数据库连接.</td>
</tr>
<tr>
<td>poolPreparedStatements</td>
<td>false</td>
<td>开启池的prepared statement池功能</td>
</tr>
<tr>
<td>numTestsPerEvictionRun</td>
<td>3</td>
<td>在每次空闲连接回收器线程(如果有)运行时检查的连接数量</td>
</tr>
<tr>
<td><code>minIdle</code></td>
<td>0</td>
<td>最小空闲连接:连接池中容许保持空闲状态的最小连接数量,低于这个数量将创建新的连接,如果设置为0则不创建</td>
</tr>
<tr>
<td>minEvictableIdleTimeMillis</td>
<td>1000 <em> 60 </em> 30</td>
<td>连接在池中保持空闲而不被空闲连接回收器线程，(如果有)回收的最小时间值，单位毫秒</td>
</tr>
<tr>
<td><code>maxWait</code></td>
<td>-1</td>
<td>最大等待时间:当没有可用连接时,连接池等待连接被归还的最大时间(以毫秒计数),超过时间则抛出异常,如果设置为-1表示无限等待</td>
</tr>
<tr>
<td>maxOpenPreparedStatements</td>
<td>不限制</td>
<td>statement池能够同时分配的打开的statements的最大数量,如果设置为0表示不限制</td>
</tr>
<tr>
<td><code>maxIdle</code></td>
<td>8</td>
<td>最大空闲连接:连接池中容许保持空闲状态的最大连接数量,超过的空闲连接将被释放,如果设置为负数表示不限制</td>
</tr>
<tr>
<td><code>maxActive</code></td>
<td>8</td>
<td>最大活动连接:连接池在同一时间能够分配的最大活动连接的数量, 如果设置为非正数则表示不限制</td>
</tr>
<tr>
<td>logAbandoned</td>
<td>false</td>
<td>标记当Statement或连接被泄露时是否打印程序的stack traces日志。被泄露的Statements和连接的日志添加在每个连接打开或者生成新的Statement,因为需要生成stack trace。</td>
</tr>
<tr>
<td><code>initialSize</code></td>
<td>0</td>
<td>初始化连接:连接池启动时创建的初始化连接数量,1.2版本后支持</td>
</tr>
</tbody>
</table>
<h1 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h1><p>间隙锁主要作用: 防止出现<code>幻读</code></p>
<p>当我们通过一个参数去删除或者更新一条记录的时候， 如果参数在数据库中存在， 那么这个时候产生的是普通行锁， 锁住这个记录， 然后删除， 然后释放锁。</p>
<p>如果这条记录不存在，问题就来了， 数据库会扫描索引，发现这个记录不存在， 这个时候的delete或者update语句获取到的就是一个间隙锁，然后数据库会向左扫描扫到第一个比给定参数小的值， 向右扫描扫描到第一个比给定参数大的值， 然后以此为界，构建一个区间(开区间)， 锁住整个区间内的数据（并不包括该索引记录本身）</p>
<p>如果此时另一个事务对锁住的区域进行写操作，一个特别容易出现死锁的间隙锁诞生了</p>
<p>系统中存在一些老的代码，这些代码逻辑在接收到数据时直接先更新或者删除，然后使用返回结果，进行判断是否需要插入，在高并发情况下，如果同时操作了临近的数据，死锁就产生了。</p>
<p>最优方案为修改程序中使用事务的代码，避免对不存在的数据进行delete或者update（可先使用查询明确数据是否存在，可使用redis避免查库）后执行insert</p>
<h1 id="decimal"><a href="#decimal" class="headerlink" title="decimal"></a>decimal</h1><p>DECIMAL(M,D)<br>M是整数部分加小数部分的总长度（精度）<br>D是小数点右侧数字的数目（标度）</p>
<h1 id="rownum"><a href="#rownum" class="headerlink" title="rownum"></a>rownum</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> @<span class="keyword">rownum</span> := <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> @<span class="keyword">rownum</span>:=@<span class="keyword">rownum</span>+<span class="number">1</span> <span class="keyword">AS</span> <span class="keyword">rownum</span> ,<span class="string">`ID`</span>, <span class="string">`KEY_C`</span>, <span class="string">`VALUE_C`</span>, <span class="string">`CREATE_TIME`</span> <span class="keyword">FROM</span> <span class="string">`ns_waybill_mobile`</span> <span class="keyword">WHERE</span> <span class="string">`KEY_C`</span> = <span class="string">'13315701562'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> CREATE_TIME <span class="keyword">DESC</span></div></pre></td></tr></table></figure>
<h1 id="MySQL性能限制"><a href="#MySQL性能限制" class="headerlink" title="MySQL性能限制"></a>MySQL性能限制</h1><table>
<thead>
<tr>
<th>CPU</th>
<th>内存</th>
<th>连接数</th>
<th>IOPS</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>300</td>
<td>600</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>600</td>
<td>1000</td>
</tr>
<tr>
<td>1</td>
<td>4</td>
<td>1200</td>
<td>2000</td>
</tr>
<tr>
<td>2</td>
<td>8</td>
<td>2000</td>
<td>5000</td>
</tr>
<tr>
<td>4</td>
<td>16</td>
<td>4000</td>
<td>8000</td>
</tr>
<tr>
<td>8</td>
<td>32</td>
<td>8000</td>
<td>12000</td>
</tr>
<tr>
<td>16</td>
<td>64</td>
<td>16000</td>
<td>14000</td>
</tr>
</tbody>
</table>
<h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><p><code>表设计</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`w_refund`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`refund_code`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'退款单号'</span>,</div><div class="line">  <span class="string">`refund_source`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'申请来源'</span>,</div><div class="line">  <span class="string">`refund_reason`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'退款原因'</span>,</div><div class="line">  <span class="string">`accept_erp`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客服受理人ERP账号'</span>,</div><div class="line">  <span class="string">`accept_name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客服受理人姓名'</span>,</div><div class="line">  <span class="string">`freight_settle_mode`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'运费结算方式'</span>,</div><div class="line">  <span class="string">`apply_date`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'申请时间'</span>,</div><div class="line">  <span class="string">`refund_date`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'退款时间'</span>,</div><div class="line">  <span class="string">`merchant_order_no`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'收单号'</span>,</div><div class="line">  <span class="string">`id_company`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'运单所属大区'</span>,</div><div class="line">  <span class="string">`finance_refund_code`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'财务退款单号'</span>,</div><div class="line">  <span class="string">`refund_status`</span> tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'退款状态'</span>,</div><div class="line">  <span class="string">`order_date`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'下单时间'</span>,</div><div class="line">  <span class="string">`consigner`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'寄件人姓名'</span>,</div><div class="line">  <span class="string">`consigner_mobile`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'寄件人手机号'</span>,</div><div class="line">  <span class="string">`remark`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'备注'</span>,</div><div class="line">  <span class="string">`partition_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'分区键'</span>,</div><div class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'数据创建时间'</span>,</div><div class="line">  <span class="string">`update_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</div><div class="line">  <span class="string">`ts`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'准确更新时间'</span>,</div><div class="line">  <span class="string">`sys_version`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'数据版本'</span>,</div><div class="line">  <span class="string">`yn`</span> tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'删除标识'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</div></pre></td></tr></table></figure>
<h1 id="SQL-1"><a href="#SQL-1" class="headerlink" title="SQL"></a>SQL</h1><h1 id="insert-ignore"><a href="#insert-ignore" class="headerlink" title="insert ignore"></a>insert ignore</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 表有PrimaryKey，或者unique索引</span></div><div class="line"></div><div class="line"><span class="comment">-- 不存在，插入；已存在，报错； </span></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">names</span>(<span class="keyword">name</span>, age) <span class="keyword">values</span>(“小明”, <span class="number">23</span>);</div><div class="line"></div><div class="line"><span class="comment">-- 不存在，插入；已存在，忽略； </span></div><div class="line"><span class="keyword">insert</span> <span class="keyword">ignore</span> <span class="keyword">into</span> <span class="keyword">names</span>(<span class="keyword">name</span>, age) <span class="keyword">values</span>(“小明”, <span class="number">24</span>);</div><div class="line"></div><div class="line"><span class="comment">-- 不存在，插入；已存在，替换；</span></div><div class="line"><span class="keyword">replace</span> <span class="keyword">into</span> <span class="keyword">names</span>(<span class="keyword">name</span>, age) <span class="keyword">values</span>(“小明”, <span class="number">25</span>);</div></pre></td></tr></table></figure>
<h1 id="数据库设置只读"><a href="#数据库设置只读" class="headerlink" title="数据库设置只读"></a>数据库设置只读</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FLUSH TABLES WITH READ LOCK;</div><div class="line">SET GLOBAL read_only = ON;</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SET GLOBAL read_only = OFF;</div><div class="line">UNLOCK TABLES;</div></pre></td></tr></table></figure>
<ul>
<li>read_only = ON只读模式，可以限定普通用户进行数据修改的操作，但不会限定具有super权限的用户的数据修改操作</li>
<li>为了确保所有用户，包括具有super权限的用户也不能进行读写操作，就需要执行给所有的表加读锁的命令 “flush tables with read lock;”</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaSE JVM]]></title>
      <url>http://xiaozhuang.github.io/2017/04/25/javase-jvm/</url>
      <content type="html"><![CDATA[<p>Java 虚拟机<br><a id="more"></a></p>
<h1 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h1><p>运行时内存模型，分为<code>线程私有</code>和<code>共享数据区</code>两大类。<br>其中线程私有的数据区包含<code>程序计数器</code>、<code>虚拟机栈</code>、<code>本地方法栈</code>，<br>所有线程共享的数据区包含<code>Java堆</code>、<code>方法区</code>，在方法区内包含<code>常量池</code>。</p>
<blockquote><p>参考文档：<br><a href="http://gityuan.com/2016/01/09/java-memory/" target="_blank" rel="external">http://gityuan.com/2016/01/09/java-memory/</a><br><a href="https://www.zhihu.com/question/29884421" target="_blank" rel="external">https://www.zhihu.com/question/29884421</a></p>
</blockquote>
<img src="/2017/04/25/javase-jvm/jvmMemory1.png" alt="jvmMemory1.png" title="">
<p>详细模型</p>
<img src="/2017/04/25/javase-jvm/stackHeapInfo.png" alt="stackHeapInfo.png" title="">
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>存放虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>
<p>方法区的内存回收目标主要是针对常量池的回收和类型的卸载。</p>
<blockquote>
<p>java虚拟机规范把方法区描述为堆的一个逻辑部分，它有一个别名叫Non-Heap</p>
</blockquote>
<h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>运行时常量池：是<code>方法区的一部分</code>，<br>是类或接口class文件中<code>常量池表</code>的运行时表示形式，<br>常量池表用于存放<code>字面量</code>和<code>符号引用</code>。</p>
<p>字面量：包含文本字符串、声明为final的常量值等。<br>符号引用：类和接口的全限定名、字段的名称和描述符、方法的名称和描述符。</p>
<p>Java虚拟机为每个类型都维护着一个常量池。</p>
<h3 id="String类中的intern-方法"><a href="#String类中的intern-方法" class="headerlink" title="String类中的intern()方法"></a>String类中的intern()方法</h3><p>运行时常量池除了编译期产生的Class文件的常量池，还可以在运行期间，将新的常量加入常量池，<br>比较常见的是String类的intern()方法。</p>
<img src="/2017/04/25/javase-jvm/StringIiteral.png" alt="StringIiteral.png" title="">
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.String定义时赋值，表达式右侧只有字符串常量，变量存放在常量池里</span></div><div class="line"><span class="comment">// 2.new出来的字符串是放在堆中</span></div><div class="line"><span class="comment">// 3.对字符串进行拼接操作，分2中情况： </span></div><div class="line"><span class="comment">//      右侧是纯字符串常量，存于字符串常量池；</span></div><div class="line"><span class="comment">//      右侧存在字符串对象句柄，存放在堆中。</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 在heap堆重新创建一个对象</span></div><div class="line"><span class="comment">// 然后把 弱引用驻留到字符串常量区。</span></div><div class="line"><span class="comment">// 然后再把引用复制栈帧的局部变量表。</span></div><div class="line">String str = <span class="string">"Hello"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 在heap堆重新创建一个对象</span></div><div class="line">String str2 = <span class="keyword">new</span> String(<span class="string">"Hello"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 能手动检查字符串常量池，把有新字面值的字符串地址驻留到常量池里</span></div><div class="line">String str3 = str2.intern();</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># server模式 打印GC</span></div><div class="line">java -server -verbose:gc -XX:+PrintCompilation C2EscapeAnalysisDemo </div><div class="line"><span class="comment"># 逃逸分析和空间分配消除功能</span></div><div class="line">java -server -verbose:gc -XX:+PrintCompilation -XX:+DoEscapeAnalysis -XX:+EliminateAllocations C2EscapeAnalysisDemo</div></pre></td></tr></table></figure>
<blockquote><footer><strong>参考文档:</strong><cite><a href="https://www.zhihu.com/question/22739143" target="_blank" rel="external">www.zhihu.com/question/22739143</a></cite></footer></blockquote>
<p>Java的8种基本类型(Byte, Short, Integer, Long, Character, Boolean, Float, Double), 除Float和Double以外, 其它六种都实现了常量池,<br>但是它们只在大于等于-128并且小于等于127时才使用常量池。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">    Integer a = <span class="number">127</span>;  </div><div class="line">    Integer b = <span class="number">127</span>;  </div><div class="line">    System.out.println(<span class="string">"等于127:"</span>);  </div><div class="line">    System.out.println(a == b);  </div><div class="line">    System.out.println(<span class="string">"*****************"</span>);  </div><div class="line">  </div><div class="line">    a = <span class="number">128</span>;  </div><div class="line">    b = <span class="number">128</span>;  </div><div class="line">    System.out.println(<span class="string">"等于128:"</span>);  </div><div class="line">    System.out.println(a == b);  </div><div class="line">    System.out.println(<span class="string">"*****************"</span>);  </div><div class="line">  </div><div class="line">    a = -<span class="number">128</span>;  </div><div class="line">    b = -<span class="number">128</span>;  </div><div class="line">    System.out.println(<span class="string">"等于-128:"</span>);  </div><div class="line">    System.out.println(a == b);  </div><div class="line">    System.out.println(<span class="string">"*****************"</span>);  </div><div class="line">  </div><div class="line">    a = -<span class="number">129</span>;  </div><div class="line">    b = -<span class="number">129</span>;  </div><div class="line">    System.out.println(<span class="string">"等于-129:"</span>);  </div><div class="line">    System.out.println(a == b);  </div><div class="line">    System.out.println(<span class="string">"*****************"</span>);  </div><div class="line">  </div><div class="line">    <span class="comment">// &lt;a href="http://lib.csdn.net/base/softwaretest" class='replace_word' title="软件测试知识库" target='_blank' style='color:#df3434; font-weight:bold;'&gt;测试&lt;/a&gt;Boolean  </span></div><div class="line">    System.out.println(<span class="string">"测试Boolean"</span>);  </div><div class="line">    Boolean c = <span class="keyword">true</span>;  </div><div class="line">    Boolean d = <span class="keyword">true</span>;  </div><div class="line">    System.out.println(c == d);  </div><div class="line">    d = <span class="keyword">new</span> Boolean(<span class="keyword">true</span>);  </div><div class="line">    System.out.println(c == d);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">等于127:</div><div class="line">true</div><div class="line">*****************</div><div class="line">等于128:</div><div class="line">false</div><div class="line">*****************</div><div class="line">等于-128:</div><div class="line">true</div><div class="line">*****************</div><div class="line">等于-129:</div><div class="line">false</div><div class="line">*****************</div><div class="line">测试Boolean</div><div class="line">true</div><div class="line">false</div></pre></td></tr></table></figure>
<blockquote><footer><strong>参考文档:</strong><cite><a href="http://blog.csdn.net/shw2004/article/details/5678703" target="_blank" rel="external">blog.csdn.net/shw2004/article/details/5678703</a></cite></footer></blockquote>
<h2 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h2><p>存放对象实例和数组数据</p>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>当前线程所执行的字节码的行号指示器</p>
<blockquote>
<p>如果正在执行Native方法，计数器值为空（Undefined）</p>
</blockquote>
<h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><p>Java方法执行的内存模型：栈帧随着方法调用而创建，随着方法结束而销毁。</p>
<h3 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h3><p>栈帧是方法执行的数据结构</p>
<p>栈帧包括:</p>
<ul>
<li>局部变量表</li>
<li>操作数栈</li>
<li>方法返回地址</li>
<li>动态链接</li>
<li>额外附加信息</li>
</ul>
<h4 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h4><p>用于存放方法参数和局部变量</p>
<p>局部变量表中存放了<code>基本数据类型</code>、<code>对象引用</code>和<code>returnAddress类型</code></p>
<p>一个局部变量可保存一个类型为boolean、byte、char、short、int、float、reference或returnAddress的数据。<br>两个局部变量可保存一个类型为long或double的数据。</p>
<h4 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h4><p>方法调用时，操作数栈用来准备调用方法的<code>参数</code>及接收方法<code>返回结果</code></p>
<p>任意时刻，操作数栈都会有一个明确的栈深度，<br>long和double类型数据占用两个单位栈深度，其他数据类型占用一个单位栈深度。</p>
<h4 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h4><p>正常退出，执行引擎遇到方法返回的字节码，将返回值传递给调用者<br>异常退出，遇到Exception,并且方法未捕捉异常，那么不会有任何返回值</p>
<h4 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h4><p>每个栈帧都包含执行当前方法所在类型的运行时常量池的引用，<br>以便对当前方法的代码实现动态链接。</p>
<p>动态链接的作用是将以<code>符号引用</code>表示的方法转换为实际方法的<code>直接引用</code>。</p>
<h4 id="额外附加信息"><a href="#额外附加信息" class="headerlink" title="额外附加信息"></a>额外附加信息</h4><p>与Java虚拟机实现相关的附加信息</p>
<p>如：对程序调试提供支持的信息</p>
<h1 id="HotSpot虚拟机"><a href="#HotSpot虚拟机" class="headerlink" title="HotSpot虚拟机"></a>HotSpot虚拟机</h1><h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2><p>直接指针访问（Sun HotSpot使用该方式）：<br>reference中存储<code>实例数据地址</code>，实例数据中包含对象类型数据地址</p>
<p>句柄访问：<br>堆区包含句柄池，reference中存储对象句柄地址，<br>句柄中包含对象<code>实例数据地址</code>和<code>类型数据地址</code>。</p>
<h1 id="JVM概览"><a href="#JVM概览" class="headerlink" title="JVM概览"></a>JVM概览</h1><h2 id="编译策略"><a href="#编译策略" class="headerlink" title="编译策略"></a>编译策略</h2><p>代码最初都是在解释器中运行。<br>方法被调用的次数变多，可能变成编译。</p>
<h2 id="混合式JIT编译器"><a href="#混合式JIT编译器" class="headerlink" title="混合式JIT编译器"></a>混合式JIT编译器</h2><p>混合式JIT编译器采用分层编译，融合了Client JIT编译器和Server JIT编译器的主要特征。</p>
<p>Java6 Update 25、Java7或更高的版本，<br>可以用-server -XX: +TieredCompilation替代Client JIT编译器。</p>
<h2 id="HotSpot-VM-自适应调优"><a href="#HotSpot-VM-自适应调优" class="headerlink" title="HotSpot VM 自适应调优"></a>HotSpot VM 自适应调优</h2><p>Java5 HotSport VM新特性，<br>依据JVM启动时底层平台和系统配置自动选择<code>垃圾收集器</code>、<code>配置Java堆</code>、<code>JIT编译器</code>。</p>
<p>命令行选项-XX:+PrintCommandLineFlags可打印HotSpot VM采用的自动优化参数。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">java -XX:+PrintCommandLineFlags -version</div><div class="line"></div><div class="line"><span class="comment"># 关闭自适应调优</span></div><div class="line">-XX:-UseAdaptiveSizePolicy</div></pre></td></tr></table></figure>
<h1 id="JVM性能监控"><a href="#JVM性能监控" class="headerlink" title="JVM性能监控"></a>JVM性能监控</h1><p>生产环境中应该<code>自始至终</code>地监控应用JVM。</p>
<p>JVM是应用软件栈的重要组成部分，应该想监控应用本身和操作系统那样监控JVM。</p>
<h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><p>垃圾收集报告：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 报告垃圾收集信息</span></div><div class="line">-verbose:gc</div><div class="line"><span class="comment"># 报告详细垃圾收集信息</span></div><div class="line">-XX:+PrintGCDetails</div><div class="line"></div><div class="line"><span class="comment"># gc报告包含时间戳</span></div><div class="line">-XX:+PrintGCTimeStamps</div><div class="line">-XX:+PrintGCDateStamps</div><div class="line"></div><div class="line"><span class="comment"># 垃圾收集统计数据输出到文件</span></div><div class="line">-Xloggc:&lt;filename&gt;</div></pre></td></tr></table></figure>
<h2 id="垃圾收集数据的离线分析"><a href="#垃圾收集数据的离线分析" class="headerlink" title="垃圾收集数据的离线分析"></a>垃圾收集数据的离线分析</h2><p>gchisto gc报告离线分析工具</p>
<p>GC Pause Stats显示垃圾收集的次数、开销和持续时间等</p>
<p>一般性准则，并发垃圾收集的开销应该小于10%<br>Throughput收集器，垃圾收集开销接近1%，说明垃圾收集调的很好，3%或更高则说明调优可以改善应用的性能</p>
<p>GC Timeline显示整个时间线上所有垃圾收集的停顿。</p>
<h2 id="jconsole"><a href="#jconsole" class="headerlink" title="jconsole"></a>jconsole</h2><p>JConsole 是一个内置 Java 性能分析器，Java 某个进程的内存、线程、类加载、jvm 概要</p>
<h3 id="启动JConsole"><a href="#启动JConsole" class="headerlink" title="启动JConsole"></a>启动JConsole</h3><ul>
<li>JDK 在 PATH 上，运行 jconsole 即可</li>
<li>JDK 安装路径，打开 bin 文件夹，双击 jconsole</li>
</ul>
<h3 id="JConsole连接远程机器的JAVA程序"><a href="#JConsole连接远程机器的JAVA程序" class="headerlink" title="JConsole连接远程机器的JAVA程序"></a>JConsole连接远程机器的JAVA程序</h3><p>远程JVM开启远程监控;<br>MBean调用</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">java -cp . </div><div class="line">-Dcom.sun.management.jmxremote.port=8999 </div><div class="line">-Dcom.sun.managent.jmxremote.authenticate=<span class="literal">false</span> </div><div class="line">-Dcom.sun.management.jmxremote.ssl=<span class="literal">false</span> </div><div class="line">JConsoleTest</div></pre></td></tr></table></figure>
<p>连接远程JVM：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jconsole.exe 192.168.0.181:8999</div></pre></td></tr></table></figure>
<p>tianj<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jconsole.exe -J-Djava.class.path=%JAVA_HOME%/lib/jconsole.jar;path_to_newjar_/newjar.jar</div><div class="line"></div><div class="line">jconsole.exe -J-Djava.class.path=D:\Program Files\Java\jdk1.7.0_79\binlibjconsole.jar;d:\common-domain-0.0.1-SNAPSHOT.jar</div></pre></td></tr></table></figure></p>
<h2 id="jvisualvm"><a href="#jvisualvm" class="headerlink" title="jvisualvm"></a>jvisualvm</h2><p>VisualVM，JDK自带监控工具，它被认为是第2代JConsole，能够监控线程，内存情况，查看方法的CPU时间和内存中的对象，已被GC的对象，反向查看分配的堆栈(如100个String对象分别由哪几个对象分配出来的).</p>
<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><ul>
<li>本地机器的程序直接可以监听到</li>
<li>远程机器的程序需要加上JVM参数</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-Dcom.sun.management.jmxremote= <span class="literal">true</span></div><div class="line">-Dcom.sun.management.jmxremote.port= 9090</div><div class="line">-Dcom.sun.management.jmxremote.ssl= <span class="literal">false</span></div><div class="line">-Dcom.sun.management.jmxremote.authenticate= <span class="literal">false</span></div></pre></td></tr></table></figure>
<p>tomcat配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xport CATALINA_OPTS=&quot;$CATALINA_OPTS -Dcom.sun.management.jmxremote -Djava.rmi.server.hostname=xxx.xxx.xxx.xxx  -Dcom.sun.management.jmxremote.port=xxx -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.password.file=../conf/jmxremote.password  -Dcom.sun.management.jmxremote.access.file=../conf/jmxremote.access&quot;</div></pre></td></tr></table></figure>
<p>开启认证：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 是否开启认证、false的时候可以不使用密码访问</span></div><div class="line"><span class="comment"># -Dcom.sun.management.jmxremote.authenticate=true</span></div><div class="line"></div><div class="line"><span class="comment"># 以上配置是开启认证时使用的access文件和password文件</span></div><div class="line"><span class="comment"># -Dcom.sun.management.jmxremote.password.file=../conf/jmxremote.password </span></div><div class="line"><span class="comment"># -Dcom.sun.management.jmxremote.access.file=../conf/jmxremote.access</span></div></pre></td></tr></table></figure>
<p>其中jmxremote.access文件的内容可以配置为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">username1 readonly</div><div class="line">username2 readwrite</div></pre></td></tr></table></figure>
<p>jmxremote.password文件可以配置为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">username1 password1</div><div class="line">username2 password2</div></pre></td></tr></table></figure>
<p>将以上俩文件放在对应配置目录tomcat/conf/下<br>并且将以上俩个文件访问权限配置成：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 600 jmx*</div></pre></td></tr></table></figure>
<p>如果没有这一步、使用startup启动不了tomcat。</p>
<ul>
<li><a href="http://www.cnblogs.com/jager/p/5683455.html" title="JAVA内存泄露分析及解决" target="_blank" rel="external">JAVA内存泄露分析及解决</a></li>
<li><a href="https://my.oschina.net/kone/blog/157239" title="使用JDK自带jvisualvm监控tomcat" target="_blank" rel="external">使用JDK自带jvisualvm监控tomcat</a>
</li>
</ul>
<h3 id="导出堆dump"><a href="#导出堆dump" class="headerlink" title="导出堆dump"></a>导出堆dump</h3><p>jvisualvm导出堆dump：应用程序 -&gt; 堆dump</p>
<p>java命令导出堆dump：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># java5 生成堆dump命令，保存于执行命令目录下heap.bin文件中</span></div><div class="line">jmap -heap:format=b,&lt;jvm pid&gt;</div><div class="line"></div><div class="line"><span class="comment"># java6 生成堆dump命令</span></div><div class="line">jmap -dump:format=b,file=&lt;filename&gt; &lt;jvm pid&gt;</div><div class="line"></div><div class="line">-[histo|dump]:live</div></pre></td></tr></table></figure>
<h3 id="分析Dump文件"><a href="#分析Dump文件" class="headerlink" title="分析Dump文件"></a>分析Dump文件</h3><p>堆dump文件分析工具：MemoryAnalyzerTool</p>
<p>使用内存分析工具从众多的对象中进行分析，快速的计算出在内存中对象的占用大小，看看是谁阻止了垃圾收集器的回收工作，并可以通过报表直观的查看到可能造成这种结果的对象。</p>
<h3 id="VisualGC"><a href="#VisualGC" class="headerlink" title="VisualGC"></a>VisualGC</h3><p>VisualGC 是JVisualVM的插件，可以监控垃圾收集、类加载和JIT编译。</p>
<h2 id="JIT编译"><a href="#JIT编译" class="headerlink" title="JIT编译"></a>JIT编译</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 监控HotSport JIT编译器</span></div><div class="line">-XX:+PrintCompilation</div></pre></td></tr></table></figure>
<p>图形化工具JConsole、JVisualVM或VisualGC插件提供哪个方法正被JIT编译的信息。</p>
<h1 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h1><p>需要加载其他类而空间不足时，未使用的类会从永久代中被卸载。<br>从永久代卸载类，意味着需要Full GC。</p>
<p>Full GC时有类被卸载，说明永久代需要扩大，或者它的初始大小需要扩大</p>
<p>避免Full GC扩大或缩小永久代的可分配空间，可以设置-XX:PermSize和-XX:MaxPermSize为相同值</p>
<p>图形工具JConsole、JVisualVM和VisualGC插件可以监视类加载</p>
<p>类数据共享是指在同一个系统内的JVM之间<code>共享类</code>、减少内存占用的特性。</p>
<h1 id="jdk源码debug不显示变量值"><a href="#jdk源码debug不显示变量值" class="headerlink" title="jdk源码debug不显示变量值"></a>jdk源码debug不显示变量值</h1><p>原因：<br>    Oracle提供的jre中rt.jar不带debug信息：orcale在编译src时使用了 javac -g:none，意思是不带任何调试信息，这样可以减小rt.jar的大小。<br>    若想正常调试jdk，可以重新编译src.zip或带有Debug信息的JDK</p>
<p>解决方法：<br>    编译jdk目录下src.zip中java、javax包下类文件，打包为rt_debug.jar,<br>    放到<code>$JAVA_HOME/jre/lib/endorsed</code>文件夹下</p>
<p>参考文档：<br><a href="http://www.thejavageek.com/2016/04/03/debug-jdk-source-code/" title="debug-jdk-source-code" target="_blank" rel="external">debug-jdk-source-code</a></p>
<p>编译后jar包及参考文档：<br></p>
<h2 id="编译src-zip报错问题"><a href="#编译src-zip报错问题" class="headerlink" title="编译src.zip报错问题"></a>编译src.zip报错问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Type mismatch: cannot convert from Annotation to ConstructorProperties</span></div><div class="line">java.beans.MetaData.getAnnotationValue(Constructor)</div></pre></td></tr></table></figure>
<p>解决方法；<br><a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=167952" title="Invalid compilation errors for rt.jar for Java 1.6 annotations" target="_blank" rel="external">Invalid compilation errors for rt.jar for Java 1.6 annotations</a></p>
<h2 id="Java-覆盖系统类：endorsed-技术"><a href="#Java-覆盖系统类：endorsed-技术" class="headerlink" title="Java 覆盖系统类：endorsed 技术"></a>Java 覆盖系统类：endorsed 技术</h2><p>/ɪnˈdɔ:sd/</p>
<p>jvm的两个参数-Djava.endorsed.dirs和-Djava.ext.dirs<br>{java.ext.dirs} 可选包扩展机制<br>{java.endorsed.dirs} 包升级替换机制，一般默认是lib/endorsed文件夹，就是说，可以把你自己的jar包放在这里，代替原有的系统的jar包</p>
<p>如果不想添加-D参数，如果我们希望基于这个JDK下的都统一改变，那么我们可以将我们修改的jar放到：<code>$JAVA_HOME/jre/lib/endorsed</code></p>
<blockquote>
<p>参考信息:<br><a href="http://blog.csdn.net/conquer0715/article/details/51243353" title="Java 覆盖系统类：endorsed 技术" target="_blank" rel="external">Java 覆盖系统类：endorsed 技术</a><br><a href="http://www.iteye.com/problems/75087" title="endorsed文件夹的作用" target="_blank" rel="external">endorsed文件夹的作用</a></p>
</blockquote>
<h2 id="classpath路径的先后顺序是有意义的"><a href="#classpath路径的先后顺序是有意义的" class="headerlink" title="classpath路径的先后顺序是有意义的"></a>classpath路径的先后顺序是有意义的</h2><p><code>可用于覆盖jar包中的类</code></p>
<p>-classpath路径的先后顺序是有意义的</p>
<blockquote><p>Of particular importance, and much consternation, the class loader will load classes in the order they appear in the classpath. Starting with the first classpath entry, the class loader visits each specified directory or archive file attempting to find the class to load. The first class it finds with the proper name is loaded, and any remaining classpath entries are ignored.<br>Sounds simple, right?</p>
<footer><strong>Mastering the classpath with JWhich</strong><cite><a href="http://www.javaworld.com/javaworld/javatips/jw-javatip105.html" target="_blank" rel="external">Mastering the classpath with JWhich</a></cite></footer></blockquote>
<p>上面说明了，java xx -classpath “.;a.jar;b.jar;” 时，如果a.jar和b.jar有重名的类，那么会以a.jar的为准，忽略b.jar的，因为jvm按照-classpath参数的路径先后顺序去load类，后续加载的同名的类会被忽略。</p>
<p>jvm查找类，不仅仅是按名字找，还有包，如果包不同，也视为不同的class，<br>如果package+class都相同，则根据classpath的设置顺序，前面的优先加载，一旦前面的被加载，后面的就再也不会被加载了,<br>也就是说其实还是有一定的加载规则加载顺序的,你不能寄希望与系统，让它智能的加载你想要的。如果系统出现了重名class，危险性是非常高的。</p>
<h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>类加载器大致可以分成两类</p>
<ul>
<li>系统提供</li>
<li>Java 应用开发人员编写</li>
</ul>
<p>系统提供的类加载器</p>
<ul>
<li>引导类加载器（bootstrap class loader）：用来加载 Java 核心库，原生代码来实现，不继承自java.lang.ClassLoader</li>
<li>扩展类加载器（extensions class loader）：用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类</li>
<li>系统类加载器（system class loader）：根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般，Java 应用的类都是由它完成加载。可以通过 ClassLoader.getSystemClassLoader()来获取它</li>
</ul>
<p>开发人员可以通过继承 java.lang.ClassLoader类的方式实现自己的类加载器</p>
<h3 id="双亲委托模型"><a href="#双亲委托模型" class="headerlink" title="双亲委托模型"></a>双亲委托模型</h3><p>当前classLoader的缓存中没有找到被加载的类的时候，委托父类加载器去加载，父类加载器采用同样的策略，首先查看自己的缓存，然后委托父类的父类去加载，一直到bootstrp ClassLoader</p>
<p>当所有的父类加载器都没有加载的时候，再由当前的类加载器加载，并将其放入它自己的缓存中，以便下次有加载请求的时候直接返回</p>
<h2 id="快速监控锁竞争"><a href="#快速监控锁竞争" class="headerlink" title="快速监控锁竞争"></a>快速监控锁竞争</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 命令生成线程转储</span></div><div class="line">jstack &lt;jvm pid&gt;</div><div class="line"></div><div class="line"><span class="comment"># linux</span></div><div class="line"><span class="built_in">kill</span> -3</div><div class="line"></div><div class="line"><span class="comment"># window</span></div><div class="line">Ctrl + Break</div></pre></td></tr></table></figure>
<p>JVisualVM 可生成线程转储</p>
<h1 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h1><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>CMS收集器，低延迟为先，减少stop the world的时间，让GC线程和业务线程并发</p>
<p>-Xms4096m -Xmx4096m，Java堆的初始和最小值，最大值<br>-XX:MaxPermSize=512m，最大持久代内存512M</p>
<p>-XX:+UseConcMarkSweepGC，新生代和老年代都并发gc的方式</p>
<p>-XX:+UseCMSInitiatingOccupancyOnly，当旧生代空间使用率达到92%时会无条件执行Full GC，不根据成本计算<br>-XX:+CMSClassUnloadingEnabled，开启对永久代垃圾回收，CMS收集器默认不会对永久代进行垃圾回收</p>
<p>-XX:CMSInitiatingOccupancyFraction=80，当旧生代空间使用到一定比率时, 强制执行旧生代的Full GC，默认92%<br>-XX:CMSInitiatingPermOccupancyFraction=80，当持久代里的使用比例达到一定比率时，进行持久代内存 的回收，默认为92%</p>
<p>-Xss 每个线程的堆栈大小 JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K;<br>如果栈不是很深， 应该是128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。</p>
<h1 id="JVM常识"><a href="#JVM常识" class="headerlink" title="JVM常识"></a>JVM常识</h1><h2 id="jvm崩溃日志"><a href="#jvm崩溃日志" class="headerlink" title="jvm崩溃日志"></a>jvm崩溃日志</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-XX:ErrorFile=/var/p.log</div></pre></td></tr></table></figure>
<h1 id="GC-JMX"><a href="#GC-JMX" class="headerlink" title="GC JMX"></a>GC JMX</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.management.ManagementFactory#getGarbageCollectorMXBeans</div></pre></td></tr></table></figure>
<h2 id="垃圾收集器-1"><a href="#垃圾收集器-1" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>CMS收集器，低延迟为先，减少stop the world的时间，让GC线程和业务线程并发</p>
<p>-Xms4096m -Xmx4096m，Java堆的初始和最小值，最大值<br>-XX:MaxPermSize=512m，最大持久代内存512M</p>
<p>-XX:+UseConcMarkSweepGC，新生代和老年代都并发gc的方式<br>-Xmn2048M，置新生代内存的上限大小为2g</p>
<p>-XX:+UseCMSInitiatingOccupancyOnly，当旧生代空间使用率达到92%时会无条件执行Full GC，不根据成本计算<br>-XX:+CMSClassUnloadingEnabled，开启对永久代垃圾回收，CMS收集器默认不会对永久代进行垃圾回收</p>
<p>-XX:CMSInitiatingOccupancyFraction=80，当旧生代空间使用到一定比率时, 强制执行旧生代的Full GC，默认92%<br>-XX:CMSInitiatingPermOccupancyFraction=80，当持久代里的使用比例达到一定比率时，进行持久代内存 的回收，默认为92%</p>
<p>-Xss 每个线程的堆栈大小 JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K;<br>如果栈不是很深， 应该是128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。</p>
<h2 id="jvm崩溃日志-1"><a href="#jvm崩溃日志-1" class="headerlink" title="jvm崩溃日志"></a>jvm崩溃日志</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-XX:ErrorFile=/var/p.log</div><div class="line"><span class="comment"># 打印GC信息，帮助判断GC原因</span></div><div class="line">-XX:+PrintGCDetails</div><div class="line">-XX:+PrintGCCause</div><div class="line">-Xloggc:gc.log</div></pre></td></tr></table></figure>
<h2 id="GC-JMX-1"><a href="#GC-JMX-1" class="headerlink" title="GC JMX"></a>GC JMX</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.management.ManagementFactory#getGarbageCollectorMXBeans</div></pre></td></tr></table></figure>
<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p><code>最大线程数</code></p>
<p>线程数 = (OS内存 - Heap - Perm - 其他内存) / xss</p>
<p>在java语言里， 当你创建一个线程的时候，虚拟机会在JVM内存创建一个Thread对象同时创建一个操作系统线程，而这个系统线程的内存用的不是JVMMemory</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">-Dlog.path.prefix=/<span class="built_in">export</span>/Logs/xxxxxxx/server1 </div><div class="line">-Ddeploy.app.id=18 </div><div class="line">-Ddeploy.app.name=xxxxxxx</div><div class="line">-Ddeploy.instance.id=717666 </div><div class="line">-Ddeploy.data.path=/<span class="built_in">export</span>/Instances/xxxxxxx</div><div class="line">-Ddeploy.logs.path=/<span class="built_in">export</span>/Logs/xxxxxxx</div><div class="line">-Ddeploy.instance.logs.path=/<span class="built_in">export</span>/Logs/xxxxxxx/server1 </div><div class="line">-Dins_id=717666 </div><div class="line">-Ddeploy.dynamic.config.dir=/<span class="built_in">export</span>/Packages/xxxxxxx/20180906104207/WEB-INF/classes</div><div class="line">-Djava.util.logging.config.file=/<span class="built_in">export</span>/Instances/xxxxxxx/server1/conf/logging.properties</div><div class="line">-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager </div><div class="line">-Djava.library.path=/usr/<span class="built_in">local</span>/lib </div><div class="line">-Xms4096m </div><div class="line">-Xmx4096m </div><div class="line">-XX:MaxPermSize=512m </div><div class="line">-XX:+UnlockExperimentalVMOptions </div><div class="line">-XX:+UseConcMarkSweepGC </div><div class="line">-Djava.awt.headless=<span class="literal">true</span> </div><div class="line">-Dsun.net.client.defaultConnectTimeout=60000 </div><div class="line">-Dsun.net.client.defaultReadTimeout=60000 </div><div class="line">-Djmagick.systemclassloader=no </div><div class="line">-Dnetworkaddress.cache.ttl=30 </div><div class="line">-Dsun.net.inetaddr.ttl=30</div><div class="line">-XX:+HeapDumpOnOutOfMemoryError </div><div class="line">-XX:HeapDumpPath=/<span class="built_in">export</span>/Instances/xxxxxxx/server1/logs </div><div class="line">-XX:ErrorFile=/<span class="built_in">export</span>/Instances/xxxxxxx/server1/logs/java_error_%p.log </div><div class="line">-Djava.endorsed.dirs=/<span class="built_in">export</span>/servers/tomcat7.0.61/endorsed </div><div class="line">-Dcatalina.base=/<span class="built_in">export</span>/Instances/xxxxxxx/server1 </div><div class="line">-Dcatalina.home=/<span class="built_in">export</span>/servers/tomcat7.0.61 </div><div class="line">-Djava.io.tmpdir=/<span class="built_in">export</span>/Instances/xxxxxxx/server1/temp</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java Concurrency In Practice]]></title>
      <url>http://xiaozhuang.github.io/2017/04/20/java-concurrency-in-practice/</url>
      <content type="html"><![CDATA[<p>《Java并发编程实战》笔记<br><a id="more"></a></p>
<h1 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h1><p>编写线程安全的代码，核心在于<code>对状态访问操作</code>进行管理，<br>特别是对<code>共享的</code>和<code>可变的</code>状态的访问。</p>
<p>实现线程安全:</p>
<ul>
<li>不在线程之间共享状态变量</li>
<li>状态变量修改为不可变变量</li>
<li>访问状态变量时使用同步</li>
</ul>
<p>编写并发程序原则：<br>首先使代码<code>正确运行</code>，然后再提高代码的速度。</p>
<blockquote>
<p>应该始终遵循这个原则。由于并发错误难以重现和调试。</p>
</blockquote>
<h2 id="什么是线程安全性"><a href="#什么是线程安全性" class="headerlink" title="什么是线程安全性"></a>什么是线程安全性</h2><p>线程安全类：多个线程访问某个类时，类始终能表现出<code>正确的行为</code></p>
<p>正确性的含义：某个类的<code>行为</code>与其<code>规范</code>完全一致</p>
<p>线程安全类中封装了必要的同步机制，客户端无须进一步采取同步措施</p>
<p><code>无状态对象</code>一定是线程安全的。</p>
<h2 id="竞态条件"><a href="#竞态条件" class="headerlink" title="竞态条件"></a>竞态条件</h2><p>竞态条件：当某个计算的正确性取决于多个线程的交替执行时序时，那么就会发生竞态条件。</p>
<p>最常见的竞态条件是“先检查后执行”操作</p>
<p>竞态条件本质:基于一种可能失效的观察结果来做出判断或执行某个计算。</p>
<h2 id="内置锁"><a href="#内置锁" class="headerlink" title="内置锁"></a>内置锁</h2><p>内置锁提供了独占的加锁方式（原子性、顺序性、可见性）</p>
<p>每个java<code>对象</code>都可以用做实现同步的锁，<br>这些锁被称为内置锁（Intrinsic Lock）或监视器锁（Monitor Lock）</p>
<p>Java内置锁相当于一种互斥体，最多<code>只有一个</code>线程能持有锁</p>
<p>同步代码块（Synchronized Block）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">synchronized</span>(lock)&#123;</div><div class="line">    <span class="comment">//访问或修改由锁保护的共享状态</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每次<code>只有一个</code>线程执行内置锁保护的代码块，<br>由锁保护的代码块会以<code>原子方式</code>执行。</p>
<p>原子性：一组语句作为一个不可分割的单元被执行。</p>
<p>原子性和可见性 JMM关于synchronized的两条规定:</p>
<ul>
<li>线程解锁前，必须把共享变量的最新值刷新到主内存</li>
<li>线程加锁前，清空工作内存中共享变量，从主内存中重新读取最新的值</li>
</ul>
<h2 id="重入"><a href="#重入" class="headerlink" title="重入"></a>重入</h2><p>重入：某个线程试图获得一个已经由它持有的锁，那么这个请求会成功</p>
<p>重入的一种实现方法，为每个锁关联一个<code>获取计数值</code>和一个<code>所有者线程</code></p>
<p>内置锁是可重入的</p>
<h2 id="用锁来保护状态"><a href="#用锁来保护状态" class="headerlink" title="用锁来保护状态"></a>用锁来保护状态</h2><p>使用锁来协调对某个变量的访问时，在访问变量的所有位置上都需要使用<code>同一个锁</code></p>
<p>当获取与某个对象关联的锁时，并<code>不能阻止</code>其他线程<code>访问</code>该对象，<br>某个线程在获得对象的锁之后，能阻止其他线程获得同一个锁。 </p>
<p>某个变量由锁保护时，意味着每次访问这个变量都需要首先获得锁，<br>这样就确保在同一时刻只有一个线程访问这个变量。</p>
<p>对于每个包含<code>多个变量</code>的<code>不变性条件</code>，<br>其中涉及的所有变量都需要由<code>同一个</code>锁来保护。</p>
<p>执行<code>时间较长</code>的计算或可能无法快速完成的操作时（网络I/O、控制台I/O），<br>一定<code>不要</code>持有锁。</p>
<h1 id="对象的共享"><a href="#对象的共享" class="headerlink" title="对象的共享"></a>对象的共享</h1><p>访问共享的可变状态时需要进行正确的管理。</p>
<h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>没有同步情况下，无法确保执行读操作的线程能适时地看到其他线程写入的值。</p>
<p>可见性问题原因：<br>    cup解决内存io操作速度慢问题，有高速缓存；<br>    多线程执行在不同cpu上，同一个共享数据，会在多个cpu中缓存副本；<br>    一个cpu改变了副本的值并不会立刻同步到主内存中。</p>
<h2 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h2><p>在没有同步的情况下，编译器、处理器以及运行时等都可能对<code>操作的执行顺序</code>进行一些意想不到的调整。</p>
<p>在缺乏足够同步的多线程程序中，无法对内存操作的执行顺序进行判断</p>
<h2 id="非原子的64位操作"><a href="#非原子的64位操作" class="headerlink" title="非原子的64位操作"></a>非原子的64位操作</h2><p>最低安全性：在没有同步的情况下读取变量，可能得到一个失效值，<br>但至少这个值是由之前某个线程设置的，而不是一个随机值。</p>
<p>最低安全性适用于绝大多数变量，非volatile类型64位数值变量例外。</p>
<p>Java内存模型要求，变量<code>读取</code>和<code>写入</code>操作都必须是原子操作，<br>但对非volatile类型的long和double变量，JVM允许将64位的读操作和写操作分解为两个32位操作。</p>
<p>读取一个非volatile类型long变量时，<br>如果变量的读操作和写操作在不同的线程中执行，那么可能会读到某个值的高32位和另一个值的低32位。</p>
<p>即使不考虑失效数据问题，多线程程序中使用共享且可变的long和double类型变量也是不安全的。<br>除非使用volatile声明它们或使用锁进行保护。</p>
<h2 id="加锁与可见性"><a href="#加锁与可见性" class="headerlink" title="加锁与可见性"></a>加锁与可见性</h2><p>加锁的含义不仅仅局限于互斥行为，还包括内存可见性。</p>
<p>为了确保所有线程都能看到共享变量的最新值，<br>所有执行读操作或写操作的线程都必须在<code>同一个锁</code>上同步。</p>
<h2 id="volatile变量"><a href="#volatile变量" class="headerlink" title="volatile变量"></a>volatile变量</h2><p>volatile变量确保将变量的更新操作通知到其他线程。</p>
<p>编译器与运行时<code>不会</code>将volatile变量上的操作与其他内存操作<code>重排序</code>。</p>
<p>volatile变量<code>不会被缓存</code>在寄存器或对其他处理器不可见的地方。</p>
<p>volatile使用场景：</p>
<ul>
<li>确保自身状态的可见性</li>
<li>确保引用对象的状态的可见性</li>
</ul>
<p>volatile变量通常用做某个操作的<code>状态标识</code></p>
<p>当且仅当满足以下所有条件时，才应该使用volatile变量：</p>
<ul>
<li>对变量的写入操作不依赖变量的当前值</li>
<li>该变量不会与其他状态变量一起纳入不变性条件</li>
<li>访问变量时不需要加锁</li>
</ul>
<h2 id="发布与逸出"><a href="#发布与逸出" class="headerlink" title="发布与逸出"></a>发布与逸出</h2><p>发布：使对象能够在当前作用域之外的代码中使用。</p>
<p>逸出：某个不应该发布的对象被发布。</p>
<p>发布内部类实例导致，隐式地this引用逸出</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisEscape</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThisEscape</span><span class="params">(EventSource source)</span> </span>&#123;</div><div class="line">        source.registerListener(<span class="keyword">new</span> EventListener() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Event e)</span> </span>&#123;</div><div class="line">                <span class="comment">//ThisEscape.this.doSomething()肯能在构造函数完成前被调用</span></div><div class="line">                doSomething(e);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Event e)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">EventSource</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(EventListener e)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">EventListener</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Event e)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Event</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="安全的对象构造过程"><a href="#安全的对象构造过程" class="headerlink" title="安全的对象构造过程"></a>安全的对象构造过程</h2><p>当且仅当对象的构造函数返回时，对象才处于可预测的和一致的状态。</p>
<p>不要在构造函数中使this引用逸出。</p>
<p>构造过程中使this引用逸出的常见错误：在构造函数中启动一个线程(由于Thread或Runnable是该对象的内部类)。</p>
<h2 id="线程封闭"><a href="#线程封闭" class="headerlink" title="线程封闭"></a>线程封闭</h2><p>访问共享的可变数据时，通常需要使用同步。</p>
<p>一种避免使用同步的方式是不共享数据。</p>
<p>线程封闭是实现线程安全最简单方式之一。<br>当某个对象封闭在一个线程中时，将自动实现线程安全，即使被封闭的对象本身不是线程安全的。</p>
<h3 id="栈封闭"><a href="#栈封闭" class="headerlink" title="栈封闭"></a>栈封闭</h3><p>局部变量的固有属性之一就是封闭在执行线程中。</p>
<p>任何方法都无法获得基本数据类型的引用，<br>基本类型局部变量始终封闭在线程内。</p>
<p>维持对象引用的栈封闭时，需要确保被引用的对象不会逸出。</p>
<h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>ThreadLocal类能够使线程中的某个值与ThreadLocal对象关联起来。</p>
<p>从概念上看，可以将ThreadLocal<t>视为包含了Map<thread,t>对象，<br>其中保存了特定于该线程的值，但ThreadLocal的实现并非如此。</thread,t></t></p>
<p>特定于线程的值保存在Thread对象中，线程终止后，这些值会被回收。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ThreadLocal&lt;Integer&gt; dataHolder = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;()&#123;</div><div class="line">    <span class="comment">// 初次调用ThreadLocal.get方法时，会调用initialValue获取初始值</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Random().nextInt();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getData</span><span class="params">()</span></span>&#123;</div><div class="line">    Integer integer = dataHolder.get();</div><div class="line">    <span class="keyword">return</span> integer;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</div><div class="line">    dataHolder.set(data);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="不变性"><a href="#不变性" class="headerlink" title="不变性"></a>不变性</h2><p>不可变对象：对象在被创建后状态不能被修改。</p>
<p>线程安全性是不可变对象的固有属性。</p>
<p>不可变对象一定是线程安全的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Immutable</span></div><div class="line"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeStooges</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; stooges = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreeStooges</span><span class="params">()</span> </span>&#123;</div><div class="line">        stooges.add(<span class="string">"Moe"</span>);</div><div class="line">        stooges.add(<span class="string">"Larry"</span>);</div><div class="line">        stooges.add(<span class="string">"Curly"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isStooge</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> stooges.contains(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStoogeNames</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;String&gt; stooges = <span class="keyword">new</span> Vector&lt;String&gt;();</div><div class="line">        stooges.add(<span class="string">"Moe"</span>);</div><div class="line">        stooges.add(<span class="string">"Larry"</span>);</div><div class="line">        stooges.add(<span class="string">"Curly"</span>);</div><div class="line">        <span class="keyword">return</span> stooges.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>实现不可变对象方法，参考《EffectiveJava》tip-15</p>
</blockquote>
<h3 id="Final域"><a href="#Final域" class="headerlink" title="Final域"></a>Final域</h3><p>final类型的域是不能修改的</p>
<p>java内存模型中，final域有着特殊的语义。<br>final域能确保<code>初始化过程</code>的安全性，共享这些对象时无需同步。</p>
<p>初始化安全性只能保证通过final域<code>可达</code>的值从构造过程完成时开始的可见性。<br>对于通过非final域可达的值，或在<code>构造过程完成后</code>可能<code>改变</code>的值，必须采用同步确保可见性。</p>
<p>除非需要某个域是可变的，否则应将其声明为final域</p>
<h3 id="使用volatile类型发布不可变对象"><a href="#使用volatile类型发布不可变对象" class="headerlink" title="使用volatile类型发布不可变对象"></a>使用volatile类型发布不可变对象</h3><p>某些情况下，不可变对象能提供一种弱形式的原子性</p>
<p>需要对一组相关数据以原子方式执行某个操作时，<br>可以考虑创建一个不可变的类来包含这些数据。</p>
<h2 id="安全发布"><a href="#安全发布" class="headerlink" title="安全发布"></a>安全发布</h2><p>多线程间共享对象，必须确保安全地进行共享。</p>
<h3 id="不正确的发布：正确的对象被破坏"><a href="#不正确的发布：正确的对象被破坏" class="headerlink" title="不正确的发布：正确的对象被破坏"></a>不正确的发布：正确的对象被破坏</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StuffIntoPublic</span> </span>&#123;</div><div class="line">    <span class="comment">//不安全发布</span></div><div class="line">    <span class="keyword">public</span> Holder holder;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</div><div class="line">        holder = <span class="keyword">new</span> Holder(<span class="number">42</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Holder</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.n = n;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assertSanity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (n != n)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"This statement is false."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>问题并不在于Holder本身，而是在于Holder类未被安全的发布。</p>
<p>两种不安全情况：</p>
<ul>
<li>其他线程可能看到Holder域是一个失效值。</li>
<li>其他线程可能看到Holder引用的值是最新的，但Holder状态的值却是失效的。</li>
</ul>
<p>由于未被正确发布，另一个线程调用assertSanity()将抛出AssertionError（不理解）</p>
<h3 id="不可变对象与初始化安全性"><a href="#不可变对象与初始化安全性" class="headerlink" title="不可变对象与初始化安全性"></a>不可变对象与初始化安全性</h3><p>java内存模型为不可变对象的共享提供了特殊的初始化安全性保证。</p>
<p>即使发布不可变对象的引用时没有使用同步，仍然可以安全的访问该对象。</p>
<h3 id="安全发布的常用模式"><a href="#安全发布的常用模式" class="headerlink" title="安全发布的常用模式"></a>安全发布的常用模式</h3><p>安全地发布一个对象，对象地<code>引用</code>以及对象的<code>状态</code>必须同时对其他线程可见。</p>
<p><code>正确构造</code>的对象可以通过以下方式来安全发布：</p>
<ul>
<li><code>静态初始化函数</code>中初始化一个对象引用</li>
<li>对象引用保存到<code>volatile</code>类型域或<code>AtomicReferance</code>对象中</li>
<li>对象引用保存到某个正确构造对象的<code>final</code>域中</li>
<li>对象引用保存到一个<code>由锁保护</code>的域中</li>
</ul>
<p>线程安全容器通过将对象应用保存在由锁保护的域中，<br>保证对象安全发布。</p>
<p>静态初始化器由JVM在类初始化阶段执行，即在类被加载后并且被线程使用之前。</p>
<p>由于JVM将在初始化期间获得一个锁，<br>并且每个线程都至少获取一次这个锁以确保这个类已经加载，<br>因此在静态初始化期间，内存写入操作将自动对所有线程可见。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ThreadSafe</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EagerInitialization</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Resource resource = <span class="keyword">new</span> Resource();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Resource <span class="title">getResource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> resource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Resource</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="事实不可变对象"><a href="#事实不可变对象" class="headerlink" title="事实不可变对象"></a>事实不可变对象</h3><p>事实不可变对象：对象从技术上看是可变的，但其状态在发布后不会再改变。</p>
<p>没有额外同步的情况下，任何线程都可以安全地使用<code>被安全发布</code>的事实不可变对象。</p>
<h3 id="可变对象"><a href="#可变对象" class="headerlink" title="可变对象"></a>可变对象</h3><p>安全发布只能确保<code>发布当时</code>状态的可见性。</p>
<p>可变对象每次访问都需要使用同步来确保<code>后续修改</code>操作的可见性。</p>
<h3 id="安全的共享对象"><a href="#安全的共享对象" class="headerlink" title="安全的共享对象"></a>安全的共享对象</h3><ul>
<li>不可变对象可以通过任意机制发布</li>
<li>事实不可变对象必须通过安全方式发布</li>
<li>可变对象必须通过安全方式发布，并且必须线程安全的或由锁保护起来</li>
</ul>
<h1 id="基础构建模块"><a href="#基础构建模块" class="headerlink" title="基础构建模块"></a>基础构建模块</h1><h2 id="同步工具类"><a href="#同步工具类" class="headerlink" title="同步工具类"></a>同步工具类</h2><h3 id="锁闭"><a href="#锁闭" class="headerlink" title="锁闭"></a>锁闭</h3><p>锁闭是一种同步工具，可以延迟线程的进度<code>直到其到达终止状态</code>。</p>
<p>锁闭可以用来确保某些活动<code>直到其他活动都完成</code>才执行。<br>例如：确保某个计算在其所需要的所有资源都初始化之后继续执行。</p>
<p>锁闭是一次性对象，一旦进入终止状态，就不能被重置。</p>
<p>CountDownLatch测试n个线程并发执行某个任务需要的时间。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentTimer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ConcurrentTimer</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">time</span><span class="params">(ExecutorService executor, <span class="keyword">int</span> concurrency, <span class="keyword">final</span> Runnable action)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</div><div class="line">        <span class="keyword">final</span> CountDownLatch ready = <span class="keyword">new</span> CountDownLatch(concurrency);</div><div class="line">        <span class="keyword">final</span> CountDownLatch start = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">        <span class="keyword">final</span> CountDownLatch done = <span class="keyword">new</span> CountDownLatch(concurrency);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; concurrency; i++)&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                executor.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    </div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        ready.countDown();</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            start.await();</div><div class="line">                            action.run();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            Thread.currentThread().interrupt();</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                            done.countDown();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;<span class="keyword">finally</span>&#123;</div><div class="line">                executor.shutdown();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ready.await();</div><div class="line">        <span class="keyword">long</span> startNanos = System.nanoTime();</div><div class="line">        start.countDown();</div><div class="line">        done.await();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> System.nanoTime() - startNanos;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> concurrency = <span class="number">3</span>;</div><div class="line">        ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            </div><div class="line">            <span class="keyword">long</span> timecost = time(newCachedThreadPool, concurrency, <span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    System.out.println(<span class="string">"run..."</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            System.out.println(timecost);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h2><p>FutureTask 也可以用做锁闭。<br>FutureTask 表示一种抽象的可生成结果的计算，通过Callable实现。</p>
<p>FutureTask 在Executor框架中表示异步任务。</p>
<p>FutureTask是Future、Runnable的合体。</p>
<p>Future.get() 如果任务已完成，立即返回结果；<br>否则，阻塞直到任务进入完成状态，然后返回结果或抛出异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;String&gt;(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"foo"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">new</span> Thread(futureTask).start();</div><div class="line"></div><div class="line">String result = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    result = futureTask.get();</div><div class="line">    System.out.println(result);</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><p>计数信号量(Counting Semaphore)<br>限制对资源的使用，或者同时执行某个指定操作的数量。</p>
<p>默认为非公平锁，可指定为公平锁。</p>
<p>Semaphore中管理着一组虚拟的许可(permit)，<br>许可初始数量可通过构造函数指定。</p>
<p>执行操作时先获得许可，使用之后释放许可。如果没有许可，acquire()将阻塞直到有许可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//创建许可</span></div><div class="line">semaphore.release();</div><div class="line">System.out.println(semaphore.availablePermits());</div><div class="line"></div><div class="line"><span class="comment">//获取许可</span></div><div class="line">semaphore.acquire();</div></pre></td></tr></table></figure>
<p>Semaphore <code>不会</code>将许可与线程关联起来，<br>一个线程获得的许可，可以在另一个线程中释放。<br>可以将acquire操作视为<code>消费</code>一个许可，release操作视为<code>创建</code>一个许可。</p>
<h2 id="栅栏"><a href="#栅栏" class="headerlink" title="栅栏"></a>栅栏</h2><p>栅栏(Barrier)能阻塞一组线程直到某个事件发生<br>Barrier 在释放等待线程后可以重用</p>
<p>用于并行迭代算法：将一个问题拆分成一系列相互独立的子问题。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentTimer2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ConcurrentTimer2</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">time</span><span class="params">(ExecutorService executor, <span class="keyword">int</span> concurrency, <span class="keyword">final</span> Runnable action)</span></span></div><div class="line">            <span class="keyword">throws</span> InterruptedException, BrokenBarrierException &#123;</div><div class="line">        <span class="comment">// 使用栅栏控制并发</span></div><div class="line">        <span class="keyword">final</span> CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(concurrency + <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; concurrency; i++) &#123;</div><div class="line">            executor.submit(<span class="keyword">new</span> Callable&lt;Void&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> Void <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                    barrier.await();</div><div class="line">                    action.run();</div><div class="line">                    barrier.await();</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        executor.shutdown();</div><div class="line"></div><div class="line">        barrier.await();</div><div class="line">        <span class="keyword">long</span> startNanos = System.nanoTime();</div><div class="line">        barrier.await();</div><div class="line">        <span class="keyword">return</span> System.nanoTime() - startNanos;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> concurrency = <span class="number">3</span>;</div><div class="line">        ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();</div><div class="line">        <span class="keyword">long</span> timecost = <span class="number">0</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            timecost = time(newCachedThreadPool, concurrency, <span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    System.out.println(<span class="string">"run..."</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(timecost);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在不涉及I/O操作和共享数据访问的计算问题中，<br>当线程数量等于CPU数量或CPU数量+1时将获得最优的吞吐量。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>所有并发问题都可以归结为如何协调对并发状态的访问</li>
<li>不可变对象一定是线程安全的</li>
<li>保护同一个不可变性条件中的所有变量时，使用同一个锁。</li>
</ul>
<h1 id="任务执行"><a href="#任务执行" class="headerlink" title="任务执行"></a>任务执行</h1><h1 id="取消与关闭"><a href="#取消与关闭" class="headerlink" title="取消与关闭"></a>取消与关闭</h1><h1 id="线程池的了使用"><a href="#线程池的了使用" class="headerlink" title="线程池的了使用"></a>线程池的了使用</h1><h1 id="避免活跃性危险"><a href="#避免活跃性危险" class="headerlink" title="避免活跃性危险"></a>避免活跃性危险</h1><p>Java程序无法从死锁中恢复过来，在设计时一定要排除那些可能导致死锁出现的条件。</p>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>当一个线程永远地持有一个锁，并且其他线程都尝试获得这个锁，<br>那么他们将永远被阻塞。</p>
<p>哲学家进餐问题：<br>5个哲学家，5只筷子，交替地进行思考和进餐。</p>
<p>解决办法：</p>
<ul>
<li>至多4个哲学家拿起左边筷子</li>
<li>奇数号科学家先拿左边筷子，再拿右边筷子；偶数号科学家相反。</li>
<li>仅当两支筷子均可用时，才允许他拿起筷子进餐。(只有一个哲学家取筷子、轮询锁)</li>
</ul>
<h3 id="锁顺序死锁"><a href="#锁顺序死锁" class="headerlink" title="锁顺序死锁"></a>锁顺序死锁</h3><p>原因：两个线程以不同的顺序获得2个锁。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LeftRightDeadLock</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object left = <span class="keyword">new</span> Object();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object right = <span class="keyword">new</span> Object();</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leftRight</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (left) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (right) &#123;</div><div class="line">                <span class="comment">//doSomething</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rightLeft</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (right) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (left) &#123;</div><div class="line">                <span class="comment">//doSomething</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有线程以固定的顺序来获得锁，就不会出现锁顺序死锁。</p>
<h3 id="动态顺序死锁"><a href="#动态顺序死锁" class="headerlink" title="动态顺序死锁"></a>动态顺序死锁</h3><p>使用方法传入的两个参数作为锁对象。</p>
<p>解决方法：<br>使用System.identityHashCode()来定义锁的顺序，<br>极少数情况下，两个对象有相同的散列值，可使用加时赛（TieBreaking）锁，<br>从而保证只有一个线程以未知的顺序获得两个锁。</p>
<p>若参数对象包含唯一的、不可变的，并且具备比较性的属性，<br>可通过该属性决定获得锁的顺序。</p>
<h3 id="协作对象之间发生的死锁"><a href="#协作对象之间发生的死锁" class="headerlink" title="协作对象之间发生的死锁"></a>协作对象之间发生的死锁</h3><p>持有锁时调用某个外部方法，外部方法中可能获取其他锁，<br>或阻塞时间过长，导致其他线程无法及时获得当前被持有的锁。</p>
<h3 id="开放调用"><a href="#开放调用" class="headerlink" title="开放调用"></a>开放调用</h3><p>调用某个方法时不持有锁，称为开放调用。</p>
<p>通过开放调用避免在相互协作的对象之间产生死锁。</p>
<p>在程序中尽量使用开放调用。<br>开放调用的程序更易于进行死锁分析。</p>
<h2 id="死锁避免与诊断"><a href="#死锁避免与诊断" class="headerlink" title="死锁避免与诊断"></a>死锁避免与诊断</h2><ul>
<li>尽量减少潜在的加锁交互数量</li>
<li>尽可能使用开放调用</li>
</ul>
<h3 id="支持定时的锁"><a href="#支持定时的锁" class="headerlink" title="支持定时的锁"></a>支持定时的锁</h3><p>使用轮询锁、定时锁代替内置锁</p>
<h3 id="通过线程转储信息来分析死锁"><a href="#通过线程转储信息来分析死锁" class="headerlink" title="通过线程转储信息来分析死锁"></a>通过线程转储信息来分析死锁</h3><p>在生成线程转储之前，JVM将在等待关系图中通过搜索循环来找出死锁。</p>
<h2 id="其他活跃性危险"><a href="#其他活跃性危险" class="headerlink" title="其他活跃性危险"></a>其他活跃性危险</h2><p>饥饿、丢失信号、活锁</p>
<h3 id="饥饿"><a href="#饥饿" class="headerlink" title="饥饿"></a>饥饿</h3><p>当线程由于无法访问它所需要的资源而不能继续执行时，就发生了“饥饿”。</p>
<p>要尽量避免使用线程优先级，这会增加平台依赖性，<br>并可能导致活跃性问题。<br>大多数并发程序中，都可以使用默认的线程优先级。</p>
<h3 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h3><p>多个相互协作的线程都对彼此进行响应从而修改各自的状态，<br>并使得任何一个线程都无法继续执行时，就发生了活锁。</p>
<p>通过等待随机长度的时间和回退可以有效地避免活锁的发生。</p>
<h3 id="丢失信号"><a href="#丢失信号" class="headerlink" title="丢失信号"></a>丢失信号</h3><p>线程等待一个已经为真的条件，但开始等待之前没有检查条件谓词。</p>
<p>如：没有在调用wait之前检查条件谓词。</p>
<h1 id="性能与可伸缩性"><a href="#性能与可伸缩性" class="headerlink" title="性能与可伸缩性"></a>性能与可伸缩性</h1><p>线程的主要目的：提升程序的运行性能。<br>线程可在运行现有任务时立即开始新的任务，提升系统响应性。</p>
<h2 id="对性能的思考"><a href="#对性能的思考" class="headerlink" title="对性能的思考"></a>对性能的思考</h2><p>多线程总会引入一些额外的性能开销：</p>
<ul>
<li>线程之间的协调（加锁、触发信号、内存同步）</li>
<li>增加上下文切换</li>
<li>线程的创建和销毁</li>
<li>线程的调度</li>
</ul>
<h2 id="性能与可伸缩性-1"><a href="#性能与可伸缩性-1" class="headerlink" title="性能与可伸缩性"></a>性能与可伸缩性</h2><p>伸缩性：增加计算资源时，程序吞吐量或处理能力相应增加。</p>
<p>性能调优：用更小的代价完成相同的工作（缓存、算法）。<br>可伸缩性调优：设法将问题的计算并行化，从而能利用更多的计算资源。</p>
<h2 id="评估各种性能权衡因素"><a href="#评估各种性能权衡因素" class="headerlink" title="评估各种性能权衡因素"></a>评估各种性能权衡因素</h2><p>避免不成熟的优化。<br>首先使程序正确，然后在提高运行速度——如果运行得不够快。</p>
<p>对性能调优时，一定要有明确的性能需求，<br>还需要一个测试程序以及真实的配置和负载等环境。</p>
<h2 id="Amdahl定律"><a href="#Amdahl定律" class="headerlink" title="Amdahl定律"></a>Amdahl定律</h2><p>程序的可伸缩性取决于所有代码中必须被串行执行的代码比例。</p>
<h2 id="减少锁的竞争"><a href="#减少锁的竞争" class="headerlink" title="减少锁的竞争"></a>减少锁的竞争</h2><p>减少锁的竞争能够提高性能和可伸缩性。</p>
<h3 id="缩小锁的范围"><a href="#缩小锁的范围" class="headerlink" title="缩小锁的范围"></a>缩小锁的范围</h3><p>尽可能缩短锁的持有时间。</p>
<p>同步需要一定的开销，<br>把一个同步代码块分解为多个同步代码块时，<br>反而会对性能提升产生负面影响。</p>
<p>仅当可以将一些“大量”计算或阻塞操作从同步代码块中移出时，<br>才应该考虑分解同步代码块。</p>
<h3 id="减小锁的粒度"><a href="#减小锁的粒度" class="headerlink" title="减小锁的粒度"></a>减小锁的粒度</h3><p>另一个减小锁的持有时间的方式：降低线程请求锁的频率（从而减小发生竞争的可能性）。<br>可通过锁分解和锁分段实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ThreadSafe</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerStatusBeforeSplit</span> </span>&#123;</div><div class="line">    <span class="meta">@GuardedBy</span>(<span class="string">"this"</span>) <span class="keyword">public</span> <span class="keyword">final</span> Set&lt;String&gt; users;</div><div class="line">    <span class="meta">@GuardedBy</span>(<span class="string">"this"</span>) <span class="keyword">public</span> <span class="keyword">final</span> Set&lt;String&gt; queries;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ThreadSafe</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerStatusAfterSplit</span> </span>&#123;</div><div class="line">    <span class="meta">@GuardedBy</span>(<span class="string">"users"</span>) <span class="keyword">public</span> <span class="keyword">final</span> Set&lt;String&gt; users;</div><div class="line">    <span class="meta">@GuardedBy</span>(<span class="string">"queries"</span>) <span class="keyword">public</span> <span class="keyword">final</span> Set&lt;String&gt; queries;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="锁分段"><a href="#锁分段" class="headerlink" title="锁分段"></a>锁分段</h3><p>ConcurrentHashMap使用了包含16个锁的数组，<br>每个锁保护所有散列桶的1/16。</p>
<p>锁分段劣势：获取所有锁实现独占访问困难且开销高。</p>
<p>ConcurrentHashMap中size():<br>将每个分段中元素数量相加，而不是维护一个全局计数（避免热点域）。<br>每个分段维护一个独立计数，通过每个分段的锁维护这个值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MultipartKey</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;MultipartKey, F&gt; cInstanceCache</div><div class="line">        = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">7</span>);</div></pre></td></tr></table></figure>
<h3 id="一些替代独占锁的方法"><a href="#一些替代独占锁的方法" class="headerlink" title="一些替代独占锁的方法"></a>一些替代独占锁的方法</h3><p>并发容器、读-写锁、不可变对象、原子变量。</p>
<h1 id="显式锁"><a href="#显式锁" class="headerlink" title="显式锁"></a>显式锁</h1><p>使用一致的锁协议协调对共享状态的访问，能采用独占方式访问变量，<br>对变量的任何修改对随后获得这个锁的线程都可见。</p>
<p>显式锁和内置锁在加锁和解锁等操作上有相同的内存语义。</p>
<p>ReentrantLock并不是一种替代内置锁的方法，<br>而是当内置加锁机制不适用时，作为一种可选择的高级功能。</p>
<p>Reentrantlock实现了Lock接口，<br>提供了与synchronized相同的的互斥性和内存可见性，<br>提供了可重入的加锁语义。</p>
<p>必须在finally块中释放锁</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();<span class="comment">//获取锁</span></div><div class="line"></div><div class="line">lock.lock();</div><div class="line"></div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="comment">//更新对象状态</span></div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line">    lock.unlock();<span class="comment">//释放锁</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="轮询锁和定时锁"><a href="#轮询锁和定时锁" class="headerlink" title="轮询锁和定时锁"></a>轮询锁和定时锁</h2><p>内置锁中，死锁是一个严重的问题，<br>恢复程序的唯一办法是重新启动程序，<br>防止死锁的唯一办法是构造程序时避免出现不一致的锁顺序。</p>
<p>定时锁和可轮询锁提供了另一种选择：避免死锁的发生。</p>
<p>定时锁示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();<span class="comment">//获取锁</span></div><div class="line"><span class="comment">//时长</span></div><div class="line"><span class="keyword">long</span> nanosToLock = <span class="number">1000</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (lock.tryLock(nanosToLock, TimeUnit.NANOSECONDS))&#123;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        <span class="comment">//更新对象状态</span></div><div class="line">    &#125;<span class="keyword">finally</span>&#123;</div><div class="line">        lock.unlock();<span class="comment">//释放锁</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>轮询锁示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transferMoney</span><span class="params">(Account fromAcct,</span></span></div><div class="line">                             Account toAcct,</div><div class="line">                             DollarAmount amount,</div><div class="line">                             <span class="keyword">long</span> timeout,</div><div class="line">                             TimeUnit unit)</div><div class="line">        <span class="keyword">throws</span> InsufficientFundsException, InterruptedException &#123;</div><div class="line">    <span class="comment">//轮询固定延时</span></div><div class="line">    <span class="keyword">long</span> fixedDelay = getFixedDelayComponentNanos(timeout, unit);</div><div class="line">    <span class="comment">//轮询随机延时</span></div><div class="line">    <span class="keyword">long</span> randMod = getRandomDelayModulusNanos(timeout, unit);</div><div class="line">    <span class="comment">//计算超时时间</span></div><div class="line">    <span class="keyword">long</span> stopTime = System.nanoTime() + unit.toNanos(timeout);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (fromAcct.lock.tryLock()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (toAcct.lock.tryLock()) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        fromAcct.debit(amount);</div><div class="line">                        toAcct.credit(amount);</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                        toAcct.lock.unlock();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                fromAcct.lock.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (System.nanoTime() &lt; stopTime)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        NANOSECONDS.sleep(fixedDelay + rnd.nextLong() % randMod);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="可中断的锁"><a href="#可中断的锁" class="headerlink" title="可中断的锁"></a>可中断的锁</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();<span class="comment">//获取锁</span></div><div class="line"></div><div class="line">lock.lockInterruptibly();</div><div class="line"></div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="comment">//更新对象状态</span></div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line">    lock.unlock();<span class="comment">//释放锁</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="非块状结构锁"><a href="#非块状结构锁" class="headerlink" title="非块状结构锁"></a>非块状结构锁</h2><p>使用细粒度锁保护链表，<br>每个链表节点一个独立的锁，<br>使不同的线程能独立地对链表的不同部分进行操作。</p>
<p>每个节点的锁将保护链接指针及该节点中存储的数据。<br>遍历或修改链表时，必须持有节点上的锁，<br>直到获得下一个节点的锁，才能是释放前一个节点的锁。</p>
<h2 id="公平性"><a href="#公平性" class="headerlink" title="公平性"></a>公平性</h2><p>ReentrantLock提供两种公平性选择：非公平锁(默认)、公平锁</p>
<blockquote>
<p>注：即使公平锁，tryLock()仍然会插队。</p>
</blockquote>
<p>公平性由于在<code>挂起线程</code>和<code>恢复线程</code>时存在的开销而极大地降低性能。</p>
<p>与默认的ReentrantLock一样，内置锁不提供确定的公平性保证。</p>
<h2 id="在synchronized和ReentrantLock之间选择"><a href="#在synchronized和ReentrantLock之间选择" class="headerlink" title="在synchronized和ReentrantLock之间选择"></a>在synchronized和ReentrantLock之间选择</h2><p>ReentrantLock在性能上似乎优于内置锁，<br>其中Java 6中略有胜出，而在java 5中则是远远胜出。</p>
<p>与显式锁相比，内置锁任然具有很多的优势。<br>内置锁为许多开发人员熟悉，并且简单紧凑。</p>
<p>未来更可能会提升synchronized性能。<br>因为synchronized是JVM的内置属性，它能执行一些优化。</p>
<p>线程转储能给出在哪些线程获得了哪些锁，并能够检测和识别发生死锁的线程。<br>线程转储中显式锁信息比内置锁信息精确度低。<br>内置锁与<code>栈帧</code>关联，显式锁与<code>线程</code>关联。</p>
<p>线程转储：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># windows Ctrl + Break</span></div><div class="line"><span class="comment"># Unix</span></div><div class="line"><span class="built_in">kill</span> -3 pid</div></pre></td></tr></table></figure>
<p>应该优先使用sysnchronized，<br>仅当内置锁不能满足需求时，才可以考虑使用ReentrantLock。</p>
<p>实现 定时锁、轮询锁、可中断锁、非块状锁和公平锁，<br>可以考虑使用ReentrantLock。</p>
<h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReadWriteLock</span> </span>&#123;</div><div class="line">    <span class="function">Lock <span class="title">readLock</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">Lock <span class="title">writeLock</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>读/写锁：<br>一个资源可以被<code>多个读</code>操作访问，或被<code>一个写</code>操作访问，但两者不能同时进行。</p>
<p>在多处理器系统上频繁读取的数据结构，读-写锁能够提升性能。</p>
<p>ReentrantReadWriteLock特点：</p>
<ul>
<li>支持公平锁和非公平锁</li>
<li>可重入</li>
<li>写锁可降级为读锁，读锁不可升级为写锁。</li>
</ul>
<p>线程插队：<br>公平锁中，等待时间最长的线程将优先获得锁。<br>如果锁由读线程持有，另一个线程在请求写锁，<br>那么其他读线程都不能获得读取锁，直到写线程使用完并释放写锁。</p>
<p>非公平锁中，线程获得访问许可的顺序是不确定的。</p>
<p>写锁降级为读锁：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();<span class="comment">// 读写锁  </span></div><div class="line">lock.writeLock().lock();  </div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">try</span> &#123;  </div><div class="line">        <span class="comment">// do something</span></div><div class="line">    &#125; <span class="keyword">finally</span> &#123;  </div><div class="line">        <span class="comment">// 重入——&gt;降级锁的步骤：先获取写锁，然后获取读锁，最后释放写锁（重点）  </span></div><div class="line">        lock.readLock().lock();  </div><div class="line">        lock.writeLock().unlock();  </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125; <span class="keyword">finally</span>&#123;</div><div class="line">    lock.readLock().unlock();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>读锁不能升级为写锁，<br>两个线程在不释放读锁情况下，同时请求写锁将产生死锁。</p>
<p>写入锁提供了条件变量(Condition)的支持，<br>读取锁不允许获取条件变量，将得到一个UnsupportedOperationException异常。</p>
<p>ReentrantReadWriteLock实现线程安全的Map示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadWriteMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K,V&gt; map;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock r = lock.readLock();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock w = lock.writeLock();</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReadWriteMap</span><span class="params">(Map&lt;K,V&gt; map)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.map = map;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span></span>&#123;</div><div class="line">        w.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> map.put(key, value);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            w.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span></span>&#123;</div><div class="line">        r.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> map.get(key);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            r.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>如果需要基于散列的映射，可以使用ConcurrentHashMap；<br>需要LinkedHashMap并发访问，可以使用使用读写锁包装。</p>
</blockquote>
<h2 id="ReentrantReadWriteLock源码"><a href="#ReentrantReadWriteLock源码" class="headerlink" title="ReentrantReadWriteLock源码"></a>ReentrantReadWriteLock源码</h2><p>AQS里面的 state的高低16位来记录 read /write 获取的次数</p>
<h1 id="原子变量与非阻塞同步机制"><a href="#原子变量与非阻塞同步机制" class="headerlink" title="原子变量与非阻塞同步机制"></a>原子变量与非阻塞同步机制</h1><p>非阻塞算法用底层的<code>原子机器命令</code>（如比较并交换命令）确保数据并发访问的一致性。</p>
<p>非阻塞算法不存在死锁和优先级反转问题。</p>
<p>原子变量提供了与volatile变量相同的内存语义。</p>
<h2 id="锁的劣势"><a href="#锁的劣势" class="headerlink" title="锁的劣势"></a>锁的劣势</h2><ul>
<li>线程挂起和恢复开销高，且存在较长时间中断</li>
<li>优先级反转（高优先级等待低优先级持有的锁）</li>
<li>持有锁线程永久阻塞，影响其他线程</li>
<li>对于细粒度操作(如计数器)锁是高开销机制</li>
</ul>
<h2 id="比较并交换"><a href="#比较并交换" class="headerlink" title="比较并交换"></a>比较并交换</h2><p>CAS包含3个操作数————内存位置V、比较值A、拟写入新值B</p>
<p>当且仅当V等于A时，CAS才会通过原子方式用新值B更新V，否则不会执行任何操作。</p>
<p>CAS含义：<br>“我认为V的值应该为A，如果是，那么将V的值更新为B，<br>否则不修改并告诉V的值实际为多少。”</p>
<p>由于CAS能检测到来自其他线程的干扰，<br>因此即使不使用锁也能够实现原子的读-改-写操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe UNSAFE;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> RESULT;</div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">final</span> sun.misc.Unsafe u;</div><div class="line">        UNSAFE = u = sun.misc.Unsafe.getUnsafe();</div><div class="line">        Class&lt;?&gt; k = CompletableFuture.class;</div><div class="line">        RESULT = u.objectFieldOffset(k.getDeclaredField(<span class="string">"result"</span>));</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception x) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">casStack</span><span class="params">(Completion cmp, Completion val)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, STACK, cmp, val);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="非阻塞计数器"><a href="#非阻塞计数器" class="headerlink" title="非阻塞计数器"></a>非阻塞计数器</h2><p>CAS的主要缺点：需调用者处理处理竞争问题（通过重试、回退、放弃）</p>
<p>事实上，CAS最大的缺陷在于难以围绕着CAS正确的构建外部算法。</p>
<h2 id="原子变量类"><a href="#原子变量类" class="headerlink" title="原子变量类"></a>原子变量类</h2><p>原子变量的compareAndSet()像锁机制一样，<br>既能提供原子性，又能提供可见性。</p>
<p>12个原子变量类，分为4组:</p>
<ul>
<li>标量（Scalar）</li>
<li>更新器类</li>
<li>数组类</li>
<li>复合变量类</li>
</ul>
<p>标量类AtomicInteger、AtomicLong、AtomicBoolean、AtomicReference，都支持CAS，<br>AtomicInteger、AtomicLong还支持算术运算。</p>
<p>模拟其他基本类型的原子变量，<br>可将short或byte转为int，<br>使用Float.floatToIntBits()、Double.doubleToLongBits()转换浮点数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</div><div class="line"><span class="comment">//以原子方式将当前值加 1</span></div><div class="line"><span class="keyword">int</span> incrementAndGet = count.incrementAndGet();</div><div class="line">System.out.println(incrementAndGet);</div><div class="line"></div><div class="line"><span class="keyword">int</span> x = count.get();</div><div class="line"><span class="comment">// 如果当前值 == 预期值，则以原子方式将该值设置为给定的更新值。</span></div><div class="line"><span class="keyword">boolean</span> compareAndSet = count.compareAndSet(x,x+<span class="number">10</span>);</div><div class="line">System.out.println(count.get());</div></pre></td></tr></table></figure>
<p>原子数组类AtomicIntegerArray、AtomicLongArray、AtomicReferenceArray，<br>为数组元素提供了volatile类型的访问语义。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">AtomicReferenceArray&lt;Person&gt; atomicReferenceArray = <span class="keyword">new</span> AtomicReferenceArray&lt;Person&gt;(<span class="number">10</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; atomicReferenceArray.length(); i++) &#123;  </div><div class="line">    <span class="keyword">boolean</span> compareAndSet = atomicReferenceArray.compareAndSet(i, <span class="keyword">null</span>, <span class="keyword">new</span> Person());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//设置AtomicInteger</span></div><div class="line"><span class="keyword">int</span> current, next;</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    current = get();</div><div class="line">    next = current + delta;</div><div class="line">&#125; <span class="keyword">while</span> (!compareAndSet(current, next));</div></pre></td></tr></table></figure>
<p>原子变量没有重新定义hashCode与equals方法，每个实例都是不同的。<br>与其他可变对象相同，他们也不宜用做基于散列的容器中的键值。</p>
<p>原子域更新器：AtomicIntegerFieldUpdater、AtomicLongFieldUpdater、AtomicReferenceFieldUpdater</p>
<p>能够在已有的volatile域上使用CAS</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">AtomicReferenceFieldUpdater&lt;InnerPerson, String&gt; nameUpdater = AtomicReferenceFieldUpdater.newUpdater(InnerPerson.class, String.class, <span class="string">"name"</span>);</div><div class="line">       </div><div class="line">InnerPerson person = <span class="keyword">new</span> InnerPerson(<span class="string">"sunday"</span>);</div><div class="line">String personName = person.name;</div><div class="line">nameUpdater.compareAndSet(person, personName, <span class="string">"wangdz"</span>);</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerPerson</span></span>&#123;</div><div class="line">    <span class="comment">// 字段为非private的volatile类型</span></div><div class="line">    <span class="keyword">volatile</span> String name;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InnerPerson</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InnerPerson</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"InnerPerson [name="</span> + name + <span class="string">"]"</span>;</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="性能比较：锁与原子变量"><a href="#性能比较：锁与原子变量" class="headerlink" title="性能比较：锁与原子变量"></a>性能比较：锁与原子变量</h2><p>原子变量在可伸缩性上高于锁。</p>
<p>在中低程度竞争下，原子变量能提供更高的可伸缩性。<br>在高强度竞争下，锁能够更高效的避免竞争。</p>
<p>若可以使用ThreadLocal避免使用共享状态，开销更小。<br>可以通过提高处理竞争的效率提高可伸缩性，只有完全消除竞争，才能实现真正的可伸缩性。</p>
<h2 id="非阻塞算法"><a href="#非阻塞算法" class="headerlink" title="非阻塞算法"></a>非阻塞算法</h2><p>若某算法中，一个线程的失败或挂起不会导致其他线程的失败或挂起，<br>这种算法被称为非阻塞算法。</p>
<p>非阻塞算法通常不会出现死锁和优先级反转问题，<br>可能会出现饥饿和活锁问题（因为算法中反复地重试）</p>
<h2 id="非阻塞的栈"><a href="#非阻塞的栈" class="headerlink" title="非阻塞的栈"></a>非阻塞的栈</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentStack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    AtomicReference&lt;Node&lt;E&gt;&gt; top = <span class="keyword">new</span> AtomicReference&lt;Node&lt;E&gt;&gt;();</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E item)</span></span>&#123;</div><div class="line">        Node&lt;E&gt; newTop = <span class="keyword">new</span> Node&lt;E&gt;(item);</div><div class="line">        Node&lt;E&gt; oldTop;</div><div class="line">        </div><div class="line">        <span class="keyword">do</span>&#123;</div><div class="line">            oldTop = top.get();</div><div class="line">            newTop.next = oldTop;</div><div class="line">        &#125;<span class="keyword">while</span>(!top.compareAndSet(oldTop, newTop));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt;</span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> E item;</div><div class="line">        <span class="keyword">public</span> Node&lt;E&gt; next;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E item)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.item = item;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="非阻塞的链表"><a href="#非阻塞的链表" class="headerlink" title="非阻塞的链表"></a>非阻塞的链表</h2><p>技巧一：<br>即使一个包含多个步骤的更新操作，<br>也要确保数据结构总是处于一致的状态。</p>
<p>技巧二：<br>如果线程B到达时发现线程A正在修改数据结构，<br>那么数据结构中应该有足够多的信息，<br>使得线程B能够完成A的更新操作。</p>
<p>添加元素步骤（更新两个指针）：</p>
<ul>
<li>更新最后一个元素next指针，将新节点链接到列表队尾</li>
<li>更新尾节点</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ThreadSafe</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedQueue</span> &lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> &lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">final</span> E item;</div><div class="line">        <span class="keyword">final</span> AtomicReference&lt;LinkedQueue.Node&lt;E&gt;&gt; next;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E item, LinkedQueue.Node&lt;E&gt; next)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.item = item;</div><div class="line">            <span class="keyword">this</span>.next = <span class="keyword">new</span> AtomicReference&lt;LinkedQueue.Node&lt;E&gt;&gt;(next);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 哑节点，初始化时头节点和尾节点都指向该节点</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedQueue.Node&lt;E&gt; dummy = <span class="keyword">new</span> LinkedQueue.Node&lt;E&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicReference&lt;LinkedQueue.Node&lt;E&gt;&gt; head</div><div class="line">            = <span class="keyword">new</span> AtomicReference&lt;LinkedQueue.Node&lt;E&gt;&gt;(dummy);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicReference&lt;LinkedQueue.Node&lt;E&gt;&gt; tail</div><div class="line">            = <span class="keyword">new</span> AtomicReference&lt;LinkedQueue.Node&lt;E&gt;&gt;(dummy);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">put</span><span class="params">(E item)</span> </span>&#123;</div><div class="line">        LinkedQueue.Node&lt;E&gt; newNode = <span class="keyword">new</span> LinkedQueue.Node&lt;E&gt;(item, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            LinkedQueue.Node&lt;E&gt; curTail = tail.get();</div><div class="line">            LinkedQueue.Node&lt;E&gt; tailNext = curTail.next.get();</div><div class="line">            <span class="keyword">if</span> (curTail == tail.get()) &#123;</div><div class="line">                <span class="keyword">if</span> (tailNext != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">// 队列处于中间状态，推进尾节点</span></div><div class="line">                    tail.compareAndSet(curTail, tailNext);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 处于稳定状态，尝试插入新节点</span></div><div class="line">                    <span class="keyword">if</span> (curTail.next.compareAndSet(<span class="keyword">null</span>, newNode)) &#123;</div><div class="line">                        <span class="comment">// 插入成功，尝试推进尾节点</span></div><div class="line">                        tail.compareAndSet(curTail, newNode);</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LinkedQueue说明了ConcurrentLinkedQueue使用的算法，<br>不同的是ConcurrentLinkedQueue中没有使用原子引用表示Node，<br>而是使用volatile类型引用，并通过原子域更新器进行更新，<br>以避免AtomicReference创建，提升性能。</p>
<h2 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h2><p>如果算法的<code>节点可以被循环使用</code>，<br>那么在使用“比较并交换”指令时可能出现这种问题(主要在没有垃圾回收机制的环境中)。</p>
<p>某些算法中，如果V值首先由A变成B，再由B变成A，<br>那么仍然被认为发生了变化，并需要执行算法中某些步骤。</p>
<p>AtomicMarkableReference 维护带有标记位的对象引用，可以原子方式对其进行更新<br>AtomicStampedReference 维护带有整数“标志”的对象引用，可以用原子方式对其进行更新</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">AtomicStampedReference&lt;Integer&gt; atomicStampedRef = <span class="keyword">new</span> AtomicStampedReference&lt;Integer&gt;(<span class="number">100</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">// 获取对象引用和获取版本号，能否当前版本号为当前元素版本号的不变性? </span></div><div class="line">Integer reference = atomicStampedRef.getReference();</div><div class="line"><span class="keyword">int</span> stamp = atomicStampedRef.getStamp();</div><div class="line"></div><div class="line">Integer newReference = <span class="keyword">new</span> Integer(reference+<span class="number">1</span>);</div><div class="line"><span class="keyword">int</span> newStamp = stamp + <span class="number">1</span>;</div><div class="line"></div><div class="line">atomicStampedRef.compareAndSet(reference, newReference, stamp, newStamp);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Effective Java]]></title>
      <url>http://xiaozhuang.github.io/2017/04/19/java-effective/</url>
      <content type="html"><![CDATA[<p>Effective Java2 笔记<br><a id="more"></a></p>
<h1 id="创建和销毁对象"><a href="#创建和销毁对象" class="headerlink" title="创建和销毁对象"></a>创建和销毁对象</h1><h2 id="考虑用静态工厂方法代替构造器"><a href="#考虑用静态工厂方法代替构造器" class="headerlink" title="考虑用静态工厂方法代替构造器"></a>考虑用静态工厂方法代替构造器</h2><p><code>tip-1</code><br>需要多个相同签名的构造器时，用静态工厂方法代替构造器</p>
<p>静态工厂方法惯用名称：</p>
<ul>
<li>valueOf</li>
<li>of</li>
<li>getInstance</li>
<li>newInstance</li>
<li>getType</li>
<li>newType</li>
</ul>
<h2 id="遇到多个构造器参数时考虑用构造器"><a href="#遇到多个构造器参数时考虑用构造器" class="headerlink" title="遇到多个构造器参数时考虑用构造器"></a>遇到多个构造器参数时考虑用构造器</h2><p><code>tip-2</code><br>Builder模式解决的问题</p>
<ul>
<li>构造器参数列表过长不易使用</li>
<li>JavaBeans模式阻止了把类做成不可变类的可能，也不易检查参数约束条件</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Baz</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Long id;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer age;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Date birthday;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Baz</span><span class="params">(Long id, String name, Integer age, Date birthday)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.birthday = birthday;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> birthday;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BazBuilder <span class="title">builder</span><span class="params">(Long id, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BazBuilder( id, name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BazBuilder</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> Long id;</div><div class="line">        <span class="keyword">private</span> String name;</div><div class="line">        <span class="keyword">private</span> Integer age;</div><div class="line">        <span class="keyword">private</span> Date birthday;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BazBuilder</span><span class="params">(Long id, String name)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.id = id;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> BazBuilder <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.age = age;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> BazBuilder <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.birthday = birthday;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Baz <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Baz(id, name, age, birthday);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Baz baz = Baz.builder(<span class="number">1000L</span>, <span class="string">"Baz"</span>).setAge(<span class="number">7</span>).setBirthday(<span class="keyword">new</span> Date()).build();</div><div class="line">        System.out.println(JSON.toJSON(baz));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>类的构造器或者静态工厂具有多个参数时，<code>Builder模式</code>就是不错的选择</p>
<h2 id="用私有构造器或者枚举类型强化Singleton属性"><a href="#用私有构造器或者枚举类型强化Singleton属性" class="headerlink" title="用私有构造器或者枚举类型强化Singleton属性"></a>用私有构造器或者枚举类型强化Singleton属性</h2><p><code>tip-3</code><br>私有构造器单例需要处理反射调用私有构造器攻击，且需声明所有实例域都是<code>transient</code>，并提供readResolve方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;  </div><div class="line">      <span class="comment">// instead of the object we're on,   </span></div><div class="line">      <span class="comment">// return the class variable INSTANCE  </span></div><div class="line">      <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>readResolve is used for replacing the object read from the stream. The only use I’ve ever seen for this is enforcing singletons; when an object is read, replace it with the singleton instance. This ensures that nobody can create another instance by serializing and deserializing the singleton.</p>
<a href="https://stackoverflow.com/questions/1168348/java-serialization-readobject-vs-readresolve" title="readResolve()" target="_blank" rel="external">readResolve()</a>
<p>单元素枚举类型，无偿地提供了序列化机制，绝对防止多次实例化，即使是在面对复杂的序列化或 反射攻击的时候。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Employee &#123; <span class="comment">// changed "class" to "enum"</span></div><div class="line"></div><div class="line">   INSTANCE; <span class="comment">// added name of the (single) instance</span></div><div class="line"></div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id; </div><div class="line">   <span class="keyword">private</span> String name; </div><div class="line">   Employee() &#123;&#125;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> id; </div><div class="line">   &#125;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">( <span class="keyword">int</span> id )</span> </span>&#123; </div><div class="line">      <span class="keyword">this</span>.id = id; </div><div class="line">   &#125; </div><div class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; </div><div class="line">      <span class="keyword">return</span> name; </div><div class="line">   &#125; </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">( String name )</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.name = name; </div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>单元素的枚举类型已经成为实现Singleton的最佳方法</p>
<h2 id="避免创建不必要的对象"><a href="#避免创建不必要的对象" class="headerlink" title="避免创建不必要的对象"></a>避免创建不必要的对象</h2><p><code>tip-5</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 静态构造方法优先于构造器</span></div><div class="line">Boolean.valueOf(<span class="string">"true"</span>);</div></pre></td></tr></table></figure>
<p>优先使用基本类型而不是装箱的基本类型，要当心无意识的自动装箱</p>
<p>维护自己的对象池（object pool）来避免创建对象<code>并不是</code>一种好的做法</p>
<h2 id="消除过期的对象引用"><a href="#消除过期的对象引用" class="headerlink" title="消除过期的对象引用"></a>消除过期的对象引用</h2><p><code>tip-6</code></p>
<p>只要类自己管理内存，程序员就应该警惕内存泄漏问题</p>
<p>内存泄漏的另一个常见来源是<code>缓存</code></p>
<h2 id="避免使用终结方法"><a href="#避免使用终结方法" class="headerlink" title="避免使用终结方法"></a>避免使用终结方法</h2><p><code>tip-7</code><br>不应该依赖终结方法来更新重要的持久状态</p>
<p>使用终结方法有一个非常严重的（severe）性能损失</p>
<p>如果子类实现覆盖了超类的终结方法，但是忘了手工调用超类的终结方法，<br>那么超类的终结方法将永远也不会被调用</p>
<p>除非作为安全网，或者为了终止非关键的本地资源，否则不要使用终结方法</p>
<h1 id="对所有对象都通用的方法"><a href="#对所有对象都通用的方法" class="headerlink" title="对所有对象都通用的方法"></a>对所有对象都通用的方法</h1><h2 id="覆盖equals时请遵守通用约定"><a href="#覆盖equals时请遵守通用约定" class="headerlink" title="覆盖equals时请遵守通用约定"></a>覆盖equals时请遵守通用约定</h2><p><code>tip-8</code><br>equals方法的通用约定</p>
<ul>
<li>自反性</li>
<li>对称性</li>
<li>传递性</li>
<li>一致性  多次调用，一致地返回true或false</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">    <span class="comment">//instanceof 第一个参数为null，无论第二个参数是哪种类型，都返回false</span></div><div class="line">    <span class="keyword">if</span>(!(obj <span class="keyword">instanceof</span> MyType))&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于非float 和 double类型的<code>基本类型域</code>，可以使用 == 操作符进行比较<br>float域，使用Float.compare方法<br>double域，使用Double.compare方法<br>数组域使用Arrays.equals方法</p>
<blockquote>
<p>如果 f1 和 f2 都表示 Float.NaN，那么即使 Float.NaN==Float.NaN 的值为 false，equals 方法也将返回 true<br>如果 f1 表示 +0.0f，而 f2 表示 -0.0f，或相反，那么即使 0.0f==-0.0f 的值为 true，equal 测试也将返回 false</p>
</blockquote>
<p>域的比较影响equals方法的性能，应该优先比较<code>最有可能不一致的域</code></p>
<p><code>不要</code>将equals声明中的Object对象替换为其他类型</p>
<h2 id="覆盖equals方法时总要覆盖hashCode"><a href="#覆盖equals方法时总要覆盖hashCode" class="headerlink" title="覆盖equals方法时总要覆盖hashCode"></a>覆盖equals方法时总要覆盖hashCode</h2><p><code>tip-9</code></p>
<ul>
<li>每个覆盖了equals方法的类中，也<code>必须</code>覆盖hashCode方法</li>
<li><p>相等的对象<code>必须</code>具有相等的散列码</p>
</li>
<li><p>hashCode计算必须排除equals比较计算中没有用到的任何域</p>
</li>
</ul>
<h2 id="始终要覆盖toString"><a href="#始终要覆盖toString" class="headerlink" title="始终要覆盖toString"></a>始终要覆盖toString</h2><p><code>tip-10</code></p>
<p>toString通用约定：<code>简洁</code>的，但<code>信息丰富</code>，并且<code>易于阅读</code>的表达形式。</p>
<p>toString方法应该返回对象中包含的<code>所有值得关注的信息</code>。</p>
<p>最好提供一个相匹配的静态工厂或构造器，以便在<code>对象</code>和他的<code>字符串表示法</code>之间转换。</p>
<p>toStrig方法间接提供了对象访问途径，应<code>避免暴露内部数据</code>。</p>
<h1 id="类和接口"><a href="#类和接口" class="headerlink" title="类和接口"></a>类和接口</h1><h2 id="使类和成员的可访问性最小"><a href="#使类和成员的可访问性最小" class="headerlink" title="使类和成员的可访问性最小"></a>使类和成员的可访问性最小</h2><p><code>tip-13</code><br>设计良好的模块会<code>隐藏所有的实现细节</code>，把它的API与它的实现清晰地隔离开来。</p>
<p><code>信息隐藏</code>可以有效地解除组成系统的各模块之间的耦合关系，<br>使得这些模块可以独立地开发、测试、优化、使用、理解和修改。</p>
<p>信息隐藏也降低了构建大型业务系统的风险。</p>
<p><code>尽可能地使每个类或成员不被外界访问</code><br>对于顶层(非嵌套的)类和接口，<code>只有两种</code>可能的访问级别：<br>包级私有的(package-private)和公有的(public)</p>
<p>如果包级私有的顶层类(或者接口)<code>只在某一个类的内部</code>被用到，<br>就应该考虑使它成为唯一使用它的那个类的<code>私有嵌套类</code>。</p>
<p>实例域<code>绝不能</code>是公有的，同样的建议也适用于静态域，只有静态常量可以为公有。</p>
<p>长度非零的数组总是可变的。<br>类具有公有的静态final数组域，或者返回这种域的访问方法，这几乎总是错误的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 可以返回数组的不可变列表</span></div><div class="line">Integer[] values = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</div><div class="line">List&lt;Integer&gt; asList = Collections.unmodifiableList(Arrays.asList(values));</div><div class="line"></div><div class="line"><span class="comment">// 或返回数组的拷贝</span></div><div class="line">Integer[] clone = values.clone();</div></pre></td></tr></table></figure>
<p>如果类可以在它<code>所在的包的外部</code>进行访问，就提供访问方法</p>
<p>如果类是<code>包级私有的</code>，或者是<code>私有的嵌套类</code>，直接暴露他的数据域并没有本质的错误</p>
<h2 id="使可变性最小化"><a href="#使可变性最小化" class="headerlink" title="使可变性最小化"></a>使可变性最小化</h2><p><code>tip-15</code><br>Java平台类库中包含许多不可变类，<br>其中有String、基本类型的包装类、BigInteger和BigDecimal。</p>
<p>BigInteger和BigDecimal使用方法和场景<br>BigInteger：<code>不可变的</code>任意精度的整数。(long型最大只能有19位,但是用BigInteger可以表示更大的数字 )<br>BigDecimal：<code>不可变的</code>任意精度的有符号十进制数。</p>
<p>double转BigDecimal精度问题：<br>new BigDecimal(double d) 会导致精度不准确。 new BigDecimal(doubble+””)或<code>BigDecimal.valueOf(double)</code>可解决。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create two new BigDecimals</span></div><div class="line">BigDecimal BigDec1 = <span class="keyword">new</span> BigDecimal(<span class="string">"1238126387123"</span>);</div><div class="line">BigDecimal BigDec2 = <span class="keyword">new</span> BigDecimal(<span class="string">"1213669989183"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 加 Addition of two BigDecimals</span></div><div class="line">BigDec1 = BigDec1.add(BigDec2);</div><div class="line">System.out.println(<span class="string">"BigDec1 = "</span> + BigDec1);</div><div class="line"></div><div class="line"><span class="comment">// 减 Multiplication of two BigDecimals</span></div><div class="line">BigDec1 = BigDec1.subtract(BigDec2);</div><div class="line">System.out.println(<span class="string">"BigDec1 = "</span> + BigDec1);</div><div class="line"></div><div class="line"><span class="comment">// 乘 Subtraction of two BigDecimals</span></div><div class="line">BigDec1 = BigDec1.multiply(BigDec2);</div><div class="line">System.out.println(<span class="string">"BigDec1 = "</span> + BigDec1);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 除 Division of two BigDecimals</span></div><div class="line">BigDec1 = BigDec1.divide(BigDec2);</div><div class="line">System.out.println(<span class="string">"BigDec1 = "</span> + BigDec1);</div><div class="line"><span class="comment">// 四舍五入，精度默认0</span></div><div class="line">BigDec11 = BigDec1.divide(BigDec2, RoundingMode.HALF_UP);</div><div class="line"></div><div class="line"><span class="comment">// 幂运算 BigDecima1 raised to the power of 2</span></div><div class="line">BigDec1 = BigDec1.pow(<span class="number">2</span>);</div><div class="line">System.out.println(<span class="string">"BigDec1 = "</span> + BigDec1);</div><div class="line"></div><div class="line"><span class="comment">// 取负值 Negate value of BigDecimal1</span></div><div class="line">BigDec1 = BigDec1.negate();</div><div class="line">System.out.println(<span class="string">"BigDec1 = "</span> + BigDec1);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// BigDecimal 转 double</span></div><div class="line"><span class="comment">// java.math.BigDecimal.doubleValue()</span></div><div class="line"></div><div class="line"><span class="comment">// double 转 BigDecimal</span></div><div class="line"><span class="comment">// java.math.BigDecimal.valueOf(double)</span></div></pre></td></tr></table></figure>
<p>如何进行浮点数精度计算？<br>Java中的简单浮点数类型float和double不能够进行运算。</p>
<p>CPU表示浮点数由两个部分组成：指数和尾数，这样的表示方法一般都会失去一定的精确度，有些浮点数运算也会产生一定的误差。<br>其实java的float只能用来进行科学计算或工程计算，在大多数的商业计算中，一般采用java.math.BigDecimal类来进行精确计算。</p>
<p>在使用BigDecimal类来进行计算的时候，主要分为以下<code>步骤</code>：<br>1、用float或者double变量构建BigDecimal对象。<br>2、通过调用BigDecimal的加，减，乘，除等相应的方法进行算术运算。<br>3、把BigDecimal对象转换成float，double，int等类型。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 验证double直接计算失精度 </span></div><div class="line">Random random = <span class="keyword">new</span> Random();</div><div class="line">        </div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>;i++)&#123;</div><div class="line">    Double d1 = random.nextDouble();</div><div class="line">    BigDecimal bd1 = BigDecimal.valueOf(d1);</div><div class="line">    bd1 = bd1.setScale(<span class="number">2</span>,BigDecimal.ROUND_HALF_UP);</div><div class="line">    </div><div class="line">    Double d2 = random.nextDouble();</div><div class="line">    BigDecimal bd2 = BigDecimal.valueOf(d2);</div><div class="line">    bd2 = bd2.setScale(<span class="number">2</span>,BigDecimal.ROUND_HALF_UP);</div><div class="line">    </div><div class="line">    System.out.println(bd1.doubleValue() + <span class="string">" + "</span> + bd2.doubleValue() + <span class="string">" = "</span> + (bd1.doubleValue() + bd2.doubleValue()));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Double.valueOf(String) and Float.valueOf(String)都会丢失精度。</p>
</blockquote>
<p>不可变类比可变类更易于设计、实现和使用。</p>
<p>实现不可变类，4条原则：</p>
<ul>
<li>不提供任何会<code>修改对象</code>状态的方法</li>
<li>保证类不会被扩展（final类 或 工厂方法）</li>
<li>使所有域都是<code>私有</code>的<code>final</code>域</li>
<li>客户端无法获取到可变组件引用</li>
</ul>
<p>应该确保没有一个方法能够对对象的状态产生<code>外部可见</code>的改变。</p>
<p>不可变对象方法可以设计为<code>函数式</code>的</p>
<p>不可变对象<code>只有一种状态</code>，即对象创建时的状态。</p>
<p>不可变对象本质是<code>线程安全的</code>，他们不要求同步。</p>
<p>不可变对象可以被<code>自由地共享</code>。</p>
<p>不可变类可以提供一些静态工厂，把频繁被请求的实例缓存起来。</p>
<p>不可变类真正唯一的缺点是：对于每一个不同的值都需要一个单独的对象。<br>解决方法是提供可变配套类。String类，提供了公有的可变配套类StringBuilder。</p>
<p>许多不可变类拥有一个或多个非final的域，它们在第一次被请求执行计算时，把计算结果缓存在这些域中。<br>如：String的HashCode()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java.lang.String.hashCode()</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> h = hash;</div><div class="line">        <span class="keyword">int</span> len = count;</div><div class="line">    <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">int</span> off = offset;</div><div class="line">        <span class="keyword">char</span> val[] = value;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">                h = <span class="number">31</span>*h + val[off++];</div><div class="line">            &#125;</div><div class="line">            hash = h;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> h;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除非有令人信服的理由要使域变成非final的，否则要使每个域都是final的。</p>
<h2 id="复合优先于继承"><a href="#复合优先于继承" class="headerlink" title="复合优先于继承"></a>复合优先于继承</h2><p><code>tip-16</code></p>
<p>对<code>普通的具体类</code>进行<code>跨越包边界</code>的继承，是非常危险的</p>
<p>继承打破了封装性</p>
<p>只有当子类真实是超类的子类时，才适合用继承<br>只有两者存在“is-a”关系时，才使用继承</p>
<h2 id="要么为继承而设计，并提提供文档说明，要么就禁止继承"><a href="#要么为继承而设计，并提提供文档说明，要么就禁止继承" class="headerlink" title="要么为继承而设计，并提提供文档说明，要么就禁止继承"></a>要么为继承而设计，并提提供文档说明，要么就禁止继承</h2><p><code>tip-17</code><br>类的文档必须精确地描述覆盖每个方法所带来的影响。</p>
<p>类必须通过某种形式提供适当的钩子（hook），以便能够进入到它的<code>内部工作流程</code>中。<br>y<br>好的API文档应该描述给定方法<code>做了什么工作</code>，<code>而不是</code>描述它是<code>如何做到的</code>。</p>
<p>为继承而设计类，应该尽可能少地暴露受保护的成员。</p>
<p>为了继承而设计的类，唯一测试方法就是编写子类。（3个子类通常足以测试一个可扩展的类）</p>
<p>构造器决不能调用可被覆盖的方法。（因为子类中覆盖版本的方法将会在子类的构造器运行之前被调用）</p>
<h2 id="接口优于抽象类"><a href="#接口优于抽象类" class="headerlink" title="接口优于抽象类"></a>接口优于抽象类</h2><p><code>tip-18</code></p>
<p>通过对每个重要接口都提供一个抽象的骨架实现类，把接口和抽象类的优点结合起来。</p>
<p>实现这个接口的类可以把对于接口的调用，转发到一个内部私有类的实例上，这个内部私有类扩展了骨架实现类。</p>
<h2 id="接口只用于定义类型"><a href="#接口只用于定义类型" class="headerlink" title="接口只用于定义类型"></a>接口只用于定义类型</h2><p><code>tip-19</code><br>类实现接口时，接口就充当可以引用这个类的实例的类型（type）。</p>
<p>类实现接口，表明客户端可以<code>对这个类的实例实施某些动作</code>。任何其他目的定义接口都是不恰当的。</p>
<p>常量接口是对接口的<code>不良使用</code>。</p>
<p>使用<code>枚举类型</code>或不可实例化的<code>工具类</code>导出常量</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhysicalConstants</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">PhysicalConstants</span><span class="params">()</span> </span>&#123; &#125;  <span class="comment">// Prevents instantiation</span></div><div class="line"></div><div class="line">  <span class="comment">// Avogadro's number (1/mol)</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> AVOGADROS_NUMBER   = <span class="number">6.02214199e23</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Boltzmann constant (J/K)</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> BOLTZMANN_CONSTANT = <span class="number">1.3806503e-23</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Mass of the electron (kg)</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> ELECTRON_MASS      = <span class="number">9.10938188e-31</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="用函数对象表示策略"><a href="#用函数对象表示策略" class="headerlink" title="用函数对象表示策略"></a>用函数对象表示策略</h2><p><code>tip-21</code></p>
<p>函数指针主要用途是实现策略（Strategy）模式</p>
<p>通常被实现为私有的静态成员类，并通过共有的<code>静态final域</code>导出</p>
<h2 id="优先考虑静态成员类"><a href="#优先考虑静态成员类" class="headerlink" title="优先考虑静态成员类"></a>优先考虑静态成员类</h2><p><code>tip-22</code></p>
<p><code>内部类</code></p>
<p>嵌套类 指被定义在另一个类的内部的类。</p>
<p>嵌套类存在的目的<code>只是</code>为它的外围类提供服务。</p>
<p>嵌套类有4种：</p>
<ul>
<li>静态成员类</li>
<li>非静态成员类</li>
<li>匿名类</li>
<li>局部类</li>
</ul>
<p>静态成员类常见用法是作为共有的辅助类。如Calculator.Operation.PLUS</p>
<p>成员类不要求<code>访问外围实例</code>，始终把<code>static</code>修饰放在它的声明中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//非静态内部类，持有有外部类this</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String name = <span class="string">"MAH"</span>;</div><div class="line">    <span class="comment">//非静态内部类</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Num = <span class="number">4</span>; <span class="comment">//非静态内部类的Feild</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acc</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(name); <span class="comment">//非静态内部类可以直接访问外部类的成员</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accessInner</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"内部类的Num值是："</span> + <span class="keyword">new</span> Inner().Num);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>匿名类的常见用法是动态地创建函数对象、创建过程对象（如Runnable、TimerTask）、静态工厂方法内部。</p>
<p>局部类是4中嵌套类中用的最少的类。 在任何“可以声明局部变量”的地方声明。</p>
<h1 id="泛型（generic）"><a href="#泛型（generic）" class="headerlink" title="泛型（generic）"></a>泛型（generic）</h1><h2 id="请不要在新代码中使用原生态类型"><a href="#请不要在新代码中使用原生态类型" class="headerlink" title="请不要在新代码中使用原生态类型"></a>请不要在新代码中使用原生态类型</h2><p><code>tip-23</code></p>
<p>无限制通配符类型，表示不确定或者不关心实际类型参数。【<code>Set&lt;?&gt;</code>】</p>
<p>两个使用原生态类型的例外，因为运行时类型擦除（erasure）：</p>
<ul>
<li>类文字中必须使用原生态类型</li>
<li>参数化类型上使用instanceof是非法的</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(o <span class="keyword">instanceof</span> Set)&#123;</div><div class="line">    <span class="comment">// 识别类型之后，必须将它转为通配符类型，而不是原生态类型</span></div><div class="line">    Set&lt;?&gt; m = (Set&lt;?&gt;)o;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="消除非受检警告"><a href="#消除非受检警告" class="headerlink" title="消除非受检警告"></a>消除非受检警告</h2><p><code>tip-24</code></p>
<p>尽可能消除每一个非受检警告（unchecked case warning）</p>
<p>无法消除警告，同时可以证明引起警告的代码是安全的，可以使用@SuppressWarnings(“unchecked”)禁止警告，并注释说明</p>
<h2 id="列表优于数组"><a href="#列表优于数组" class="headerlink" title="列表优于数组"></a>列表优于数组</h2><p><code>tip-25</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 运行时异常</span></div><div class="line">Object[] objectArray = <span class="keyword">new</span> Long[<span class="number">1</span>];</div><div class="line">objectArray[<span class="number">0</span>] = <span class="string">"fit"</span>; <span class="comment">// Throws ArrayStoreException</span></div><div class="line"></div><div class="line"><span class="comment">// 无法编译</span></div><div class="line">List&lt;Object&gt; ol = <span class="keyword">new</span> ArrayList&lt;Long&gt;();</div><div class="line">ol.add(<span class="string">"fit"</span>);</div></pre></td></tr></table></figure>
<p>泛型只在编译时强化类型信息，并在运行时丢弃（或者擦除）元素类型信息。</p>
<p>数组和泛型不能很好的混合使用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt;[] stringLists = <span class="keyword">new</span> List&lt;String&gt;[<span class="number">1</span>];</div><div class="line">List&lt;Integer&gt;[] intList = Arrays.asList(<span class="number">42</span>);</div><div class="line">Object[] objects = stringLists;</div><div class="line">objects[<span class="number">0</span>] = intList;</div><div class="line"><span class="comment">// 异常</span></div><div class="line">String s = stringLists[<span class="number">0</span>].get(<span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>禁止创建泛型数组。</p>
<h2 id="优先考虑泛型"><a href="#优先考虑泛型" class="headerlink" title="优先考虑泛型"></a>优先考虑泛型</h2><p><code>tip-26</code><br><code>generic</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</div><div class="line">    <span class="keyword">private</span> Object[] elements;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">(Object[] elements)</span> </span>&#123;</div><div class="line">        <span class="comment">// 不能创建不可具化的(non-reifiable)类型的数组</span></div><div class="line">        <span class="keyword">this</span>.elements = <span class="keyword">new</span> Object[DEFAULT_INITIAL_CAPACITY];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span></span>&#123;</div><div class="line">        <span class="comment">// ensureCapacity()</span></div><div class="line">        elements[size++] = e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> == size) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 把从数组中获取的元素转为E</span></div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        E result = (E) elements[--size];</div><div class="line">        elements[size] = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>必须确保未受检的转换是安全的；<br>相关的数组保存在一个私有的域中，不会被返回到客户端。</p>
<p>通配符类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// E 必须是Delayed的子类 ps.每个类型都是自身的子类型</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayQueue</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Delayed</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;</span>;</div></pre></td></tr></table></figure>
<h2 id="优先考虑泛型方法"><a href="#优先考虑泛型方法" class="headerlink" title="优先考虑泛型方法"></a>优先考虑泛型方法</h2><p><code>tip-27</code></p>
<p>静态工具方法尤其适合于泛型化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 类型参数在方法修饰符及其返回类型之间</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function">Set&lt;E&gt; <span class="title">union</span><span class="params">(Set&lt;E&gt; s1, Set&lt;E&gt; s2)</span></span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 编解码接口</div><div class="line"> * <span class="doctag">@author</span> wangdianzhuang</div><div class="line"> * <span class="doctag">@date</span> 2019/2/20</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Codec</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 解码</div><div class="line">     * <span class="doctag">@param</span> data</div><div class="line">     * <span class="doctag">@param</span> clazz</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    &lt;T&gt; <span class="function">T <span class="title">decode</span><span class="params">(String data, Class&lt;T&gt; clazz)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 编码</div><div class="line">     * <span class="doctag">@param</span> obj</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">String <span class="title">encode</span><span class="params">(Object obj)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * fastjson 编解码</div><div class="line"> * <span class="doctag">@author</span> wangdianzhuang</div><div class="line"> * <span class="doctag">@date</span> 2019/2/20</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastjsonCodec</span> <span class="keyword">implements</span> <span class="title">Codec</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">decode</span><span class="params">(String data, Class&lt;T&gt; clazz)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> JSON.parseObject(data, clazz);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> JSON.toJSONString(obj, SerializerFeature.WriteDateUseDateFormat);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>泛型方法 无需明确指定类型参数的值，编译期通过检查参数的类型来计算类型参数的值。</p>
<p><t extend="" comparable<t="">&gt;  针对可以与自身进行比较的每个类型T</t></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// extends 指定两个参数</span></div><div class="line"> <span class="keyword">private</span> &lt;T extends Enum &amp; ConfigOption&gt; <span class="function"><span class="keyword">void</span> <span class="title">parseConfigOptions</span><span class="params">(Class&lt;T&gt; configOptionType)</span></span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>应该确保新方法可以不用转换就能使用。</p>
<h2 id="利用有限制通配符类提升API的灵活性"><a href="#利用有限制通配符类提升API的灵活性" class="headerlink" title="利用有限制通配符类提升API的灵活性"></a>利用有限制通配符类提升API的灵活性</h2><p><code>tip-28</code></p>
<p>&lt;? extends T&gt;： 上界通配符（Upper Bounds Wildcards)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 装水果的盘子</span></div><div class="line">Plate&lt;? extends Fruit&gt;</div></pre></td></tr></table></figure>
<p>&lt;? super T&gt;：下界通配符（Lower Bounds Wildcards)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 一个能放水果以及一切是水果基类的盘子</span></div><div class="line">Plate&lt;? <span class="keyword">super</span> Fruit&gt;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java.util.Set#addAll</span></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 移除此队列中所有可用的元素，并将它们添加到给定 collection 中</span></div><div class="line"><span class="comment">// java.util.concurrent.BlockingQueue#drainTo(java.util.Collection&lt;? super E&gt;)</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">drainTo</span><span class="params">(Collection&lt;? <span class="keyword">super</span> E&gt; c)</span></span></div></pre></td></tr></table></figure>
<p>通配符使用基本原则PECS： producer-extends、consumer-super</p>
<p>PE: 生产数据，可以泛型为下届<br>CS： 消费数据，可以子类作为父类操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 入参为T类型，T为上届（入参为T子类）</span></div><div class="line"><span class="comment">// 2. 返回结果Comparable为上届（结果是Comparable 的子类）</span></div><div class="line"><span class="comment">// 3. Comparable泛型参数，T为下届</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function">T <span class="title">max</span><span class="params">(List&lt;? extends T&gt; list)</span></span></div><div class="line"></div><div class="line"><span class="comment">// 泛型参数分析</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title">max</span><span class="params">(List&lt;T&gt; list)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&gt; T <span class="title">max</span><span class="params">(List&lt;T&gt; list)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; T <span class="title">max</span><span class="params">(List&lt;T&gt; list)</span></div><div class="line"></div><div class="line"><span class="comment">// 出参为Comparable类型，入参为Comparable泛型上届</span></div><div class="line"><span class="comment">// 入参为Comparable类型子类</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; T <span class="title">max</span><span class="params">(List&lt;? extend T&gt; list)</span></div></pre></td></tr></table></figure>
<p><code>不要用通配符类型作为返回类型</code>，除了为用户提供额外的灵活性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Sets.SetView&lt;? extends Number&gt; unionRet = Sets.&lt;Number&gt;union(integers, longs);</div></pre></td></tr></table></figure>
<p>如果编译期不能推断你希望它所拥有的类型，可以通过<code>显式的类型参数</code>。</p>
<h2 id="优先考虑类型安全的异构容器"><a href="#优先考虑类型安全的异构容器" class="headerlink" title="优先考虑类型安全的异构容器"></a>优先考虑类型安全的异构容器</h2><p><code>tip-29</code></p>
<p>当一个类的字面文字被用在方法中，来传达编译时和运行时的类型信息时，就被称作<code>type token</code>；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java.lang.Class#cast  将一个对象强制转换成此 Class 对象所表示的类或接口</span></div><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">cast</span><span class="params">(Object obj)</span></span></div></pre></td></tr></table></figure>
<p>Class的case方法，将对象引用动态地转换成Class对象所表示的类型。</p>
<p>List<string>.class 和 List<integer>.class 并返回相同的对象引用List.class</integer></string></p>
<h1 id="枚举和注解"><a href="#枚举和注解" class="headerlink" title="枚举和注解"></a>枚举和注解</h1><h2 id="用enum代替int常量"><a href="#用enum代替int常量" class="headerlink" title="用enum代替int常量"></a>用enum代替int常量</h2><p><code>tip-30</code><br>枚举类型是指由一组固定的常量组成的合法值的类型。</p>
<p>枚举通过共有的静态final域为每一个枚举常量导出实例。</p>
<p>枚举可添加任意的方法和域，并实现任意的接口<br>枚举类实现了Comparable、Serializable接口</p>
<p>枚举静态values方法，按声明顺序返回它的值得数组。<br>toString方法返回枚举值名称。</p>
<h2 id="用实例域代替序数"><a href="#用实例域代替序数" class="headerlink" title="用实例域代替序数"></a>用实例域代替序数</h2><p><code>tip-31</code></p>
<p>永远不要根据枚举的序数导出与它相关联的值</p>
<h2 id="用EnumSet代替位域"><a href="#用EnumSet代替位域" class="headerlink" title="用EnumSet代替位域"></a>用EnumSet代替位域</h2><p><code>tip-32</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> STYLE_BOLD = <span class="number">1</span> &lt;&lt; <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> STYLE_ITALIC = <span class="number">1</span> &lt;&lt; <span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> STYLE_UNDERLINE = <span class="number">1</span> &lt;&lt; <span class="number">2</span>;</div><div class="line"><span class="keyword">int</span> STYLE_STRIKETHROUGH = <span class="number">1</span> &lt;&lt; <span class="number">3</span>;</div></pre></td></tr></table></figure>
<p>EnumSet 枚举 set 中所有键都必须来自单个枚举类型</p>
<p>底层枚举有64个或更少的元素，整个EnumSet用单个long表示，性能比得上位域。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个包含指定元素类型的所有元素的枚举 set</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Enum&lt;E&gt;&gt; <span class="function">EnumSet&lt;E&gt; <span class="title">allOf</span><span class="params">(Class&lt;E&gt; elementType)</span></span></div><div class="line"></div><div class="line"><span class="comment">// 补集</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; <span class="title">complementOf</span><span class="params">(EnumSet&lt;E&gt; s)</span></div><div class="line"></div><div class="line"><span class="comment">// 创建一个最初包含指定元素的枚举 set</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; <span class="title">of</span><span class="params">(E e)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; <span class="title">of</span><span class="params">(E e1, E e2)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; <span class="title">of</span><span class="params">(E e1, E e2, E e3)</span></div></pre></td></tr></table></figure>
<h2 id="用EnumMap代替序数索引"><a href="#用EnumMap代替序数索引" class="headerlink" title="用EnumMap代替序数索引"></a>用EnumMap代替序数索引</h2><p><code>tip-33</code></p>
<p>EnumMap在运行速度方面能与序数索引的数组相媲美，因为EnumMap内部使用了这种数组。</p>
<p>最好不要使用序数来索引数组，而要使用EnumMap</p>
<h2 id="用接口模拟可伸缩的枚举"><a href="#用接口模拟可伸缩的枚举" class="headerlink" title="用接口模拟可伸缩的枚举"></a>用接口模拟可伸缩的枚举</h2><p>通过编写接口以及实现该接口的基础枚举类型，模拟可扩展的枚举类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 既表示枚举又表示Operation的子类型</span></div><div class="line">(&lt;T extends Enum&lt;T&gt; &amp; Operation&gt; Class&lt;T&gt;)</div><div class="line"></div><div class="line"><span class="comment">// 某个扩展Exception的类的Class对象</span></div><div class="line">Class&lt;? extends Exception&gt;</div></pre></td></tr></table></figure>
<h2 id="注解优于命名模式"><a href="#注解优于命名模式" class="headerlink" title="注解优于命名模式"></a>注解优于命名模式</h2><p><code>tip-35</code></p>
<p>开发需要程序员给源文件添加信息的工具，需要定义注解类型。</p>
<p>除了“工具铁匠（toolsmiths–特定的程序员）”之外，大多数程序员都不必定义注解类型。</p>
<h2 id="坚持使用Override注解"><a href="#坚持使用Override注解" class="headerlink" title="坚持使用Override注解"></a>坚持使用Override注解</h2><p><code>tip-36</code></p>
<p>@Override 表示被注解的方法声明覆盖了超类中的一个声明。</p>
<h2 id="用标记接口定义类型"><a href="#用标记接口定义类型" class="headerlink" title="用标记接口定义类型"></a>用标记接口定义类型</h2><p><code>tip-37</code></p>
<p>标记接口两点胜过标记注解：</p>
<ul>
<li>标记接口定义的类型有被标记的类的实例实现</li>
<li>可以被更精确的锁定</li>
</ul>
<p>需要编写一个或多个接收标记的方法时，使用标记接口。</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="必要时进行保护性拷贝"><a href="#必要时进行保护性拷贝" class="headerlink" title="必要时进行保护性拷贝"></a>必要时进行保护性拷贝</h2><p><code>tip-39</code></p>
<p>不可变时间周期类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.Date;</div><div class="line"></div><div class="line"><span class="comment">// Bloken "immutable" time period class</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Period</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Date start;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Date end;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Period</span><span class="params">(Date start, Date end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(start.compareTo(end) &gt; <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(start + <span class="string">" "</span> + end);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.start = start;</div><div class="line">        <span class="keyword">this</span>.end = end;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> start;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getEnd</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> end;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个类似乎是不可变的，并且强加了约束条件<br>因为<code>Date类本身是可变的</code>，所以很容易违反这个约束条件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// attack the internals of a Period instance</span></div><div class="line">Data start = <span class="keyword">new</span> Date();</div><div class="line">Date end = <span class="keyword">new</span> Date();</div><div class="line">Period p = <span class="keyword">new</span> Period(start, end);</div><div class="line"></div><div class="line"><span class="comment">// Deprecated</span></div><div class="line"><span class="comment">// end.setYear(78);</span></div><div class="line"></div><div class="line">Calendar calendar = Calendar.getInstance();</div><div class="line">calendar.setTime(end);</div><div class="line">calendar.set(Calendar.YEAR, <span class="number">1978</span>);</div><div class="line">end.setTime(calendar.getTimeInMillis());</div></pre></td></tr></table></figure>
<p>对构造器的每个可变参数进行<code>保护性拷贝</code>是必要的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Period</span><span class="params">(Date start, Date end)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.start = <span class="keyword">new</span> Date(start.getTime());</div><div class="line">    <span class="keyword">this</span>.end = <span class="keyword">new</span> Date(end.getTime());</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(start.compareTo(end) &gt; <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(start + <span class="string">" "</span> + end);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>没有使用Date的clone()进行保护性拷贝。<br>因为Date是非final的，不能保证clone()返回java.util.Date的对象</p>
<p>对于参数类型可以被<code>不可信任方</code>子类化的参数，不要使用clone()进行保护性拷贝。</p>
<p>因为访问方法提供了对其<code>可变内部成员</code>的访问能力,修改为</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getStart</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Date(start.getTime());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getEnd</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Date(end.getTime());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果正在考虑由客户提供的<code>对象引用</code>作为内部Set实例的元素，或者做为内部Map的键,<br>就应该意识到，如果这个对象在插入之后再被修改，Set或Map的约束条件就会遭到破坏。</p>
<p>长度非零的数组总是可变的。<br>把内部数组返回给客户端之前，应该总是<code>进行保护性拷贝</code>。另一种解决方案是，给客户端<code>返回数组的不可变视图</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Integer[] values = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</div><div class="line">List&lt;Integer&gt; asList = Collections.unmodifiableList(Arrays.asList(values));</div></pre></td></tr></table></figure>
<p>类具有从客户端得到或返回客户端的<code>可变组件</code>，类就必须<code>保护性的拷贝</code>这些组件。<br>如果<code>拷贝的成本受到限制</code>，并且类信任它的客户端不会不恰当地修改组件，<br>就可以<code>在文档中指明</code>客户端的职责不得修改受到影响的组件，以此来代替保护性拷贝。</p>
<h2 id="复合优先于继承-1"><a href="#复合优先于继承-1" class="headerlink" title="复合优先于继承"></a>复合优先于继承</h2><h2 id="慎用可变参数"><a href="#慎用可变参数" class="headerlink" title="慎用可变参数"></a>慎用可变参数</h2><p><code>tip-42</code><br>Java 1.5 增加了可变参数 variable arity method</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doMoreThings</span><span class="params">(Foo bar, Object ... things)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>可变参数方法接收0个或者多个指定类型的参数。<br>可变参数机制通过创建一个数组，数组大小为调用位置所传参数的数量，然后将参数传到数组，最后将数据组传递给方法。</p>
<p>重视性能情况下，使用可变参数机制要特别小心。<br>可变参数每次调用会导致一次数据分配和初始化。<br>若多数情况下0-3个参数，可使用4个方法重载优化性能。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a1)</span></span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> ... rest)</span></span>&#123;&#125;</div></pre></td></tr></table></figure>
<h2 id="返回零长度的数组或者集合，而不是null"><a href="#返回零长度的数组或者集合，而不是null" class="headerlink" title="返回零长度的数组或者集合，而不是null"></a>返回零长度的数组或者集合，而不是null</h2><p><code>tip-43</code></p>
<p>返回类型为数组或集合的方法没有理由返回null，而是应该返回一个零长度的数组或集合。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Collections 提供了不可变的空集合</span></div><div class="line">Collections.emptyList();</div><div class="line">Collections.emptySet();</div><div class="line">Collections.emptyMap();</div></pre></td></tr></table></figure>
<p>每次都返回同一个零长度的空数组是可能的，因为零长度的数组是<code>不可变的</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Cheese[] EMPTY_CHEESE_ARRAY = <span class="keyword">new</span> Cheese[<span class="number">0</span>];</div></pre></td></tr></table></figure>
<h2 id="为所有导出的Api元素编写文档注释"><a href="#为所有导出的Api元素编写文档注释" class="headerlink" title="为所有导出的Api元素编写文档注释"></a>为所有导出的Api元素编写文档注释</h2><p><code>tip-44</code></p>
<h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><h2 id="同步访问共享的可变数据"><a href="#同步访问共享的可变数据" class="headerlink" title="同步访问共享的可变数据"></a>同步访问共享的可变数据</h2><p><code>tip-66</code></p>
<p>Java语言规范保证<code>读</code>或<code>写</code>一个变量是<code>原子的</code>(atomic)，除非这个变量的类型为long或double。</p>
<p>语言规范保证了线程在读取原子数据的时候，不会看到任意的数值，<br>但并不保证线程写入的值对于另一个线程是可见的。（可见性）</p>
<h2 id="避免过度同步"><a href="#避免过度同步" class="headerlink" title="避免过度同步"></a>避免过度同步</h2><p><code>tip-67</code></p>
<p>不要从同步区域调用外来方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 观察者模式</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(SetObserver&lt;E&gt; observer)</span></span>&#123;</div><div class="line">    <span class="comment">//遍历观察者列表，加锁</span></div><div class="line">    <span class="comment">//避免遍历期间Iterator出现ConcurrentModificationException</span></div><div class="line">    <span class="keyword">synchronized</span>(observers)&#123;</div><div class="line">        <span class="keyword">for</span>(SetObserver&lt;E&gt; observer : observers)&#123;</div><div class="line">            <span class="comment">//调用外部方法(观察者方法)</span></div><div class="line">            <span class="comment">//观察者方法可以获取当前对象，且内置锁可重入</span></div><div class="line">            <span class="comment">//观察者方法中可以修改observers，导致遍历异常</span></div><div class="line">            observer.added(<span class="keyword">this</span>, element);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过将外来方法调用移出同步的代码块解决这个问题，使用observers快照</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(SetObserver observer)</span></span>&#123;</div><div class="line">    List&lt;SetObserver&gt; snapshot = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">synchronized</span>(observers)&#123;</div><div class="line">        snapshot = <span class="keyword">new</span> ArrayList&lt;SetObserver&gt;(observers);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(SetObserver observer : snapshot)&#123;</div><div class="line">        observer.added(<span class="keyword">this</span>, element);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>消息通知通常比观察者列表变化更频繁，<br>故使用CopyOnWriteArrayList作为观察者列表更合适</p>
<p>在同步区域调用外来方法，其他线程对受保护资源的访问会遭到不必要的拒绝。<br>应该在同步区域做尽量少的工作。</p>
<p>过度同步实际成本并不是获取锁所花费的CPU时间，而是失去了并行的机会；<br>以及因为需要确保每个核都有一个<code>一致的内存视图</code>而导致的延迟。<br>另一个潜在开销在于，它会限制VM<code>优化代码执行</code>的能力。</p>
<p>当不确定是否需要<code>内部同步</code>时，就不要同步类，<br>而应该建立文档，注明它不是线程安全的。</p>
<p>内部同步可以使用不同的方法来实现高并发。<br>如：拆分锁(lock splitting)、分离锁(lock striping)和非阻塞(nonblocking)</p>
<p>方法修改静态域，<code>必须同步</code>对这个域的访问。<br>客户在这种方法上执行外部同步是不可能的，<br>因为不能保证不相关的客户端也会执行外部同步。</p>
<p>未同步静态域访问示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> nextSerialNumber = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">generateSerialNumber</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> nextSerialNumber++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="executor和task优先于线程"><a href="#executor和task优先于线程" class="headerlink" title="executor和task优先于线程"></a>executor和task优先于线程</h2><p><code>tip-68</code><br>Executor Framework是一个基于接口的任务执行工具。</p>
<p>java.util.concurrent.Executors类包含静态工厂方法，能提供大多数的executor，<br>使用ThreadPoolExecutor类可以最大限度的定制线程池。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果池中当前有多于 corePoolSize 的线程，则这些多出的线程在空闲时间超过 keepAliveTime 时将会终止</span></div><div class="line"><span class="keyword">private</span> ExecutorService singleThreadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</div><div class="line">            <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">            <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">1024</span>), <span class="keyword">new</span> ThreadFactoryBuilder()</div><div class="line">            .setNameFormat(<span class="string">"trace-compare-pool-%d"</span>).build(), <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</div></pre></td></tr></table></figure>
<p>任务(task)有两种:</p>
<ul>
<li>Runnable</li>
<li>Callable (有返回值)</li>
</ul>
<p>轻载的服务器，可以使用Executors.newCachedThreaPool()<br>大负载的服务器，最好使用Executors.newFixedThreadPool();<br>被调度的线程池 Executors.newScheduledThreadPool()可以替代java.util.Timer</p>
<p>timer唯一的线程抛出未被捕获异常，会停止。</p>
<p>被调度的线程池支持多线程，且优雅的从抛出非受检异常的任务中恢复。</p>
<p>java.util.Timer 任务抛出异常后，线程终止示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Timer timer = <span class="keyword">new</span> Timer();</div><div class="line"><span class="comment">//初始延迟</span></div><div class="line"><span class="keyword">int</span> initialDelay = <span class="number">1000</span>;</div><div class="line"><span class="comment">//执行周期</span></div><div class="line"><span class="keyword">int</span> period = <span class="number">2000</span>;</div><div class="line"></div><div class="line"><span class="comment">//固定延迟</span></div><div class="line">timer.schedule(<span class="keyword">new</span> TimerTask()&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(System.nanoTime());</div><div class="line">        <span class="comment">//throw new RuntimeException("foo");</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;, initialDelay, period);</div><div class="line"></div><div class="line"><span class="comment">//固定速率</span></div><div class="line">timer.scheduleAtFixedRate(<span class="keyword">new</span> TimerTask()&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(System.nanoTime());</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"foo"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;, initialDelay,period);</div></pre></td></tr></table></figure>
<blockquote>
<p>对 Timer 对象最后的引用消失后，并且 所有未处理的任务都已执行完成，计时器的任务执行线程会正常终止（并且成为垃圾回收的对象）。但是这可能要很长时间后才发生。<br>（Timer任务执行完成之后，执行垃圾回收时才会终止。实验运行阶段造成程序不终止假象 ）</p>
</blockquote>
<p>ScheduledThreadPool 任务抛出异常时，执行当前任务的线程停止，<code>当前任务也会终止</code>；<br>任务执行器不会停止，会有新的线程被创建并执行其他任务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//初始延迟</span></div><div class="line"><span class="keyword">int</span> initialDelay = <span class="number">1000</span>;</div><div class="line"><span class="comment">//执行周期</span></div><div class="line"><span class="keyword">int</span> period = <span class="number">2000</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> corePoolSize = <span class="number">1</span>;</div><div class="line">ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(corePoolSize);</div><div class="line"><span class="comment">//固定速率，任务1</span></div><div class="line">ScheduledFuture&lt;?&gt; scheduledFuture = scheduler.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"foo:"</span> + Thread.currentThread().getName());</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"foo"</span>);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;, initialDelay, period, TimeUnit.MILLISECONDS);</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">//获取任务执行结果，任务抛出异常时能够捕获异常</span></div><div class="line">    scheduledFuture.get();</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//固定延迟的任务，任务2</span></div><div class="line">scheduler.scheduleWithFixedDelay(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"bar:"</span> + Thread.currentThread().getName());</div><div class="line">    &#125;</div><div class="line">&#125;, initialDelay, period, TimeUnit.MILLISECONDS);</div></pre></td></tr></table></figure>
<h2 id="并发工具优先于wait和notify"><a href="#并发工具优先于wait和notify" class="headerlink" title="并发工具优先于wait和notify"></a>并发工具优先于wait和notify</h2><p><code>tip-69</code><br>几乎没有理由再使用wait和notify了，<br>java 1.5提供了更高级的并发工具，<br>他们可以完成以前必须在wait和notify上手写代码才能完成的工作。</p>
<p>java.util.concurrent中更高级的工具分成三类：</p>
<ul>
<li>任务执行工具(Executor Framework)</li>
<li>并发集合(Concurrent Collection)</li>
<li>同步器(Synchronizer)</li>
</ul>
<p>wait方法的标准模式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">synchronized</span>(obj)&#123;</div><div class="line">    <span class="keyword">while</span>(conditionDoesNotHold)&#123;</div><div class="line">        obj.wait();<span class="comment">//Releases lock, and reacquires on wakeup</span></div><div class="line">        <span class="comment">//Perform action appropriate to condition</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>循环会在等待之前和之后测试条件。</p>
<p>一般情况下，应该优先使用notifyAll，而不是notify<br>使用notifyAll代替notify可以避免来自不相关线程的意外或恶意的等待。<br>否则，这样的等待会“吞掉”一个关键的通知，使真正的接收线程无限地等待下去。</p>
<h2 id="线程安全性的文档化"><a href="#线程安全性的文档化" class="headerlink" title="线程安全性的文档化"></a>线程安全性的文档化</h2><p><code>tip-70</code><br>一个类为了可被多线程安全地使用，必须在文档中清楚地说明它所支持的线程安全级别。</p>
<p>线程安全级别：</p>
<ul>
<li>不可变的</li>
<li>无条件的线程安全</li>
<li>有条件的线程安全</li>
<li>非线程安全</li>
<li>线程对立的</li>
</ul>
<blockquote>
<p>线程对立的类不能安全的被多线程并发使用，即时方法调用使用外部同步。<br>线程对立的根源通常在于，没有同步地修改静态数据。<br>如：System.runFinalizersOnExit方法是线程对立的。</p>
</blockquote>
<p>线程安全说明通常放在文档注释中。</p>
<p>静态工厂必须在文档中说明被返回对象的线程安全性。</p>
<p>私有锁对象模式（防止客户端或子类干扰同步）：</p>
<ul>
<li>只能用在无条件的线程安全类上</li>
<li>特别适用于专门为继承设计的类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">synchronized</span>(lock)&#123;</div><div class="line">        <span class="comment">//doSomething</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有条件的线程安全类必须在文档中指明“哪个方法调用序列需外部同步”，<br>以及在执行这些序列时要获取哪个锁。</p>
<h2 id="慎用延迟初始化"><a href="#慎用延迟初始化" class="headerlink" title="慎用延迟初始化"></a>慎用延迟初始化</h2><p><code>tip-71</code><br>延迟初始化是延迟到<code>需要域的值时</code>才将它初始化。</p>
<p>延迟初始化降低了初始化类或创建实例的开销，<br>却增加了访问延迟初始化的域的开销。</p>
<blockquote>
<p>延迟初始化建议:除非绝对必要，否则就不要这么做。</p>
</blockquote>
<p>静态初始化器:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ThreadSafe</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EagerInitialization</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Resource resource = <span class="keyword">new</span> Resource();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Resource <span class="title">getResource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> resource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Resource</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote><p>静态初始化器由JVM在<code>类的初始化</code>阶段执行，即在类被加载后并且<code>被线程使用</code>之前。<br>由于JVM将在初始化期间获得一个锁，并且每个线程都至少获取一次这个锁以确保这个类已经被加载，<br>因此在静态初始化期间，内存写入操作将自动对所有线程可见。</p>
<footer><strong>《Java Concurrency In Practice》</strong></footer></blockquote>
<p>静态域初始化使用<code>延迟初始化占位类</code>模式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resource</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Resource</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Resource <span class="title">getResource</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> ResourceHolder.resource;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceHolder</span></span>&#123;</div><div class="line">        <span class="keyword">static</span> Resource  resource = <span class="keyword">new</span> Resource();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实例域初始化使用<code>双重检查</code>模式：<br><code>不要这么做</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注意 volitile 必须</span></div><div class="line"><span class="keyword">private</span> volitile FieldType field4;</div><div class="line"><span class="function">FieldType <span class="title">getField4</span><span class="params">()</span></span>&#123;</div><div class="line">    FieldType result = field4;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == result)&#123;</div><div class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</div><div class="line">            result  = field4;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">null</span> == result)&#123;</div><div class="line">                field4 = result = computeFieldValue();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>局部变量result确保field在已经被初始化的情况下只读取一次，<br>可以提升性能；</p>
</blockquote>
<p>可以接受重复初始化的实例域，可以考虑<code>单重检查模式</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> hash;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> h = hash;</div><div class="line">    <span class="keyword">int</span> len = count;</div><div class="line">    <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">int</span> off = offset;</div><div class="line">        <span class="keyword">char</span> val[] = value;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">            h = <span class="number">31</span>*h + val[off++];</div><div class="line">        &#125;</div><div class="line">        hash = h;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> h;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>String 使用单重检查模式缓存散列码</p>
</blockquote>
<h2 id="不要依赖于线程调度器"><a href="#不要依赖于线程调度器" class="headerlink" title="不要依赖于线程调度器"></a>不要依赖于线程调度器</h2><p><code>tip-72</code><br>任何依赖线程调度器来达到正确性或者性能要求的程序，很可能都是<code>不可移植</code>的。</p>
<p>Thread.yield没有可测试的语义，<br>应该使用Thread.sleep(1)替代Thread.yield进行并发测试。</p>
<p>线程优先级是Java平台上最不可移植的特性之一。</p>
<p>线程优先级可以用来提高一个已经<code>能够正常工作</code>的程序的服务质量，<br>但永远不应该用来“修正”一个原本并不能工作的程序。</p>
<h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><h2 id="保护性地编写readObject方法"><a href="#保护性地编写readObject方法" class="headerlink" title="保护性地编写readObject方法"></a>保护性地编写readObject方法</h2><p><code>tip-76</code><br>readObject是一个“用字节流作为唯一参数”的构造器。</p>
<p>对于每个可序列化的不可变类，<br>如果它包含了<code>私有的可变组件</code>，那么在它的readObject方法中，必须对这些组件进行保护性拷贝。</p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Design Patterns]]></title>
      <url>http://xiaozhuang.github.io/2017/04/12/design-patterns/</url>
      <content type="html"><![CDATA[<p>Java 设计模式<br><a id="more"></a></p>
<h1 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h1><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p>类的职责要单一，不能将大多的职责放在一个类中。</p>
<h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>软件实体对扩展是开放的，但对修改是关闭的。<br>即在不修改软件实体的基础上去扩展其功能。</p>
<h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><p>在软件系统中，一个可以接受基类对象的地方，必然可以接受一个子类对象。</p>
<h2 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h2><p>要针对抽象层编程，而不要针对具体类编程。</p>
<h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>使用多个专门的接口来取代一个统一的接口。</p>
<h2 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h2><p>在系统中应该尽量多使用组合和聚合关系，尽量少使用甚至不适用继承关系。</p>
<h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><p>一个软件实体对其他实体的引用越少越好，<br>或者说如果两个类不必彼此直接通信，<br>那么这两个类就不应当发生直接的相互作用，<br>而是通过引入一个第三者发生间接交互。</p>
<h1 id="策略模式（Strategy-Pattern）"><a href="#策略模式（Strategy-Pattern）" class="headerlink" title="策略模式（Strategy Pattern）"></a>策略模式（Strategy Pattern）</h1><p>定义了算法族，分别封装起来，让他们之间可以相互替换，<br>此模式让算法的变化独立于使用算法的客户。</p>
<img src="/2017/04/12/design-patterns/StrategyPattern.png" alt="StrategyPattern.png" title="">
<h1 id="观察则模式"><a href="#观察则模式" class="headerlink" title="观察则模式"></a>观察则模式</h1><img src="/2017/04/12/design-patterns/Observer.png" alt="Observer.png" title="">
<p>定义了对象之间的一对多依赖，当对象改变状态时，<br>依赖它的对象会收到通知，并自动更新。</p>
<p>观察者模式让主题和观察者之间松耦合。</p>
<p>使用场景（购票为核心业务）：</p>
<ul>
<li>购票后记录文本日志</li>
<li>购票后记录数据库日志</li>
<li>购票后发送短信</li>
<li>购票送抵扣卷、兑换卷、积分</li>
<li>其他各类活动等</li>
</ul>
<p>HeadFirst示例：气象站布告板</p>
<p>Guava EventBus 观察者模式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.common.eventbus.DeadEvent;</div><div class="line"><span class="keyword">import</span> com.google.common.eventbus.EventBus;</div><div class="line"><span class="keyword">import</span> com.google.common.eventbus.Subscribe;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverExample</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(ObserverExample.class);</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EventMessage</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> msgcode;</div><div class="line">        <span class="keyword">final</span> String msg;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">EventMessage</span><span class="params">(<span class="keyword">int</span> msgcode, String msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.msgcode = msgcode;</div><div class="line">            <span class="keyword">this</span>.msg = msg;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"EventMessage [msgcode="</span> + msgcode + <span class="string">", msg="</span> + msg + <span class="string">"]"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * DeadEvent：死信（没有订阅者关注的事件）对象</div><div class="line">     * EventBus会把所有发布后没有监听者处理的事件包装为DeadEvent</div><div class="line">     * <span class="doctag">@author</span> Sunday</div><div class="line">     *</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadEventsSubscriver</span> </span>&#123;</div><div class="line">        <span class="comment">//使用注解注册事件处理器</span></div><div class="line">        <span class="meta">@Subscribe</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDeadEvent</span><span class="params">(DeadEvent deadEvent)</span> </span>&#123;</div><div class="line">            log.error(<span class="string">"DEAD EVENT: &#123;&#125;"</span>, deadEvent.getEvent());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * EventBus自动把事件分发给事件超类的监听者</div><div class="line">     * <span class="doctag">@author</span> Sunday</div><div class="line">     *</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EventMessageSubscriver</span> </span>&#123;</div><div class="line">        <span class="comment">//处理方法必须要明确地声明参数类型——期望的事件类型（或事件的父类型）</span></div><div class="line">        <span class="meta">@Subscribe</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleEventMessageEvent</span><span class="params">(EventMessage eventMessage)</span> </span>&#123;</div><div class="line">            log.error(eventMessage.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">            <span class="keyword">final</span> EventBus eventBus = <span class="keyword">new</span> EventBus(<span class="string">"example-events"</span>);</div><div class="line">            <span class="keyword">final</span> DeadEventsSubscriver deadEventsSubscriver = <span class="keyword">new</span> DeadEventsSubscriver();</div><div class="line">            EventMessageSubscriver eventMessageSubscriver = <span class="keyword">new</span> EventMessageSubscriver();</div><div class="line">            </div><div class="line">            eventBus.register(deadEventsSubscriver);</div><div class="line">            eventBus.register(eventMessageSubscriver);</div><div class="line">            </div><div class="line">            <span class="comment">// published</span></div><div class="line">            eventBus.post(<span class="string">"This is dead event"</span>);</div><div class="line">            eventBus.post(<span class="keyword">new</span> EventMessage(<span class="number">5000</span>, <span class="string">"This message from hoge"</span>));</div><div class="line">            eventBus.post(<span class="keyword">new</span> EventMessage(<span class="number">1000</span>, <span class="string">"This message from fuga"</span>)); </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h1><p>动态地将功能附加到对象上。</p>
<img src="/2017/04/12/design-patterns/decorate.png" alt="decorate.png" title="">
<p>使用组合和委托运行时动态扩展行为；</p>
<p>使用场景：<br>Java I/O、Java线程安全结合包装器、RequestWrapper</p>
<p>HeadFirst示例：星巴兹咖啡订单系统，包装添加不同调料的咖啡</p>
<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>简单工厂模式由一个工厂决定创建出哪一种产品类的实例。</p>
<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>定义一个创建对象的接口，但由子类决定要实例化的类是哪一个。<br>工厂方法模式让类把实例化推迟到子类。</p>
<p>工厂类不再负责所有产品的创建，而是将具体创建的工作交给子类。</p>
<p>加入新产品，只需向系统中加入这个产品及其所对应的工厂类。</p>
<p>HeadFirst示例：不同地区披萨店</p>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>抽象工厂模式可以向客户端提供一个接口，使客户端在不指定产品的具体类型情况下，<br>创建多个产品族中的产品对象。</p>
<p>提供一个接口，用于创建相关或依赖对象的家族，并不需要明确指定具体类。</p>
<p>抽象工厂模式可以向客户端提供一个接口，使客户端在不指定产品的具体类型情况下，<br>创建多个产品族中的产品对象。</p>
<p>使用场景：电脑配件工厂（pc、mac）<br>HeadFirst示例：不同地区披萨原料工厂</p>
<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>代码示例，参考《Effective Java》tip-71</p>
<h1 id="适配器模式与外观模式"><a href="#适配器模式与外观模式" class="headerlink" title="适配器模式与外观模式"></a>适配器模式与外观模式</h1><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>将一个类的接口，转换成客户期望的另一个接口。<br>适配器让原本接口不兼容的类可以合作无间。</p>
<img src="/2017/04/12/design-patterns/adapterPattern.png" alt="adapterPattern.png" title="">
<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p>提供一个统一的接口，用来访问子系统中的一群接口。<br>外观定义了一个高层接口，让子系统更容易使用。</p>
<img src="/2017/04/12/design-patterns/facadePattern.png" alt="facadePattern.png" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="https://sourcemaking.com/design_patterns/facade" target="_blank" rel="external">Facade Design Pattern</a></cite></footer></blockquote>
<p>外观不只<code>简化</code>了接口，也将客户从组件的子系统中<code>解耦</code>。</p>
<h1 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h1><p>在一个方法中定义一个<code>算法的骨架</code>，而将一些步骤延迟到子类中。<br>模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</p>
<img src="/2017/04/12/design-patterns/templateMethod.png" alt="templateMethod.png" title="">
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">templateMethod</span><span class="params">()</span></span>&#123;</div><div class="line">        primitiveOperation1();</div><div class="line">        primitiveOperation2();</div><div class="line">        concreteOperation();</div><div class="line">        hook();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//抽象方法</span></div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">primitiveOperation1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">primitiveOperation2</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//具体方法</span></div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">concreteOperation</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//钩子</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hook</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>模板方法的抽象类可以定义<code>具体方法</code>、<code>抽象方法</code>和<code>钩子</code>。</p>
<p>钩子可以不做任何事情或只做默认的事情。</p>
<p>钩子可以让子类实现算法中<code>可选</code>的部分，<br>或让子类对模板中某些即将发生（或刚刚发生）的步骤作出反应。</p>
<p>使用场景：SpringMVC HandlerMethodAdapter（子类RequestMappingHandlerAdapter）<br>Spring MVC ViewResolver（子类）</p>
<h1 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h1><p>通过<code>改变对象内部状态</code>帮助对象<code>控制行为</code>。</p>
<img src="/2017/04/12/design-patterns/StatePattern.png" alt="StatePattern.png" title="">
<p>Context将行为委托给当前状态</p>
<p>状态模式和策略模式类图一样，区别在于“意图”</p>
<p>策略模式通常用行为类或算法来<code>配置</code>Content，<br>可作为除继承外的弹性替代方案。</p>
<p>状态模式允许Context随状态的改变而<code>改变行为</code>，<br>可作为Context中放置很多<code>条件判断</code>的替代方案。</p>
<blockquote>
<p>使用抽象类实现状态模式，抽象类中容易添加新方法，<br>不需要打破具体状态实现。</p>
<p>状态转换放置在状态类中的缺点：状态类之间产生依赖。<br>通过使用Context上的getter方法把依赖减到最小。</p>
</blockquote>
<p>使用场景：酒店房间，未预定状态、已预定状态</p>
<p>HeadFirst示例：糖果机，等待投币、已投币、正在出售、已售罄</p>
<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>为另一个对象提供一个替身或占位符以控制对这个对象的访问。</p>
<img src="/2017/04/12/design-patterns/proxyPattern.png" alt="proxyPattern.png" title="">
<p>应用场景：</p>
<ul>
<li>远程代理</li>
<li>虚拟代理</li>
<li>保护代理</li>
</ul>
<blockquote>
<p>虚拟代理：作为创建开销大的对象的代表。如：ImageProxy，图片加载完成前输出提示信息，加载完成刷新显示</p>
</blockquote>
<p>静态代理：代理类是在编译时就实现好的。代理类是一个实际的 class 文件。<br>动态代理：代理类是在运行时生成的。在<code>运行时动态生成的类字节码</code>，并加载到JVM中。</p>
<p>1.使用动态代理，动态为接口生成实现类(仅写接口不写实现)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 接口</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 代理类的调用处理器</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="comment">// do something</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyDemo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 1.创建调用处理器对象</span></div><div class="line">        ProxyHandler handler = <span class="keyword">new</span> ProxyHandler(); </div><div class="line">        <span class="comment">// 2.动态生成代理对象</span></div><div class="line">        Subject proxySubject = (Subject) Proxy.newProxyInstance(Subject.class.getClassLoader(),</div><div class="line">                <span class="keyword">new</span> Class[] &#123; Subject.class &#125;, handler); </div><div class="line">        <span class="comment">//3.调用接口方法</span></div><div class="line">        proxySubject.request();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.动态代理保护对象访问</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 接口</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject2Impl</span> <span class="keyword">implements</span> <span class="title">Subject2</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">        log();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Overrid</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">        log();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span></span>&#123;</div><div class="line">        String className = <span class="keyword">this</span>.getClass().getName();</div><div class="line">        String methodName = Thread.currentThread().getStackTrace()[<span class="number">1</span>].getMethodName();</div><div class="line">        System.out.println(className + <span class="string">"."</span> + methodName + <span class="string">"() invoked."</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 代理类的调用处理器</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyHandler2</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Subject2 subject2;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyHandler2</span><span class="params">(Subject2 subject2)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.subject2 = subject2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="comment">// do something</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(method.getName().equals(<span class="string">"method1"</span>))&#123;</div><div class="line">            <span class="keyword">return</span> method.invoke(subject2, args);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            System.out.println(<span class="string">"You Have No permissions Invoke This Method"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyDemo2</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Subject2 subject2 = <span class="keyword">new</span> Subject2Impl();</div><div class="line">        <span class="comment">// 1.创建调用处理器对象</span></div><div class="line">        ProxyHandler2 handler2 = <span class="keyword">new</span> ProxyHandler2(subject2); </div><div class="line">        <span class="comment">// 2.动态生成代理对象</span></div><div class="line">        Subject2 proxySubject2 = (Subject2) Proxy.newProxyInstance(Subject2.class.getClassLoader(),</div><div class="line">                <span class="keyword">new</span> Class[] &#123; Subject2.class &#125;, handler2); </div><div class="line">        </div><div class="line">        <span class="comment">//3.调用接口方法</span></div><div class="line">        proxySubject2.method1();</div><div class="line">        </div><div class="line">        proxySubject2.method2();</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JDK中所要进行动态代理的类必须要实现一个接口，也就是说只能对该类所实现接口中定义的方法进行代理，这在实际编程中具有一定的局限性，而且使用反射的效率也并不是很高。</p>
<p>CGLIB是一个功能强大，高性能的代码生成包。它为没有实现接口的类提供代理，为JDK的动态代理提供了很好的补充。</p>
<p>CGLib不能对声明为final的方法进行代理</p>
<p>CGLib拦截类方法调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableDAO</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"create() is running !"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"query() is running !"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"update() is running !"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"delete() is running !"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TableDAOMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy paoxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">            System.out.println(<span class="string">"before invoke "</span> + method.getName() + <span class="string">"()"</span>);</div><div class="line">            Object result = paoxy.invokeSuper(obj, args);</div><div class="line">            System.out.println(<span class="string">"after invoke "</span> + method.getName() + <span class="string">"()"</span>);</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//拦截方法调用</span></div><div class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</div><div class="line">        enhancer.setSuperclass(TableDAO.class);</div><div class="line">        enhancer.setCallback(<span class="keyword">new</span> TableDAOMethodInterceptor());</div><div class="line"></div><div class="line">        TableDAO tableDAOProxy = (TableDAO) enhancer.create();</div><div class="line"></div><div class="line">        System.out.println(tableDAOProxy.getClass().getName());</div><div class="line">        tableDAOProxy.create();</div><div class="line">        tableDAOProxy.delete();</div><div class="line">        tableDAOProxy.update();</div><div class="line">        tableDAOProxy.query();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>CGLib拦截接口方法调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableDAO</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">DAO</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TableDAOMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">            System.out.println(<span class="string">"before invoke "</span> + method.getName() + <span class="string">"()"</span>);</div><div class="line">            <span class="comment">//Object result = proxy.invokeSuper(obj, args);</span></div><div class="line">            System.out.println(<span class="string">"after invoke "</span> + method.getName() + <span class="string">"()"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//拦截方法调用</span></div><div class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</div><div class="line">        enhancer.setSuperclass(DAO.class);</div><div class="line">        enhancer.setCallback(<span class="keyword">new</span> TableDAOMethodInterceptor());</div><div class="line"></div><div class="line">        DAO tableDAOProxy = (DAO) enhancer.create();</div><div class="line"></div><div class="line">        <span class="comment">//System.out.println(tableDAOProxy.getClass().getName());</span></div><div class="line">        tableDAOProxy.create();</div><div class="line">        tableDAOProxy.delete();</div><div class="line">        tableDAOProxy.update();</div><div class="line">        tableDAOProxy.query();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>CGLIB原理：动态生成一个要代理类的子类，子类重写要代理的类的所有不是final的方法。<br>在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。<br>它比使用java反射的JDK动态代理要快。</p>
<p>CGLIB底层：使用字节码处理框架ASM，来转换字节码并生成新的类。</p>
<p>RMI：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.rmi.Remote;</div><div class="line"><span class="keyword">import</span> java.rmi.RemoteException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RMIInterface</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloTo</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.net.MalformedURLException;</div><div class="line"><span class="keyword">import</span> java.rmi.Naming;</div><div class="line"><span class="keyword">import</span> java.rmi.RemoteException;</div><div class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</div><div class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerOperation</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">RMIInterface</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">783820609710107386L</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">ServerOperation</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloTo</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException</span>&#123;</div><div class="line">        System.out.println(name + <span class="string">" is trying to contact!"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"Server says hello to "</span> + name;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            LocateRegistry.createRegistry (<span class="number">1099</span>);</div><div class="line">            Naming.rebind(<span class="string">"//localhost/MyServer"</span>, <span class="keyword">new</span> ServerOperation());</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.net.MalformedURLException;</div><div class="line"><span class="keyword">import</span> java.rmi.Naming;</div><div class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</div><div class="line"><span class="keyword">import</span> java.rmi.RemoteException;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.sunday.rmi_learn.rmi.RMIInterface;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RmiClient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            RMIInterface look_up = (RMIInterface) Naming.lookup(<span class="string">"rmi://localhost/MyServer"</span>);</div><div class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                <span class="keyword">if</span>(scanner.hasNext())&#123;</div><div class="line">                    String txt = scanner.nextLine();</div><div class="line">                    String response = look_up.helloTo(txt);</div><div class="line">                    System.out.println(response);</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                scanner.close();</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//String txt = JOptionPane.showInputDialog("What is your name?");</span></div><div class="line">            <span class="comment">//JOptionPane.showMessageDialog(null, reponse);</span></div><div class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (NotBoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代理模式与装饰着模式区别：<br>代理模式，使用组合模式；装饰者模式使用组合模式。<br>装饰着为对象增加行为，代理是控制对象的访问。</p>
<p>cglib 与 cglib-nodep 区别</p>
<p>cglib-#.#<em>#.jar - binary distribution, CGLIB classes only, it must be used to extend cglib classes dependant on ASM API<br>cglib-nodep-#.#</em>#.jar - binary distribution, CGLIB and renamed ASM classes, not extendable</p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaSE集合]]></title>
      <url>http://xiaozhuang.github.io/2017/03/23/javase-collection/</url>
      <content type="html"><![CDATA[<p>JavaSE 集合笔记<br><a id="more"></a></p>
<h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><img src="/2017/03/23/javase-collection/JavaCollectionsAPICollection.jpg" alt="JavaCollectionsAPICollection.jpg" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="https://www.karambelkar.info/2012/06/java-1.7-collections---uml-class-diagrams/" target="_blank" rel="external">Java 1.7 Collections - UML Class Diagrams</a></cite></footer></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java.util.Collection&lt;E&gt; 1.2 API</span></div><div class="line"><span class="keyword">package</span> java.util;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 确实改变了集合返回true，否则返回false</span></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 仅保留此指定 collection 包含的元素</span></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span></span>;</div><div class="line"></div><div class="line">    Object[] toArray();</div><div class="line">    <span class="comment">// 若arrayToFill足够大，就将集合中的元素填入数组，剩余空间补null；否则创建一个新数组</span></div><div class="line">    &lt;T&gt; T[] toArray(T[] a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java.util.Iterator&lt;E&gt; 1.2 API</span></div><div class="line"><span class="keyword">package</span> java.util;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 返回将要访问的下一个元素</span></div><div class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 删除上次调用next方法返回的元素</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 遍历过程中移除元素</span></div><div class="line">Iterator&lt;Goods&gt; goodsIterator = goodsList.iterator();</div><div class="line"><span class="keyword">while</span> (goodsIterator.hasNext()) &#123;</div><div class="line">    Goods goods = goodsIterator.next();</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == goods) &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (matchSku.equals(String.valueOf(expectSku)) &amp;&amp; goodCount.equals(expectGoodsCount)) &#123;</div><div class="line">        goodsRelation.setGoodsId(goods.getGoodId());</div><div class="line">        goodsIterator.remove();<span class="comment">//goods表中记录仅被匹配一次</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>“for each”循环可以与任何实现了Iterable接口的对象一起工作</li>
<li>应该将Java迭代器认为是位于<code>两个元素之间</code>。当调用next时，迭代器越过下一个元素，并返回刚刚越过的那个元素的引用。</li>
</ul>
<img src="/2017/03/23/javase-collection/Iterator.jpeg" alt="Iterator.jpeg" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="http://blog.csdn.net/u011240877/article/details/52752589" target="_blank" rel="external">Java 集合源码解析（2）:ListIterator</a></cite></footer></blockquote>
<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><img src="/2017/03/23/javase-collection/JavaCollectionsList.png" alt="JavaCollectionsList.png" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="https://www.karambelkar.info/2012/06/java-1.7-collections---uml-class-diagrams/" target="_blank" rel="external">Java 1.7 Collections - UML Class Diagrams</a></cite></footer></blockquote>
<p>通过索引添加、删除元素，提供ListIterator</p>
<p>ListIterator允许按任一方向遍历列表、迭代期间修改列表</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.util;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">// 在迭代器位置之前添加一个对象</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">E <span class="title">previous</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 返回下次调用next()方法返回的元素的索引</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">// 返回下次调用previous()将返回的元素索引</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span></span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>List Serializable </p>
<blockquote>
<p>List does not implement Serializable because is it not a key requirement for a list. There is no guarantee (or need) that every possible implementation of a List can be serialized.<br>LinkedList and ArrayList choose to do so, but that is specific to their implementation. Other List implementations may not be Serializable.</p>
</blockquote>
<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><img src="/2017/03/23/javase-collection/arraylist.png" alt="arraylist.png" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="https://www.javatpoint.com/java-arraylist" target="_blank" rel="external">Java ArrayList class</a></cite></footer></blockquote>
<p>采用<code>动态数组</code>存储元素</p>
<ul>
<li>可以包含重复元素</li>
<li>维持元素插入顺序</li>
<li>非线程安全的</li>
<li>通过索引随机访问</li>
<li>列表中间增删元素慢（需要移动大量元素）</li>
</ul>
<blockquote>
<p>public interface RandomAccess，List 实现所使用的标记接口，用来表明其支持快速（通常是固定时间）随机访问。</p>
</blockquote>
<p>数组扩容：ArrayList在插入元素时，会检查当前的数组大小是否足够，如果不够，将会扩容到<code>当前容量</code> * <code>1.5</code> + <code>1</code>（加1是为了当前容量为1时，也能扩展到2），把元素全部添加到新数组，将旧数组抛弃掉(等待垃圾回收)。<br>扩容操作比较耗时，建议在创建ArrayList时，根据需要<code>初步估计</code>Capacity，并初始化ArrayList</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</div><div class="line">                                               initialCapacity);</div><div class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        elementData = c.toArray();</div><div class="line">        size = elementData.length;</div><div class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></div><div class="line">        <span class="comment">// bug 6260652:Arrays.asList(x).toArray().getClass() should be Object[].class</span></div><div class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</div><div class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</div><div class="line">        <span class="keyword">if</span> (minCapacity &gt; oldCapacity) &#123;</div><div class="line">            Object oldData[] = elementData;</div><div class="line">            <span class="keyword">int</span> newCapacity = (oldCapacity * <span class="number">3</span>)/<span class="number">2</span> + <span class="number">1</span>;</div><div class="line">                <span class="keyword">if</span> (newCapacity &lt; minCapacity)</div><div class="line">            newCapacity = minCapacity;</div><div class="line">                <span class="comment">// minCapacity is usually close to size, so this is a win:</span></div><div class="line">                elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><img src="/2017/03/23/javase-collection/linkedlist.png" alt="linkedlist.png" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="https://www.javatpoint.com/java-linkedlist" target="_blank" rel="external">Java ArrayList class</a></cite></footer></blockquote>
<p>使用<code>双向链表</code>实现</p>
<ul>
<li>可包含重复元素</li>
<li>维持元素插入顺序</li>
<li>非线程安全的</li>
<li>列表中间增删元素快（不需要移动元素）</li>
<li>可以被用作列表、栈 或 队列</li>
</ul>
<p>Difference between ArrayList and LinkedList</p>
<table>
<thead>
<tr>
<th>ArrayList</th>
<th>LinkedList</th>
</tr>
</thead>
<tbody>
<tr>
<td>动态数组实现</td>
<td>链表实现</td>
</tr>
<tr>
<td>随机访问效率高，随机插入、删除效率低</td>
<td>随机访问效率低，随机插入、删除效率高</td>
</tr>
</tbody>
</table>
<p>使用链表的唯一理由是尽可能地<code>减少</code>在列表中间<code>插入</code>或<code>删除</code>元素所付出的代价<br>建议避免使用以<code>整数索引</code>表示链表中位置的所有方法</p>
<p>多个线程同时访问一个链表，则必须 使用外部同步。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt; </span></div><div class="line">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;E&gt; header = <span class="keyword">new</span> Entry&lt;E&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</div><div class="line">        header.next = header.previous = header;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>();</div><div class="line">        addAll(c);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">        E element;</div><div class="line">        Entry&lt;E&gt; next;</div><div class="line">        Entry&lt;E&gt; previous;</div><div class="line">        Entry(E element, Entry&lt;E&gt; next, Entry&lt;E&gt; previous) &#123;</div><div class="line">            <span class="keyword">this</span>.element = element;</div><div class="line">            <span class="keyword">this</span>.next = next;</div><div class="line">            <span class="keyword">this</span>.previous = previous;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>Vector是ArrayList的线程同步版本</p>
<p>已过时（不足）：</p>
<ul>
<li>同步每个方法，不能对同步进行细粒度控制</li>
<li>以2倍进行扩容</li>
<li>Vector将<code>动态数组</code>和<code>同步每个方法</code>整合在一起不是一个好的设计</li>
<li>集合上需包含一组<code>以原子方式</code>执行的操作时，需要外部加锁，造成集合本身锁冗余</li>
</ul>
<p>Vector的Iterator不支持修改(抛出异常)</p>
<h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>后进先出（LIFO）的对象堆栈。承自Vector类。</p>
<p>Deque 接口及其实现提供了 LIFO 堆栈更完整和更一致的操作，应该优先使用Deque，而非Stack</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Deque&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;Integer&gt;();</div></pre></td></tr></table></figure>
<h2 id="集合同步包装器"><a href="#集合同步包装器" class="headerlink" title="集合同步包装器"></a>集合同步包装器</h2><p>Vector 和 Hashtable类提供了线程安全的动态数组和散列表的实现。<br>现在这些类<code>被弃用</code>了，取而代之的是ArrayList 和 HashMap。</p>
<p>任何集合类通过使用同步包装器（synchronization wrapper）变成线程安全的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;E&gt; synchArrayList = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;E&gt;());</div><div class="line">Map&lt;K, V&gt; synchHashMap = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;K ,V&gt;());</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java.util.Collections.synchronizedList(List&lt;T&gt;)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">synchronizedList</span><span class="params">(List&lt;T&gt; list)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (list <span class="keyword">instanceof</span> RandomAccess ?</div><div class="line">                <span class="keyword">new</span> SynchronizedRandomAccessList&lt;T&gt;(list) :</div><div class="line">                <span class="keyword">new</span> SynchronizedList&lt;T&gt;(list));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// java.util.Collections.SynchronizedList&lt;E&gt;</span></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedList</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">SynchronizedCollection</span>&lt;<span class="title">E</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; &#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">7754090372962971524L</span>;</div><div class="line"></div><div class="line">    <span class="comment">//聚合</span></div><div class="line">    <span class="comment">//final域</span></div><div class="line">    <span class="keyword">final</span> List&lt;E&gt; list;</div><div class="line"></div><div class="line">    SynchronizedList(List&lt;E&gt; list) &#123;</div><div class="line">        <span class="keyword">super</span>(list);</div><div class="line">        <span class="keyword">this</span>.list = list;</div><div class="line">    &#125;</div><div class="line">    SynchronizedList(List&lt;E&gt; list, Object mutex) &#123;</div><div class="line">        <span class="keyword">super</span>(list, mutex);</div><div class="line">        <span class="keyword">this</span>.list = list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="comment">//默认使用this作为锁对象，可以指定锁对象</span></div><div class="line">        <span class="keyword">synchronized</span>(mutex) &#123;<span class="keyword">return</span> list.get(index);&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>包装后集合的方法<code>使用锁保护</code>，提供了线程的安全访问。</p>
<p>如果一个线程进行修改时要对集合<code>迭代</code>，仍然需要使用“客户端”锁定:<br>因为若迭代过程中，其他线程修改集合结构，<br>迭代器会失效，抛出ConcurrentMedificationException</p>
<p>结构修改指<code>添加</code>或<code>删除</code>一个或多个元素的任何操作；仅设置元素的值不是结构修改。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">synchronized</span> (synchHashMap)&#123;</div><div class="line">    Iterator&lt;K&gt; iter = synchHashMap.keySet().iterator();</div><div class="line">    <span class="keyword">while</span>(iter.hasNext())&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h1><p><code>java.util.concurrent.CopyOnWriteArrayList&lt;E&gt;</code></p>
<p>基于<code>数组</code>实现</p>
<ul>
<li>线程安全</li>
<li>适用于迭代多，修改极少场景（如事件处理器列表，即观察者列表）</li>
</ul>
<p>其所有可变操作（add、set、remove等）都是通过对<code>底层数组</code>进行一次<code>复制</code>来实现的。<br><code>快照</code>风格的迭代器方法在创建迭代器时使用了对数组状态的引用。<br>创建迭代器以后，迭代器就不会反映列表的添加、移除或者更改。<br>在迭代器上进行的元素更改操作（remove、set 和 add）<code>不受支持</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOnWriteArrayList</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8673264195747942595L</span>;</div><div class="line"></div><div class="line">    <span class="comment">/** The lock protecting all mutators */</span></div><div class="line">    <span class="keyword">transient</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line">    <span class="comment">/** The array, accessed only via getArray/setArray. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">transient</span> Object[] array;</div><div class="line"></div><div class="line">    <span class="comment">// 添加元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Object[] elements = getArray();</div><div class="line">            <span class="keyword">int</span> len = elements.length;</div><div class="line">            Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</div><div class="line">            newElements[len] = e;</div><div class="line">            setArray(newElements);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> COWIterator&lt;E&gt;(getArray(), <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">COWIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">        <span class="comment">/** Snapshot of the array **/</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Object[] snapshot;</div><div class="line">        <span class="comment">/** Index of element to be returned by subsequent call to next.  */</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> cursor;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">COWIterator</span><span class="params">(Object[] elements, <span class="keyword">int</span> initialCursor)</span> </span>&#123;</div><div class="line">            cursor = initialCursor;</div><div class="line">            snapshot = elements;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> cursor &lt; snapshot.length;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (! hasNext())</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">        <span class="keyword">return</span> (E) snapshot[cursor++];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h1><img src="/2017/03/23/javase-collection/JavaCollectionsAPISet.jpg" alt="JavaCollectionsAPISet.jpg" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="https://www.karambelkar.info/2012/06/java-1.7-collections---uml-class-diagrams/" target="_blank" rel="external">Java 1.7 Collections - UML Class Diagrams</a></cite></footer></blockquote>
<p>Set是不能包含<code>重复元素</code>的容器</p>
<p>Set最常使用的场景是<code>测试归属性</code>，可以很容易的寻找某个对象是否在某个Set中。</p>
<h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><img src="/2017/03/23/javase-collection/hashset.png" alt="hashset.png" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="https://www.karambelkar.info/2012/06/java-1.7-collections---uml-class-diagrams/" target="_blank" rel="external">Java HashSet class</a></cite></footer></blockquote>
<p>基于<code>HashMap</code>实现</p>
<ul>
<li>不包含重复元素</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 元素已存在，添加到set中并返回false</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h2><img src="/2017/03/23/javase-collection/linkedhashset.png" alt="linkedhashset.png" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="https://www.javatpoint.com/java-linkedhashset" target="_blank" rel="external">Java LinkedHashSet class</a></cite></footer></blockquote>
<p>基于<code>LinkedHashMap</code>实现</p>
<ul>
<li>维持元素插入顺序</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashSet</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2851667679971038690L</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(initialCapacity, loadFactor, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(initialCapacity, .<span class="number">75f</span>, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(<span class="number">16</span>, .<span class="number">75f</span>, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Math.max(<span class="number">2</span>*c.size(), <span class="number">11</span>), .<span class="number">75f</span>, <span class="keyword">true</span>);</div><div class="line">        addAll(c);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// HashSet 同包访问权限 构造函数；使用虚拟参数dummy作为重载标示 </span></div><div class="line">HashSet(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> dummy) &#123;</div><div class="line">    map = <span class="keyword">new</span> LinkedHashMap&lt;E,Object&gt;(initialCapacity, loadFactor);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><img src="/2017/03/23/javase-collection/treeset.png" alt="treeset.png" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="https://www.javatpoint.com/java-treeset" target="_blank" rel="external">Java TreeSet class</a></cite></footer></blockquote>
<p>基于<code>TreeMap</code>实现</p>
<ul>
<li>使用元素<code>自然顺序</code>进行排序</li>
<li>添加元素比HashSet慢，比将元素添加到<code>数组</code>或<code>链表</code>的<code>正确位置</code>上快很多</li>
</ul>
<p>此实现为基本操作（add、remove 和 contains）提供受保证的 <code>O(log(n))</code> 时间开销</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java.util.SortedSet&lt;E&gt; 1.2</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SortedSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">// 返回此 set 的部分视图</span></div><div class="line">    <span class="comment">// fromElement - 返回 set 的低端点（包括）</span></div><div class="line">    <span class="comment">// toElement - 返回 set 的高端点（不包括）</span></div><div class="line">    <span class="function">SortedSet&lt;E&gt; <span class="title">subSet</span><span class="params">(E fromElement, E toElement)</span></span>;</div><div class="line">    <span class="function">SortedSet&lt;E&gt; <span class="title">headSet</span><span class="params">(E toElement)</span></span>;</div><div class="line">    <span class="function">SortedSet&lt;E&gt; <span class="title">tailSet</span><span class="params">(E fromElement)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//最小元素</span></div><div class="line">    <span class="function">E <span class="title">first</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">E <span class="title">last</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 用于元素排序的比较器</span></div><div class="line">    Comparator&lt;? <span class="keyword">super</span> E&gt; comparator();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NavigableSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">SortedSet</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">//小于e的最大元素 </span></div><div class="line">    <span class="function">E <span class="title">lower</span><span class="params">(E e)</span></span>;</div><div class="line">    <span class="comment">//大于e的最小元素</span></div><div class="line">    <span class="function">E <span class="title">higher</span><span class="params">(E e)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//小于等于e的最大元素</span></div><div class="line">    <span class="function">E <span class="title">floor</span><span class="params">(E e)</span></span>;</div><div class="line">    <span class="comment">//大于等于e的最小元素</span></div><div class="line">    <span class="function">E <span class="title">ceiling</span><span class="params">(E e)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">//删除并返回最小元素</span></div><div class="line">    <span class="function">E <span class="title">pollFirst</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//删除并返回最大元素</span></div><div class="line">    <span class="function">E <span class="title">pollLast</span><span class="params">()</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">//返回此 set 中所包含元素的逆序视图</span></div><div class="line">    <span class="function">NavigableSet&lt;E&gt; <span class="title">descendingSet</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//以降序返回在此 set 的元素上进行迭代的迭代器</span></div><div class="line">    <span class="function">Iterator&lt;E&gt; <span class="title">descendingIterator</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 返回此 set 的部分视图</span></div><div class="line">    <span class="function">NavigableSet&lt;E&gt; <span class="title">subSet</span><span class="params">(E fromElement, <span class="keyword">boolean</span> fromInclusive,</span></span></div><div class="line">                           E toElement,   <span class="keyword">boolean</span> toInclusive);</div><div class="line">    <span class="function">NavigableSet&lt;E&gt; <span class="title">headSet</span><span class="params">(E toElement, <span class="keyword">boolean</span> inclusive)</span></span>;</div><div class="line">    <span class="function">NavigableSet&lt;E&gt; <span class="title">tailSet</span><span class="params">(E fromElement, <span class="keyword">boolean</span> inclusive)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>存放的对象实现<code>Comparable</code>接口或提供<code>Comparator</code></p>
<p>使用Comparable接口定义排序有局限性，一个类<code>只能实现一种排序策略</code>；<br>通过定义多个Comparator，可定义<code>不同的排序策略</code>；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Comparable接口</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T other)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Item other)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> partNumber - other.partNumber;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Comparator接口</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//从另一个集合添加元素，从使用相同比较器的另一个集合添加元素，实现equals方法，TreeSet的addAll()效率会更高</span></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemComparator</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Item a, Item b)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> a.partNumber - b.partNumber;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>比较器没有任何数据。这种对象称为函数对象。<br>函数对象通常<code>动态定义</code>,即定义为<code>匿名内部类</code>的实例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SortedSet&lt;Item&gt; sortByDescription = <span class="keyword">new</span> TreeSet&lt;Item&gt;(<span class="keyword">new</span> Comparator&lt;Item&gt;()&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Item a, Item b)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> a.partNumber - b.partNumber;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="EnumSet"><a href="#EnumSet" class="headerlink" title="EnumSet"></a>EnumSet</h2><img src="/2017/03/23/javase-collection/enumset.png" alt="enumset.png" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="https://www.javatpoint.com/java-enumset" target="_blank" rel="external">Java EnumSet class</a></cite></footer></blockquote>
<p>与枚举类型一起使用的专用 Set 实现。<br>所有基本操作都在固定时间内执行。虽然并不保证，但它们很可能比其 HashSet 副本更快。<br>如果其参数也是一个枚举 set ，则批量操作会在固定时间内执行。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumSetExample</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">enum</span> DayEnum &#123;</div><div class="line">        SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Set&lt;DayEnum&gt; dayEnums = EnumSet.allOf(DayEnum.class);  </div><div class="line"></div><div class="line">        EnumSet&lt;DayEnum&gt; emptyDayEnums = EnumSet.noneOf(DayEnum.class);</div><div class="line">        emptyDayEnums.add(DayEnum.SUNDAY);  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CopyOnWriteArraySet"><a href="#CopyOnWriteArraySet" class="headerlink" title="CopyOnWriteArraySet"></a>CopyOnWriteArraySet</h2><p><code>java.util.concurrent.CopyOnWriteArraySet&lt;E&gt;</code></p>
<p>使用组合模式，基于CopyOnWriteArrayList实现</p>
<ul>
<li>线程安全</li>
<li>使用于迭代多，修改极少且不包含重复元素场景（如事件处理器集合）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOnWriteArraySet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">        <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5457747651344034263L</span>;</div><div class="line"></div><div class="line">    <span class="comment">//final域</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CopyOnWriteArrayList&lt;E&gt; al;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Creates an empty set.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CopyOnWriteArraySet</span><span class="params">()</span> </span>&#123;</div><div class="line">        al = <span class="keyword">new</span> CopyOnWriteArrayList&lt;E&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Creates a set containing all of the elements of the specified</div><div class="line">     * collection.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> c the collection of elements to initially contain</div><div class="line">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CopyOnWriteArraySet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        al = <span class="keyword">new</span> CopyOnWriteArrayList&lt;E&gt;();</div><div class="line">        al.addAllAbsent(c);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ConcurrentSkipListSet"><a href="#ConcurrentSkipListSet" class="headerlink" title="ConcurrentSkipListSet"></a>ConcurrentSkipListSet</h2><p><code>java.util.concurrent.ConcurrentSkipListSet&lt;E&gt;</code></p>
<p>基于 <code>ConcurrentSkipListMap</code></p>
<ul>
<li>线程安全</li>
<li>使用元素<code>自然顺序</code>进行排序（实现NavigableSet<e>接口）</e></li>
</ul>
<p>此实现为 contains、add、remove 操作提供预期平均 log(n) 时间开销<br>迭代器是 <code>弱一致</code> 的，返回的元素将反映迭代器<code>创建时</code>或<code>创建后某一时刻</code>的 set 状态</p>
<p>用来替代<code>同步</code>的SortedSet</p>
<h1 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h1><img src="/2017/03/23/javase-collection/JavaCollectionsAPIQueue.jpg" alt="JavaCollectionsAPIQueue.jpg" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="https://www.karambelkar.info/2012/06/java-1.7-collections---uml-class-diagrams/" target="_blank" rel="external">Java 1.7 Collections - UML Class Diagrams</a></cite></footer></blockquote>
<p>队列通常（但并非一定）以 FIFO（先进先出）的方式排序各个元素</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>抛出异常</th>
<th>返回特殊值</th>
</tr>
</thead>
<tbody>
<tr>
<td>添加</td>
<td>boolean add(E e)</td>
<td>boolean offer(E e)</td>
</tr>
<tr>
<td>移除</td>
<td>E remove()</td>
<td>E poll()</td>
</tr>
<tr>
<td>检查</td>
<td>E element()</td>
<td>E peek()</td>
</tr>
</tbody>
</table>
<h2 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2><p>一个基于优先级堆的<code>无界</code>优先级队列。<br>优先级队列使用一个高雅且高效的数据结构，堆(heap)。<br>堆是一个可以自我调整的二叉树，对树执行添加(add)和删除(remove)操作，可以让<code>最小</code>的元素移动到根，而<code>不必花费时间对元素进行排序</code>。</p>
<p>典型示例，huffman编码压缩算法(构建二叉树)、任务调度。</p>
<blockquote>
<a href="http://coolshell.cn/articles/7459.html" title="huffman编码压缩算法" target="_blank" rel="external">huffman编码压缩算法</a>
</blockquote>
<p>方法 iterator() 提供的迭代器<code>不保证</code>以任何特定的顺序遍历优先级队列中的元素。</p>
<p>此实现为排队和出队方法（<code>offer</code>、<code>poll</code>、remove 和 add）提供 <code>O(log(n))</code> 时间开销；<br>为方法 contains(Object) 提供<code>O(n)</code>时间开销；<br>为方法（<code>peek</code>、element 和 size）提供<code>O(1)</code>时间开销。</p>
<img src="/2017/03/23/javase-collection/20170412095010290.gif" alt="20170412095010290.gif" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="http://blog.csdn.net/jim_cainiaoxiaolang/article/details/70139324" target="_blank" rel="external">深入Java集合系列之五：PriorityQueue</a></cite></footer></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">7720805057305804111L</span>;</div><div class="line"></div><div class="line">    <span class="comment">//默认容量 11</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">11</span>;</div><div class="line"></div><div class="line">    <span class="comment">//动态数组存储元素</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Object[] queue;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="keyword">super</span> E&gt; comparator;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PriorityQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(DEFAULT_INITIAL_CAPACITY, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PriorityQueue</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(initialCapacity, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PriorityQueue</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></div><div class="line">                         Comparator&lt;? <span class="keyword">super</span> E&gt; comparator) &#123;</div><div class="line">        <span class="comment">// Note: This restriction of at least one is not actually needed,</span></div><div class="line">        <span class="comment">// but continues for 1.5 compatibility</span></div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">1</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">        <span class="keyword">this</span>.queue = <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">        <span class="keyword">this</span>.comparator = comparator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//添加元素</span></div><div class="line">    <span class="comment">//当前节点元素小于父节点元素，将父元素移动至当前节点，以父节点为当前节点继续检查</span></div><div class="line">    <span class="comment">//当前节点不小于父节点，将元素放置到当前节点</span></div><div class="line">    <span class="comment">//最终构造一棵子节点不大于父节点的二叉树树</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftUpComparable</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</div><div class="line">        Comparable&lt;? <span class="keyword">super</span> E&gt; key = (Comparable&lt;? <span class="keyword">super</span> E&gt;) x;</div><div class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">//父节点</span></div><div class="line">            <span class="keyword">int</span> parent = (k - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">1</span>;</div><div class="line">            Object e = queue[parent];</div><div class="line">            <span class="keyword">if</span> (key.compareTo((E) e) &gt;= <span class="number">0</span>)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            queue[k] = e;</div><div class="line">            k = parent;</div><div class="line">        &#125;</div><div class="line">        queue[k] = key;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">int</span> s = --size;</div><div class="line">        modCount++;</div><div class="line">        <span class="comment">//获取第一个元素，作为返回结果</span></div><div class="line">        E result = (E) queue[<span class="number">0</span>];</div><div class="line">        <span class="comment">//获取最后一个元素</span></div><div class="line">        E x = (E) queue[s];</div><div class="line">        queue[s] = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (s != <span class="number">0</span>)</div><div class="line">            <span class="comment">//最后一个元素从顶端执行下调</span></div><div class="line">            siftDown(<span class="number">0</span>, x);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownComparable</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</div><div class="line">        Comparable&lt;? <span class="keyword">super</span> E&gt; key = (Comparable&lt;? <span class="keyword">super</span> E&gt;)x;</div><div class="line">        <span class="comment">// 非叶子节点元素的最大位置(叶子节点数等于非叶子节点数或非叶子节点数加一)</span></div><div class="line">        <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;        <span class="comment">// loop while a non-leaf</span></div><div class="line">        <span class="keyword">while</span> (k &lt; half) &#123;</div><div class="line">            <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>; <span class="comment">// assume left child is least</span></div><div class="line">            Object c = queue[child];</div><div class="line">            <span class="keyword">int</span> right = child + <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (right &lt; size &amp;&amp;</div><div class="line">                ((Comparable&lt;? <span class="keyword">super</span> E&gt;) c).compareTo((E) queue[right]) &gt; <span class="number">0</span>)</div><div class="line">                c = queue[child = right];</div><div class="line">            <span class="keyword">if</span> (key.compareTo((E) c) &lt;= <span class="number">0</span>)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            queue[k] = c;</div><div class="line">            k = child;</div><div class="line">        &#125;</div><div class="line">        queue[k] = key;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><p><code>java.util.concurrent.BlockingQueue&lt;E&gt;</code></p>
<p>支持两个附加操作的 Queue<br>这两个操作是：获取元素时<code>等待队列变为非空</code>，以及存储元素时<code>等待空间变得可用</code>。 </p>
<table>
<thead>
<tr>
<th>操作</th>
<th>抛出异常</th>
<th>特殊值</th>
<th>阻塞</th>
<th>超时 </th>
</tr>
</thead>
<tbody>
<tr>
<td>插入</td>
<td>add(e)</td>
<td>offer(e)</td>
<td>put(e)</td>
<td>offer(e, time, unit) </td>
</tr>
<tr>
<td>移除</td>
<td>remove()</td>
<td>poll()</td>
<td>take()</td>
<td>poll(time, unit) </td>
</tr>
<tr>
<td>检查</td>
<td>element()</td>
<td>peek()</td>
<td>不可用</td>
<td>不可用 </td>
</tr>
</tbody>
</table>
<p>通过<code>毒丸对象</code>来关闭服务</p>
<h2 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h2><p><code>java.util.concurrent.PriorityBlockingQueue&lt;E&gt;</code></p>
<p>一个无界阻塞队列，提供了阻塞获取操作,使用与 PriorityQueue 相同的顺序规则。</p>
<p>基于组合模式，使用PriorityQueue和ReentrantLock实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityBlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">    <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5595510919245408276L</span>;</div><div class="line"></div><div class="line">    <span class="comment">//final域</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PriorityQueue&lt;E&gt; q;</div><div class="line">    <span class="comment">//参数fair，公平锁</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty = lock.newCondition();</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PriorityBlockingQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">        q = <span class="keyword">new</span> PriorityQueue&lt;E&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//线程安全添加元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">boolean</span> ok = q.offer(e);</div><div class="line">            <span class="keyword">assert</span> ok;</div><div class="line">            <span class="comment">//唤醒一个等待线程</span></div><div class="line">            notEmpty.signal();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//阻塞方式获取元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">        <span class="comment">//如果当前线程未被中断，则获取锁</span></div><div class="line">        <span class="comment">//如果锁可用，则获取锁，并立即返回。 </span></div><div class="line">        <span class="comment">//如果锁不可用，该线程将一直处于休眠状态，直到锁由当前线程获得或当前线程被中断</span></div><div class="line">        lock.lockInterruptibly();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//Condition 应该总是在一个循环中被等待，并测试正被等待的状态声明</span></div><div class="line">                <span class="keyword">while</span> (q.size() == <span class="number">0</span>)</div><div class="line">                    notEmpty.await();</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</div><div class="line">                notEmpty.signal(); <span class="comment">// propagate to non-interrupted thread</span></div><div class="line">                <span class="keyword">throw</span> ie;</div><div class="line">            &#125;</div><div class="line">            E x = q.poll();</div><div class="line">            <span class="keyword">assert</span> x != <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">return</span> x;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h2><p><code>java.util.concurrent.ArrayBlockingQueue&lt;E&gt;</code></p>
<p>使用<code>数组</code>和<code>ReentrantLock</code>实现</p>
<p>适合于<code>消费者生产者</code>模式</p>
<p>一个由<code>数组</code>支持的<code>有界阻塞</code>队列。此队列按 FIFO（先进先出）原则对元素进行排序。</p>
<p>此类支持对等待的生产者线程和使用者线程进行排序的<code>可选公平策略</code>。默认情况下，不保证是这种排序。<br>公平性通常会<code>降低吞吐量</code>，但也减少了可变性和避免了“不平衡性”。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayBlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">        <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">817911632652898426L</span>;</div><div class="line"></div><div class="line">    <span class="comment">/** The queued items  */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> E[] items;</div><div class="line">    <span class="comment">/** items index for next take, poll or remove */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> takeIndex;</div><div class="line">    <span class="comment">/** items index for next put, offer, or add. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> putIndex;</div><div class="line">    <span class="comment">/** Number of items in the queue */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</div><div class="line"></div><div class="line">    <span class="comment">/** Main lock guarding all access */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock;</div><div class="line">    <span class="comment">/** Condition for waiting takes */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty;</div><div class="line">    <span class="comment">/** Condition for waiting puts */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h2><p><code>java.util.concurrent.LinkedBlockingQueue&lt;E&gt;</code><br>使用<code>单向链表</code>和2个<code>ReentrantLock</code>实现，存取各一个锁</p>
<p><code>适合于实现“消费者生产者”模式</code></p>
<p>一个基于已链接节点的、范围任意的 Blocking Queue<br>链接队列的吞吐量通常要高于基于数组的队列，但是在大多数并发应用程序中，其可预知的性能要低。</p>
<p><code>默认</code>最大容量：Integer.MAX_VALUE</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedBlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">        <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6903933977591709194L</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Linked list node class</div><div class="line">     */</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">        E item;</div><div class="line">        Node&lt;E&gt; next;</div><div class="line">        Node(E x) &#123; item = x; &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** The capacity bound, or Integer.MAX_VALUE if none */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> capacity;</div><div class="line"></div><div class="line">    <span class="comment">/** Current number of elements */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">/** Head of linked list */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Node&lt;E&gt; head;</div><div class="line"></div><div class="line">    <span class="comment">/** Tail of linked list */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Node&lt;E&gt; last;</div><div class="line"></div><div class="line">    <span class="comment">/** Lock held by take, poll, etc */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line">    <span class="comment">/** Wait queue for waiting takes */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty = takeLock.newCondition();</div><div class="line"></div><div class="line">    <span class="comment">/** Lock held by put, offer, etc */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line">    <span class="comment">/** Wait queue for waiting puts */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull = putLock.newCondition();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedBlockingQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(Integer.MAX_VALUE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//指定队列容量</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedBlockingQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (capacity &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">        <span class="keyword">this</span>.capacity = capacity;</div><div class="line">        last = head = <span class="keyword">new</span> Node&lt;E&gt;(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ConcurrentLinkedQueue"><a href="#ConcurrentLinkedQueue" class="headerlink" title="ConcurrentLinkedQueue"></a>ConcurrentLinkedQueue</h2><p><code>java.util.concurrent.ConcurrentLinkedQueue&lt;E&gt;</code></p>
<p>采用<code>循环CAS</code>方式来实现</p>
<p>一个基于链接节点的无界线程安全队列。此队列按照 FIFO（先进先出）原则对元素进行排序<br>size() 不是固定时间操作。由于队列的异步特性，确定当前元素的数量需要遍历这些元素</p>
<p>多用于消息队列（多个线程发送消息)</p>
<h2 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h2><p><code>java.util.concurrent.SynchronousQueue&lt;E&gt;</code><br>一种阻塞队列，其中每个插入操作必须等待另一个线程的对应移除操作 ，反之亦然。</p>
<p>同步队列<code>没有任何内部容量</code><br>默认为<code>非公平访问策略</code></p>
<p>SynchronousQueue经常用来,一端或者双端严格遵守”单工”(单工作者)模式的场景,队列的两个操作端分别是productor和consumer.常用于一个productor多个consumer的场景。</p>
<p>CachedThreadPool使用SynchronousQueue作为任务队列<br>线程池中Thread对象的绑定的Runable实例并不是传递给execute()的Runnable实例<br>Thread对象上绑定的Runnable实例负责从<code>任务队列</code>获取Runnable实例并调用run()方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (poolSize &gt;= corePoolSize || !addIfUnderCorePoolSize(command)) &#123;</div><div class="line">    <span class="comment">//尝试添加到任务队列，如果添加成功，则由现有线程执行，否则创建线程执行</span></div><div class="line">    <span class="keyword">if</span> (runState == RUNNING &amp;&amp; workQueue.offer(command)) &#123;</div><div class="line">        <span class="keyword">if</span> (runState != RUNNING || poolSize == <span class="number">0</span>)</div><div class="line">            ensureQueuedTaskHandled(command);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (!addIfUnderMaximumPoolSize(command))</div><div class="line">        reject(command); <span class="comment">// is shutdown or saturated</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">int</span> state = runState;</div><div class="line">            <span class="keyword">if</span> (state &gt; SHUTDOWN)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            Runnable r;</div><div class="line">            <span class="keyword">if</span> (state == SHUTDOWN)  <span class="comment">// Help drain queue</span></div><div class="line">                <span class="comment">//尝试获取，立即返回</span></div><div class="line">                r = workQueue.poll();</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (poolSize &gt; corePoolSize || allowCoreThreadTimeOut)</div><div class="line">                <span class="comment">//尝试获取，指定时间内等待</span></div><div class="line">                r = workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="comment">//阻塞获取</span></div><div class="line">                r = workQueue.take();</div><div class="line">            <span class="keyword">if</span> (r != <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> r;</div><div class="line">            <span class="keyword">if</span> (workerCanExit()) &#123;</div><div class="line">                <span class="keyword">if</span> (runState &gt;= SHUTDOWN) <span class="comment">// Wake up others</span></div><div class="line">                    interruptIdleWorkers();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// Else retry</span></div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</div><div class="line">            <span class="comment">// On interruption, re-check runState</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h2><p><code>java.util.concurrent.DelayQueue&lt;E&gt;</code><br>基于组合模式，使用<code>PriorityQueue</code>实现的<code>阻塞队列</code></p>
<p>Delayed 元素的一个<code>无界阻塞</code>队列，只有在<code>延迟期满</code>时才能从中提取元素。</p>
<p>Delayed接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Delayed</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Delayed</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the remaining delay associated with this object, in the</div><div class="line">     * given time unit.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> unit the time unit</div><div class="line">     * <span class="doctag">@return</span> the remaining delay; zero or negative values indicate</div><div class="line">     * that the delay has already elapsed</div><div class="line">     * 返回剩余的延迟时间（根据当前时间计算获得）</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>DelayQueue示例：<br><a href="/2017/03/23/javase-collection/DelayQueueDemo.java" title="DelayQueue示例代码">DelayQueue示例代码</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sunday.jdk6_learn;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.DelayQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Delayed;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelayedTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span>, <span class="title">Delayed</span> </span>&#123;</div><div class="line">    <span class="comment">// 延迟时间单位</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> TimeUnit delayUnit = TimeUnit.MILLISECONDS;</div><div class="line">    <span class="comment">// 延迟时间</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> delayTime;</div><div class="line">    <span class="comment">// 触发时间</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> triggerTime;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DelayedTask</span><span class="params">(<span class="keyword">int</span> delayInMillis)</span> </span>&#123;</div><div class="line">        delayTime = delayInMillis;</div><div class="line">        <span class="comment">//System.nanoTime()相比System.currentTimeMillis()更加准确也更加精确</span></div><div class="line">        triggerTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(delayTime, delayUnit);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed o)</span> </span>&#123;</div><div class="line">        DelayedTask that = (DelayedTask)o;</div><div class="line">        <span class="keyword">if</span> (triggerTime &lt; that.triggerTime) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (triggerTime &gt; that.triggerTime) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 剩余的延迟时间</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> unit.convert(triggerTime - System.nanoTime(), TimeUnit.NANOSECONDS);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"DelayedTask [delayTime="</span> + delayTime + <span class="string">"]"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayQueueDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//延迟任务队列</span></div><div class="line">        <span class="keyword">final</span> DelayQueue&lt;DelayedTask&gt; queue = <span class="keyword">new</span> DelayQueue&lt;DelayedTask&gt;();</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> maxDelayTime = <span class="number">5000</span>;<span class="comment">//milliseconds</span></div><div class="line">        Random random = <span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;i++)&#123;</div><div class="line">             DelayedTask delayedTask = <span class="keyword">new</span> DelayedTask(random.nextInt(maxDelayTime));</div><div class="line">             queue.put(delayedTask);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">while</span> (queue.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        DelayedTask take = queue.take();</div><div class="line">                        take.run();</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        thread.start();</div><div class="line">        </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            thread.join();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h1><p>双端队列</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>抛出异常(头部)</th>
<th>返回特殊值(头部)</th>
<th>抛出异常(尾部)</th>
<th>返回特殊值(尾部)</th>
</tr>
</thead>
<tbody>
<tr>
<td>插入</td>
<td>addFirst(e)</td>
<td>offerFirst(e)</td>
<td>addLast(e)</td>
<td>offerLast(e) </td>
</tr>
<tr>
<td>移除</td>
<td>removeFirst()</td>
<td>pollFirst()</td>
<td>removeLast()</td>
<td>pollLast() </td>
</tr>
<tr>
<td>检查</td>
<td>getFirst()</td>
<td>peekFirst()</td>
<td>getLast()</td>
<td>peekLast() </td>
</tr>
</tbody>
</table>
<h2 id="ArrayDeque"><a href="#ArrayDeque" class="headerlink" title="ArrayDeque"></a>ArrayDeque</h2><img src="/2017/03/23/javase-collection/arraydeque.png" alt="arraydeque.png" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="https://www.javatpoint.com/java-deque-arraydeque" target="_blank" rel="external">ArrayDeque class</a></cite></footer></blockquote>
<p>基于动态<code>循环数组</code>实现</p>
<ul>
<li>两端添加或删除元素</li>
<li>禁止null元素</li>
<li>无容量限制</li>
<li>非线程安全的</li>
</ul>
<p>此类很可能在用作<code>堆栈</code>时快于 Stack，在用作<code>队列</code>时快于 LinkedList。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//分配初始数组，大小为：大于numElements的最小2的整数幂</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">allocateElements</span><span class="params">(<span class="keyword">int</span> numElements)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> initialCapacity = MIN_INITIAL_CAPACITY;</div><div class="line">    <span class="comment">// Find the best power of two to hold elements.</span></div><div class="line">    <span class="comment">// Tests "&lt;=" because arrays aren't kept full.</span></div><div class="line">    <span class="keyword">if</span> (numElements &gt;= initialCapacity) &#123;</div><div class="line">        initialCapacity = numElements;</div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">1</span>);</div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">2</span>);</div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">4</span>);</div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">8</span>);</div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">        initialCapacity++;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)   <span class="comment">// Too many elements, must back off</span></div><div class="line">            initialCapacity &gt;&gt;&gt;= <span class="number">1</span>;<span class="comment">// Good luck allocating 2 ^ 30 elements</span></div><div class="line">    &#125;</div><div class="line">    elements = (E[]) <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//以2倍进行扩容</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doubleCapacity</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">assert</span> head == tail;</div><div class="line">    <span class="keyword">int</span> p = head;</div><div class="line">    <span class="keyword">int</span> n = elements.length;</div><div class="line">    <span class="keyword">int</span> r = n - p; <span class="comment">// number of elements to the right of p</span></div><div class="line">    <span class="keyword">int</span> newCapacity = n &lt;&lt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (newCapacity &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Sorry, deque too big"</span>);</div><div class="line">    Object[] a = <span class="keyword">new</span> Object[newCapacity];</div><div class="line">    System.arraycopy(elements, p, a, <span class="number">0</span>, r);</div><div class="line">    System.arraycopy(elements, <span class="number">0</span>, a, r, p);</div><div class="line">    elements = (E[])a;</div><div class="line">    head = <span class="number">0</span>;</div><div class="line">    tail = n;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 添加元素</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    elements[tail] = e;</div><div class="line">    <span class="comment">// 因容量为2的整数幂，容量减1，二进制全部为1；</span></div><div class="line">    <span class="comment">// 位与运算，小于该值，数值不变；小于该值，高位变为0，低位不变；</span></div><div class="line">    <span class="comment">// 等于容量时，高位为1，其余全部为0，位与后变为0</span></div><div class="line">    <span class="keyword">if</span> ((tail = (tail + <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)) == head)</div><div class="line">        doubleCapacity();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="LinkedBlockingDeque"><a href="#LinkedBlockingDeque" class="headerlink" title="LinkedBlockingDeque"></a>LinkedBlockingDeque</h2><p><code>java.util.concurrent.LinkedBlockingDeque&lt;E&gt;</code><br>使用<code>双向链表</code>和<code>ReentrantLock</code>实现</p>
<p>一个基于<code>已链接节点</code>的、任选范围的<code>阻塞双端队列</code><br><code>默认</code>最大容量：Integer.MAX_VALUE</p>
<p>适用于<code>工作密取（work-stealing）</code>模式<br>区别于生产者消费者模式中所有消费者共享一个工作队列，工作窃取模式每一个消费者都有自己的双端队列，如果一个消费者完成自己的全部工作，就可以偷取其它消费者队列<code>队尾</code>的任务。</p>
<p>工作密取非常适用于既是消费者也是生产者问题–当执行摸个工作时可能导致出现更多的工作。<br>例如：网页爬虫程序中处理一个页面时，通常会发现有更多的页面需要处理。</p>
<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><img src="/2017/03/23/javase-collection/JavaCollectionsMapAPI.png" alt="JavaCollectionsMapAPI.png" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="https://www.karambelkar.info/2012/06/java-1.7-collections---uml-class-diagrams/" target="_blank" rel="external">Java 1.7 Collections - UML Class Diagrams</a></cite></footer></blockquote>
<p>将键映射到值的对象。一个映射不能包含重复的键；每个键最多只能映射到一个值</p>
<p>Map 接口提供三种 collection 视图，允许以<code>键集</code>、<code>值集</code>或<code>键-值映射关系集</code>的形式查看某个映射的内容。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 键集，可删除元素，不能添加元素</span></div><div class="line"><span class="function">Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 值集，所有值的集合视图，可删除元素，不能添加元素</span></div><div class="line"><span class="function">Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//键-值映射关系集，可删除元素，不能添加元素</span></div><div class="line">Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet();</div></pre></td></tr></table></figure>
<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><img src="/2017/03/23/javase-collection/hashmap.png" alt="hashmap.png" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="https://www.javatpoint.com/java-hashmap" target="_blank" rel="external">Java HashMap class</a></cite></footer></blockquote>
<p>基于<code>数组</code>和<code>链表</code></p>
<ul>
<li>基于键保存元素</li>
<li><code>键</code>不重复</li>
<li><code>不</code>维持<code>键</code>排序</li>
</ul>
<p>此实现假定哈希函数将元素适当地分布在各桶之间，可为基本操作（get 、put 、remove）提供<code>稳定的性能</code>。</p>
<p>迭代 collection 视图所需的时间与 HashMap 实例的“容量”（桶的数量）及其大小（键-值映射关系数）成比例。<br>所以，如果迭代性能很重要，则不要将初始容量设置得太高（或将加载因子设置得太低）。 </p>
<blockquote>
<p>将可变对象用作映射键时必须格外小心。当对象是映射中某个键时，如果以影响 equals 比较的方式更改了对象的值，则映射的行为将是不确定的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// initialCapacity 初始容量,初始容量16</span></div><div class="line"><span class="comment">// loadFactor 加载因子,默认加载因子0.75</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span></span></div></pre></td></tr></table></figure>
<p><code>初始容量</code>和<code>加载因子</code><br>容量是哈希表中桶(Entry数组)的数量，初始容量只是哈希表在创建时的容量。<br>加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度。<br>当哈希表中的条目数超出了<code>initialCapacity</code> * <code>loadFactor</code>时，通过调用 rehash 方法将<code>容量翻倍</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</div><div class="line"></div><div class="line">    <span class="keyword">transient</span> Entry[] table;</div><div class="line"></div><div class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</div><div class="line"></div><div class="line">    <span class="comment">//扩容临界值</span></div><div class="line">    <span class="keyword">int</span> threshold;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</div><div class="line"></div><div class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> modCount;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</div><div class="line">        threshold = (<span class="keyword">int</span>)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);</div><div class="line">        table = <span class="keyword">new</span> Entry[DEFAULT_INITIAL_CAPACITY];</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</div><div class="line">                                               initialCapacity);</div><div class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">            initialCapacity = MAXIMUM_CAPACITY;</div><div class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</div><div class="line">                                               loadFactor);</div><div class="line"></div><div class="line">        <span class="comment">//初始容量为&gt;=指定容量的2的整数幂</span></div><div class="line">        <span class="comment">// Find a power of 2 &gt;= initialCapacity</span></div><div class="line">        <span class="keyword">int</span> capacity = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (capacity &lt; initialCapacity)</div><div class="line">            capacity &lt;&lt;= <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</div><div class="line">        threshold = (<span class="keyword">int</span>)(capacity * loadFactor);</div><div class="line">        table = <span class="keyword">new</span> Entry[capacity];</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//添加数据</span></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> putForNullKey(value);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> hash = hash(key.hashCode());</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);</div><div class="line">        </div><div class="line">        <span class="comment">//hash桶不为空，遍历hash桶</span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">            Object k;</div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</div><div class="line">                <span class="comment">//若找到相同key，替换就值并返回旧值</span></div><div class="line">                V oldValue = e.value;</div><div class="line">                e.value = value;</div><div class="line">                e.recordAccess(<span class="keyword">this</span>);</div><div class="line">                <span class="keyword">return</span> oldValue;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        modCount++;</div><div class="line">        <span class="comment">//添加新映射</span></div><div class="line">        addEntry(hash, key, value, i);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//添加映射</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</div><div class="line">        <span class="comment">//hash桶中第一个元素</span></div><div class="line">        Entry&lt;K,V&gt; e = table[bucketIndex];</div><div class="line">        <span class="comment">//新映射添加到hash桶前端</span></div><div class="line">        table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);</div><div class="line">        <span class="keyword">if</span> (size++ &gt;= threshold)</div><div class="line">            <span class="comment">//2倍扩容</span></div><div class="line">            resize(<span class="number">2</span> * table.length);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//链表元素</span></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">final</span> K key;</div><div class="line">        V value;</div><div class="line">        Entry&lt;K,V&gt; next;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</div><div class="line"></div><div class="line">        Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</div><div class="line">            value = v;</div><div class="line">            next = n;</div><div class="line">            key = k;</div><div class="line">            hash = h;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="equals-与-hashcode"><a href="#equals-与-hashcode" class="headerlink" title="equals() 与 hashcode()"></a>equals() 与 hashcode()</h3><p>equals()比较两个对象的<code>逻辑意义</code>是否相同<br>hashcode() 是对一个对象进行hash计算得到的一个散列值</p>
<blockquote>
<p>谨记：重载 equals() 时要保证：两个equal的对象一定有相同的hashcode</p>
</blockquote>
<ul>
<li>对象x和y的hashcode相同，不代表两个对象就相同(x.equals(y)=true)，可能存在hash碰撞；不过hashcode如果不相同，那么一定是两个不同的对象</li>
<li>如果两个对象的equals()相等，那么hashcode一定相等</li>
</ul>
<h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><img src="/2017/03/23/javase-collection/linkedhashmap.png" alt="linkedhashmap.png" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="https://www.javatpoint.com/java-linkedhashmap" target="_blank" rel="external">Java LinkedHashMap class</a></cite></footer></blockquote>
<ul>
<li>维持插入顺序或按LRU(最近最少使用)排序</li>
</ul>
<p>由于增加了维护链接列表的开支，其性能很可能比 HashMap 稍逊一筹，<br>不过这一点例外：LinkedHashMap 的 collection 视图迭代所需时间与<code>映射的大小</code>成比例。<br>HashMap 迭代时间很可能开支较大，因为它所需要的时间与其<code>容量</code> 成比例。 </p>
<p>继承自HashMap，添加Entry<k,v> header和accessOrder<br>重写init()，实现head引用初始化，<code>head.before</code>指向最新元素，<code>head.after</code>指向最老元素<br>重写createEntry(int, K, V, int)、addEntry(int, K, V, int)实现添加元素时<code>添加链接</code>和<code>按访问排序时</code>检查是否元素移除<br>重写transfer(Entry[])实现扩容时链接处理<br>重写recordAccess(HashMap<k, v="">)实现按访问排序时，访问元素时更新链接</k,></k,v></p>
<p>扩展HashMap.Entry添加 Entry<k,v> before, after</k,v></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">3801124242820219131L</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; header;</div><div class="line"></div><div class="line">    <span class="comment">//对于访问顺序</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> accessOrder;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * This override differs from addEntry in that it doesn't resize the</div><div class="line">     * table or remove the eldest entry.</div><div class="line">     * 添加元素</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</div><div class="line">        createEntry(hash, key, value, bucketIndex);</div><div class="line"></div><div class="line">        <span class="comment">// Remove eldest entry if instructed, else grow capacity if appropriate</span></div><div class="line">        Entry&lt;K,V&gt; eldest = header.after;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (removeEldestEntry(eldest)) &#123;</div><div class="line">            <span class="comment">//移除最老元素</span></div><div class="line">            removeEntryForKey(eldest.key);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (size &gt;= threshold)</div><div class="line">                resize(<span class="number">2</span> * table.length);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * This override alters behavior of superclass put method. It causes newly</div><div class="line">     * allocated entry to get inserted at the end of the linked list and</div><div class="line">     * removes the eldest entry if appropriate.</div><div class="line">     * 创建映射，添加值哈希桶，并添加到链表</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</div><div class="line">        HashMap.Entry&lt;K,V&gt; old = table[bucketIndex];</div><div class="line">        Entry&lt;K,V&gt; e = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, old);</div><div class="line">        table[bucketIndex] = e;</div><div class="line">        <span class="comment">//添加到header前面</span></div><div class="line">        e.addBefore(header);</div><div class="line">        size++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        <span class="comment">// These fields comprise the doubly linked list used for iteration.</span></div><div class="line">        Entry&lt;K,V&gt; before, after;</div><div class="line"></div><div class="line">        Entry(<span class="keyword">int</span> hash, K key, V value, HashMap.Entry&lt;K,V&gt; next) &#123;</div><div class="line">            <span class="keyword">super</span>(hash, key, value, next);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Removes this entry from the linked list.</div><div class="line">         * 从链表中移除元素</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">            before.after = after;</div><div class="line">            after.before = before;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Inserts this entry before the specified existing entry in the list.</div><div class="line">         * 添加元素至指定元素前</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addBefore</span><span class="params">(Entry&lt;K,V&gt; existingEntry)</span> </span>&#123;</div><div class="line">            after  = existingEntry;</div><div class="line">            before = existingEntry.before;</div><div class="line">            before.after = <span class="keyword">this</span>;</div><div class="line">            after.before = <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * This method is invoked by the superclass whenever the value</div><div class="line">         * of a pre-existing entry is read by Map.get or modified by Map.set.</div><div class="line">         * If the enclosing Map is access-ordered, it moves the entry</div><div class="line">         * to the end of the list; otherwise, it does nothing.</div><div class="line">         * 元素访问，按访问排序模式下，更新链表排序</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</div><div class="line">            LinkedHashMap&lt;K,V&gt; lm = (LinkedHashMap&lt;K,V&gt;)m;</div><div class="line">            <span class="keyword">if</span> (lm.accessOrder) &#123;</div><div class="line">                lm.modCount++;</div><div class="line">                remove();</div><div class="line">                addBefore(lm.header);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">recordRemoval</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</div><div class="line">            remove();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LRU限制容量缓存</p>
<blockquote>
<p>容量限制与LRU无联系</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用访问顺序排序</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CACHE_LIMIT = <span class="number">1024</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> cacheLimit = DEFAULT_CACHE_LIMIT;</div><div class="line"></div><div class="line"><span class="comment">/** Whether we should refrain from resolving views again if unresolved once */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> cacheUnresolved = <span class="keyword">true</span>;</div><div class="line"></div><div class="line"><span class="comment">/** Map from view key to View instance */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, View&gt; viewCache =</div><div class="line">        <span class="keyword">new</span> LinkedHashMap&lt;Object, View&gt;(DEFAULT_CACHE_LIMIT, <span class="number">0.75f</span>, <span class="keyword">true</span>) &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;Object, View&gt; eldest)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> size() &gt; getCacheLimit();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Return the maximum number of entries for the view cache.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCacheLimit</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.cacheLimit;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><img src="/2017/03/23/javase-collection/treemap.png" alt="treemap.png" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="https://www.javatpoint.com/java-treeset" target="_blank" rel="external">Java TreeMap class</a></cite></footer></blockquote>
<p>基于红黑树（Red-Black tree）的 NavigableMap 实现。<br>根据<code>键</code>的自然顺序进行排序，或根据提供的 Comparator 进行排序</p>
<ul>
<li>基于键保存元素</li>
<li><code>键</code>不重复</li>
<li><code>键</code>维持<code>自然排序</code></li>
</ul>
<p>此实现为 containsKey、<code>get</code>、<code>put</code> 和 <code>remove</code> 操作提供受保证的 O(log(n)) 时间开销。</p>
<h2 id="EnumMap"><a href="#EnumMap" class="headerlink" title="EnumMap"></a>EnumMap</h2><img src="/2017/03/23/javase-collection/enummap.png" alt="enummap.png" title="">
<blockquote><footer><strong>图片来源</strong><cite><a href="https://www.javatpoint.com/java-enummap" target="_blank" rel="external">TreeMap class</a></cite></footer></blockquote>
<p>与枚举类型键一起使用的专用 Map 实现。枚举映射中所有键都必须来自单个枚举类型</p>
<p>枚举映射根据其<code>键</code>的<code>自然顺序</code> 来维护（该顺序是声明枚举常量的顺序）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">EnumMap&lt;Days, String&gt; map = <span class="keyword">new</span> EnumMap&lt;Days, String&gt;(Days.class);  </div><div class="line">map.put(Days.Monday, <span class="string">"1"</span>);</div><div class="line">map.put(Days.Tuesday, <span class="string">"2"</span>);</div></pre></td></tr></table></figure>
<h2 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap"></a>WeakHashMap</h2><p>以弱键 实现的基于哈希表的 Map。</p>
<p>对于一个给定的键，其映射的存在并不阻止垃圾回收器对该键的丢弃。<br>丢弃某个键时，其条目从映射中有效地移除</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, String&gt; weakHashMap = <span class="keyword">new</span> WeakHashMap&lt;String, String&gt;();</div><div class="line"></div><div class="line">String keyWeakHashMap = <span class="keyword">new</span> String(<span class="string">"keyWeakHashMap"</span>);</div><div class="line"></div><div class="line">weakHashMap.put(keyWeakHashMap, <span class="string">"helloWeakHash"</span>);</div><div class="line">System.out.println(<span class="string">"Before: weak hash map value:"</span> + weakHashMap.get(<span class="string">"keyWeakHashMap"</span>));</div><div class="line"></div><div class="line">keyWeakHashMap = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="comment">//运行垃圾回收器</span></div><div class="line">System.gc();</div><div class="line"></div><div class="line">System.out.println(<span class="string">"After: weak hash map value:"</span> + weakHashMap.get(<span class="string">"keyWeakHashMap"</span>));</div></pre></td></tr></table></figure>
<h3 id="JAVA中四种引用方式"><a href="#JAVA中四种引用方式" class="headerlink" title="JAVA中四种引用方式"></a>JAVA中四种引用方式</h3><ul>
<li>强引用（StrongReference）</li>
<li>软引用（SoftReference）</li>
<li>弱引用（WeakReference）</li>
<li>虚引用（PhantomReference）</li>
</ul>
<h4 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String str=<span class="keyword">new</span> String(<span class="string">"abc"</span>);</div></pre></td></tr></table></figure>
<h4 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h4><p>如果内存空间不足了，就会回收这些对象的内存。</p>
<p>软引用可用来实现<code>内存敏感</code>的<code>高速缓存</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String str=<span class="keyword">new</span> String(<span class="string">"abc"</span>);</div><div class="line">SoftReference&lt;String&gt; softRef=<span class="keyword">new</span> SoftReference&lt;String&gt;(str);</div></pre></td></tr></table></figure>
<h4 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h4><p>不管当前内存空间足够与否，都会回收它的内存。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String str=<span class="keyword">new</span> String(<span class="string">"abc"</span>);      </div><div class="line">WeakReference&lt;String&gt; weakRef = <span class="keyword">new</span> WeakReference&lt;String&gt;(str);</div></pre></td></tr></table></figure>
<h4 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h4><p>get()方法总是返回null，而得不到它指向的对象<br>当对象变得弱可达（weakly reachable）时会立即被放到ReferenceQueue中<br>虚引用适合用来查看对象什么时候被回收,优化内存的时候使用</p>
<h2 id="IdentityHashMap"><a href="#IdentityHashMap" class="headerlink" title="IdentityHashMap"></a>IdentityHashMap</h2><p>此类利用哈希表实现 Map 接口，比较两个对象时使用==，而不是equals()<br>使用System.identityHashCode()计算hashCode</p>
<p>实现对象遍历算法（如对象序列化）时，这个类非常有用，可以用来跟踪每个对象的遍历情况。</p>
<h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p><code>java.util.concurrent.ConcurrentHashMap&lt;K, V&gt;</code></p>
<p>支持获取的<code>完全并发</code>和更新的<code>可调整并发</code>的哈希表</p>
<p>读线程几乎不会因加锁而阻塞（除非读线程刚好读到这个 Segment 中某个 HashEntry 的 value 域的值为 null，此时需要加锁后重新读取该值）。</p>
<ul>
<li>线程安全(分段锁)</li>
<li>提供原子复合操作</li>
<li>迭代器弱一致性</li>
</ul>
<p>弱一致性：<br>迭代器创建后，遍历过程中，内部元素可能发生变化，<br>变化发生在已遍历的部分，迭代器不会反映出来，<br>变化发生在未遍历的部分，迭代器会发现并反映出来。 </p>
<p>ConcurrentHashMap 的高并发性主要来自于三个方面：</p>
<ul>
<li>用分离锁实现多个线程间的更深层次的共享访问。</li>
<li>用 HashEntery 对象的不变性来降低执行读操作的线程在遍历链表期间对加锁的需求。</li>
<li>通过对同一个 Volatile 变量的写 / 读访问，协调不同线程间读 / 写操作的内存可见性。</li>
</ul>
<p>remove实现：<br>找到需要删除的节点。再将需要删除的节点所在链表的前趋全部复制一遍，但直接前趋的Next是指向需要删除节点的后继的。最后，将复制的前趋替换掉之前的前趋。</p>
<p>无锁读：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function">V <span class="title">get</span><span class="params">(Object key, <span class="keyword">int</span> hash)</span> </span>&#123;</div><div class="line">    <span class="comment">//第一步是访问count变量，这是一个volatile变量，由于所有修改操作在进行结构修改时都会在最后一步写count变量，通过这种机制保证get操作能够得到最新的结构更新</span></div><div class="line">    <span class="keyword">if</span> (count != <span class="number">0</span>) &#123; <span class="comment">// read-volatile</span></div><div class="line">        HashEntry&lt;K,V&gt; e = getFirst(hash);</div><div class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; key.equals(e.key)) &#123;</div><div class="line">                V v = e.value;</div><div class="line">                <span class="keyword">if</span> (v != <span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> v;</div><div class="line">                <span class="keyword">return</span> readValueUnderLock(e); <span class="comment">// recheck</span></div><div class="line">            &#125;</div><div class="line">            e = e.next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ConcurrentReferenceHashMap"><a href="#ConcurrentReferenceHashMap" class="headerlink" title="ConcurrentReferenceHashMap"></a>ConcurrentReferenceHashMap</h2><p><code>org.springframework.util.ConcurrentReferenceHashMap</code></p>
<p>A {@link ConcurrentHashMap} that uses {@link ReferenceType#SOFT soft} or<br>{@linkplain ReferenceType#WEAK weak} references for both {@code keys} and {@code values}.</p>
<h2 id="ConcurrentSkipListMap"><a href="#ConcurrentSkipListMap" class="headerlink" title="ConcurrentSkipListMap"></a>ConcurrentSkipListMap</h2><p><code>java.util.concurrent.ConcurrentSkipListMap&lt;K, V&gt;</code><br>基于SkipList和CAS实现，因为跳表易于实现高效并发算法。</p>
<ul>
<li>非阻塞算法</li>
<li>实现SortedMap和NavigableMap接口</li>
<li>支持复合原子操作</li>
</ul>
<p>映射可以根据键的<code>自然顺序</code>进行排序或使用提供的 Comparator 进行排序</p>
<p>containsKey、get、put、remove 操作及其变体提供预期平均 <code>log(n)</code> 时间开销</p>
<p>迭代器是<code>弱一致</code>的，返回的元素将反映迭代器创建时或创建后某一时刻的映射状态。</p>
<p>此类视图中的方法返回的所有 Map.Entry 对，表示他们产生时的<code>映射关系快照</code>。</p>
<p>size 方法不是 一个固定时间 (constant-time) 操作</p>
<p>用来替代同步的SortedMap</p>
<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p><code>java.util.Arrays</code><br>此类包含用来操作数组（比如排序和搜索）的各种方法。此类还包含一个允许将数组作为列表来查看的静态工厂。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 复制指定的数组，截取或用 null 填充（如有必要），以使副本具有指定的长度</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span>[] copyOf(<span class="keyword">boolean</span>[] original,<span class="keyword">int</span> newLength);</div></pre></td></tr></table></figure>
<h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><p><code>java.lang.System</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// src      源数组。</span></div><div class="line"><span class="comment">// srcPos   源数组中的起始位置。</span></div><div class="line"><span class="comment">// dest     目标数组。</span></div><div class="line"><span class="comment">// destPos  目标数据中的起始位置。</span></div><div class="line"><span class="comment">// length   要复制的数组元素的数量</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src,  <span class="keyword">int</span>  srcPos, Object dest, <span class="keyword">int</span> destPos,<span class="keyword">int</span> length)</span></span>;</div></pre></td></tr></table></figure>
<h2 id="TimeUnit"><a href="#TimeUnit" class="headerlink" title="TimeUnit"></a>TimeUnit</h2><p>时间转换工具类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> minuts = <span class="number">1</span>;</div><div class="line">TimeUnit unit = TimeUnit.MINUTES;</div><div class="line"></div><div class="line">System.out.println(unit.toSeconds(minuts));</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Centos6 Note]]></title>
      <url>http://xiaozhuang.github.io/2017/03/16/centos6-note/</url>
      <content type="html"><![CDATA[<p>CentOS（Community Enterprise Operating System，中文意思是：社区企业操作系统）是Linux发行版之一，它是来自于Red Hat Enterprise Linux依照开放源代码规定释出的源代码所编译而成。<br><a id="more"></a></p>
<h1 id="Linxu-基础"><a href="#Linxu-基础" class="headerlink" title="Linxu 基础"></a>Linxu 基础</h1><h2 id="服务器特点"><a href="#服务器特点" class="headerlink" title="服务器特点"></a>服务器特点</h2><ul>
<li>稳定</li>
<li>安全</li>
</ul>
<blockquote>
<p>服务器不会装图形界面</p>
</blockquote>
<h2 id="Linux与window的不同"><a href="#Linux与window的不同" class="headerlink" title="Linux与window的不同"></a>Linux与window的不同</h2><ul>
<li>Linux 严格区分大小写</li>
<li>Linxu 所有内容以文件形式保存，包括硬件</li>
<li>Linxu不靠扩展名区分文件类型（靠权限区分）</li>
</ul>
<p>Linux约定扩展名：<br>格式 | 扩展名<br>————|————–<br>压缩包 | <em>.gz </em>.bz <em>.tar.bz2 </em>.tgz<br>二进制 | .rpm<br>脚本 | .sh<br>配置文件 | .config</p>
<h2 id="字符界面优势"><a href="#字符界面优势" class="headerlink" title="字符界面优势"></a>字符界面优势</h2><ul>
<li>字符界面占用系统资源更少</li>
<li>字符界面减少出错、被攻击的可能性（启动程序越多，出错可能越大）</li>
</ul>
<h2 id="Centos安装"><a href="#Centos安装" class="headerlink" title="Centos安装"></a>Centos安装</h2><p>VMware中，新建虚拟机</p>
<ul>
<li>“典型”</li>
<li>安装来源，”稍后安装操作系统”（选择CentOS安装，将简化安装过程，故不选这种方式）</li>
<li>选择系统：Linux，版本：CentOS</li>
<li>硬盘</li>
<li>虚拟机设置（网络视频器：桥接模式，虚拟机将获取与真实主机同一网段ip）</li>
</ul>
<p>安装过程：</p>
<ul>
<li>Install or upgrade an existing system (安装或升级现有系统)</li>
<li>跳过镜像检测</li>
<li>语言，中文</li>
<li>键盘，美国英语式</li>
<li>存储设备，基本存储设备</li>
<li>存储设备可能包含数据警告，忽略所有数据</li>
<li>主机名，Linux不通过主机名，在局域网内访问，保持默认</li>
<li>时区，亚洲/上海（包含北京时区）</li>
<li>设置管理员密码</li>
<li>分区方式，自定义（参考下方自定义分区）</li>
<li>格式化</li>
<li>软件包选择，（minimal：最小化安装；BasicServer 基本服务器）</li>
<li>重启</li>
</ul>
<p>自定义分区：(创建分区，标准分区)<br>/home    上传默认目录（2G）    ext4<br>/boot    启动分区（200M）    ext4<br>无        交换分区（内存2倍）    swap<br>/        根分区（全部可用）    ext4</p>
<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 输出</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"hello"</span></div><div class="line"><span class="comment"># 输出到文件</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"hello"</span> &gt; hello.txt</div><div class="line"><span class="comment"># 追加到文件</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"hello"</span> &gt;&gt; hello.txt</div></pre></td></tr></table></figure>
<h2 id="查看ip"><a href="#查看ip" class="headerlink" title="查看ip"></a>查看ip</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ip a</div><div class="line"><span class="comment"># 或 </span></div><div class="line">ifconfig</div></pre></td></tr></table></figure>
<h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shutdown -h now</div></pre></td></tr></table></figure>
<h2 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h2><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><p>在后台数据库中<code>按文件名</code>搜索，搜索速度快，</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Centos6 Minimal安装，没有安装locate</span></div><div class="line">yum install mlocate</div><div class="line"><span class="comment">#locate 文件名</span></div><div class="line">locate my.cnf</div></pre></td></tr></table></figure>
<p>locate搜索数据库的文件信息，一天更新一次</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#手动更新文件数据库</span></div><div class="line">updatedb</div></pre></td></tr></table></figure>
<h2 id="tar-gz"><a href="#tar-gz" class="headerlink" title=".tar.gz"></a>.tar.gz</h2><h3 id="打包：tar-zcvf-打包文件名-源文件"><a href="#打包：tar-zcvf-打包文件名-源文件" class="headerlink" title="打包：tar -zcvf 打包文件名 源文件"></a>打包：tar -zcvf 打包文件名 源文件</h3><table>
<thead>
<tr>
<th>选项</th>
<th>作用 </th>
</tr>
</thead>
<tbody>
<tr>
<td>-z</td>
<td>压缩为.tar.gz格式</td>
</tr>
<tr>
<td>-c</td>
<td>打包</td>
</tr>
<tr>
<td>-v</td>
<td>显示过程</td>
</tr>
<tr>
<td>-f</td>
<td>指定打包后的文件名</td>
</tr>
</tbody>
</table>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#压缩</span></div><div class="line">tar -czvf mysql_install.tar.gz [path1 path2]</div></pre></td></tr></table></figure>
<h3 id="解打包：tar-xzvf-打包文件名"><a href="#解打包：tar-xzvf-打包文件名" class="headerlink" title="解打包：tar -xzvf 打包文件名"></a>解打包：tar -xzvf 打包文件名</h3><table>
<thead>
<tr>
<th>选项</th>
<th>作用 </th>
</tr>
</thead>
<tbody>
<tr>
<td>-z</td>
<td>解压缩.tar.gz格式</td>
</tr>
<tr>
<td>-x</td>
<td>解打包</td>
</tr>
</tbody>
</table>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#解压缩</span></div><div class="line">tar -xzvf file.tar.gz</div><div class="line"><span class="comment">#解压缩到指定目录</span></div><div class="line">tar -xzvf file.tar.gz -C /home/aaa</div></pre></td></tr></table></figure>
<h3 id="查看：tar-tzvf-打包文件名"><a href="#查看：tar-tzvf-打包文件名" class="headerlink" title="查看：tar -tzvf 打包文件名"></a>查看：tar -tzvf 打包文件名</h3><table>
<thead>
<tr>
<th>选项</th>
<th>作用 </th>
</tr>
</thead>
<tbody>
<tr>
<td>-t</td>
<td>查看打包文件</td>
</tr>
</tbody>
</table>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -tzvf mongodb-linux-x86_64-rhel62-3.2.9.tgz</div></pre></td></tr></table></figure>
<h1 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yum install zip unzip</div><div class="line"><span class="comment"># 打包目录</span></div><div class="line">zip -r backup.zip /root/backup</div><div class="line"></div><div class="line">unzip scala-2.11.8.zip</div></pre></td></tr></table></figure>
<h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><h2 id="rpm包"><a href="#rpm包" class="headerlink" title="rpm包"></a>rpm包</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装</span></div><div class="line"><span class="comment"># -i  (install)安装</span></div><div class="line"><span class="comment"># -v  (verbose)显示详细信息</span></div><div class="line"><span class="comment"># -h  (hash)显示进度</span></div><div class="line"><span class="comment"># --nodeps 不检测依赖性</span></div><div class="line">rpm -ivh 包全名</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 查询是否安装</span></div><div class="line">rpm -q 包名</div><div class="line"><span class="comment"># 查询所有已装包</span></div><div class="line">rpm -qa</div><div class="line"></div><div class="line"><span class="comment"># 查询rpm包安装信息</span></div><div class="line">rpm -qi 包名</div><div class="line"></div><div class="line"><span class="comment"># 查询系统文件属于哪个软件</span></div><div class="line">rpm -qf 系统文件名</div><div class="line"></div><div class="line"><span class="comment"># 查询包依赖性</span></div><div class="line">rpm -qr 包名</div><div class="line"></div><div class="line"><span class="comment"># 校验</span></div><div class="line">rpm -v 包名</div></pre></td></tr></table></figure>
<h2 id="yum在线安装"><a href="#yum在线安装" class="headerlink" title="yum在线安装"></a>yum在线安装</h2><p>RPM包在线安装方法，解决了RPM包依赖问题</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y wget</div></pre></td></tr></table></figure>
<h3 id="查询安装包"><a href="#查询安装包" class="headerlink" title="查询安装包"></a>查询安装包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum search key_word</div></pre></td></tr></table></figure>
<h3 id="修改yum源为163-yum源"><a href="#修改yum源为163-yum源" class="headerlink" title="修改yum源为163 yum源"></a>修改yum源为163 yum源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/yum.repos.d</div><div class="line">mv CentOS-Base.repo CentOS-Base.repo.bak</div><div class="line">wget http://mirrors.163.com/.<span class="built_in">help</span>/CentOS6-Base-163.repo</div><div class="line">mv CentOS6-Base-163.repo CentOS-Base.repo</div><div class="line">yum clean all</div></pre></td></tr></table></figure>
<h3 id="修改aliyun-yum源"><a href="#修改aliyun-yum源" class="headerlink" title="修改aliyun yum源"></a>修改aliyun yum源</h3><a href="http://mirrors.aliyun.com/help/centos?spm=5176.bbsr150321.0.0.d6ykiD" title="参考文档" target="_blank" rel="external">参考文档</a>
<ul>
<li>备份</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</div></pre></td></tr></table></figure>
<ul>
<li>下载新的CentOS-Base.repo 到/etc/yum.repos.d/</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># CentOS 5</span></div><div class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</div><div class="line"><span class="comment"># CentOS 6</span></div><div class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</div><div class="line"><span class="comment"># CentOS 7</span></div><div class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</div></pre></td></tr></table></figure>
<ul>
<li>运行<code>yum clean all</code>, <code>yum makecache</code>生成缓存</li>
</ul>
<h2 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cat /etc/redhat-release</div><div class="line"><span class="comment">#或</span></div><div class="line">rpm -q centos-release</div></pre></td></tr></table></figure>
<h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><h3 id="查看用户登录记录"><a href="#查看用户登录记录" class="headerlink" title="查看用户登录记录"></a>查看用户登录记录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">who</div></pre></td></tr></table></figure>
<h3 id="查看系统中有哪些用户："><a href="#查看系统中有哪些用户：" class="headerlink" title="查看系统中有哪些用户："></a>查看系统中有哪些用户：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cut -d : -f 1 /etc/passwd</div></pre></td></tr></table></figure>
<h3 id="查看可以登录系统的用户："><a href="#查看可以登录系统的用户：" class="headerlink" title="查看可以登录系统的用户："></a>查看可以登录系统的用户：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /etc/passwd | grep -v /sbin/nologin | cut -d : -f 1</div></pre></td></tr></table></figure>
<h2 id="scp-远程拷贝文件的命令"><a href="#scp-远程拷贝文件的命令" class="headerlink" title="scp 远程拷贝文件的命令"></a>scp 远程拷贝文件的命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scp local_file remote_username@remote_ip:remote_folder</div><div class="line">scp -r local_folder remote_username@remote_ip:remote_folder</div></pre></td></tr></table></figure>
<h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>SSH为Secure Shell的缩写，是创建在应用层和传输层基础上的安全协议。</p>
<h3 id="ssh远程登录"><a href="#ssh远程登录" class="headerlink" title="ssh远程登录"></a>ssh远程登录</h3><p>格式：ssh 用户名@ip</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装ssh</span></div><div class="line">yum -y install openssh-clients</div><div class="line"><span class="comment">#使用ssh远程连接其他主机</span></div><div class="line"><span class="comment">#执行命令后，提示下载目标主机公钥</span></div><div class="line">ssh root@192.168.47.129cd</div></pre></td></tr></table></figure>
<h3 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h3><p><code>免密登录</code><br><code>无密登录</code></p>
<p>ssh localhost 需要输入密码，<br>解决运行job需要输入密码；</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成秘钥(生成过程，默认设置)</span></div><div class="line">ssh-keygen</div><div class="line"><span class="comment"># 公钥添加至authorized_keys</span></div><div class="line">cat .ssh/id_rsa.pub &gt; .ssh/authorized_keys</div><div class="line">chmod 600 .ssh/authorized_keys</div><div class="line"></div><div class="line"><span class="comment"># 多个公钥顺序排列</span></div><div class="line"><span class="comment"># 服务器允许authorized_key中客户端访问</span></div></pre></td></tr></table></figure>
<p>需要配置host，以识别主机名</p>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="权限修改"><a href="#权限修改" class="headerlink" title="权限修改"></a>权限修改</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#修改文件或目录所属的用户</span></div><div class="line">chown qq /home/qq</div><div class="line"></div><div class="line"><span class="comment">#修改文件或目录所属的组</span></div><div class="line">chgrp qq /home/qq</div><div class="line"></div><div class="line"><span class="comment"># 加执行权限</span></div><div class="line">chmod +x start.sh</div></pre></td></tr></table></figure>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h3 id="查看系统进程"><a href="#查看系统进程" class="headerlink" title="查看系统进程"></a>查看系统进程</h3><p>ps -ef | grep java</p>
<h3 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h3><p>kill -15 [PID]</p>
<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><h3 id="开端口"><a href="#开端口" class="headerlink" title="开端口"></a>开端口</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加：</span></div><div class="line"><span class="comment"># (删除iptables -D chain rulenum,如：删除INPUT里序号为8的规则-&gt;iptables -D INPUT 8)</span></div><div class="line"><span class="comment"># (删除指定端口规则:iptables -D  INPUT -p tcp -m tcp --dport "3306" -j ACCEPT)</span></div><div class="line">iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</div><div class="line"></div><div class="line"><span class="comment"># 保存：</span></div><div class="line">service iptables save</div><div class="line"></div><div class="line"><span class="comment"># 查看：</span></div><div class="line">/etc/init.d/iptables status</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 防火墙开关：</span></div><div class="line"><span class="comment"># 	1)永久性生效，重启后不会复原 </span></div><div class="line"><span class="comment"># 	开启： chkconfig iptables on 关闭： chkconfig iptables off </span></div><div class="line"><span class="comment"># 	2)即时生效，重启后复原 </span></div><div class="line"><span class="comment"># 	开启： service iptables start 关闭： service iptables stop</span></div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 永久的开放需要的端口</span></div><div class="line">sudo firewall-cmd --zone=public --add-port=3000/tcp --permanent</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 临时关闭防火墙,重启后会重新自动打开</span></div><div class="line">systemctl restart firewalld</div><div class="line"><span class="comment"># 检查防火墙状态</span></div><div class="line">firewall-cmd --state</div><div class="line">firewall-cmd --list-all</div><div class="line"><span class="comment"># Disable firewall</span></div><div class="line">systemctl <span class="built_in">disable</span> firewalld</div><div class="line">systemctl stop firewalld</div><div class="line">systemctl status firewalld</div><div class="line"><span class="comment"># Enable firewall</span></div><div class="line">systemctl <span class="built_in">enable</span> firewalld</div><div class="line">systemctl start firewalld</div><div class="line">systemctl status firewalld</div></pre></td></tr></table></figure>
<h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><p>添加定时任务</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">crontab -e</div><div class="line"><span class="comment"># 每5分钟执行一次</span></div><div class="line">*/5 * * * * /home/hexo_sh/hexo_checkout_svn.sh</div></pre></td></tr></table></figure>
<h1 id="开机运行"><a href="#开机运行" class="headerlink" title="开机运行"></a>开机运行</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vi /etc/rc.local</div><div class="line">/home/hexo_sh/hexo_generate_watch.sh</div></pre></td></tr></table></figure>
<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="源码包安装位置"><a href="#源码包安装位置" class="headerlink" title="源码包安装位置"></a>源码包安装位置</h2><p>/usr/local</p>
<h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#仅当前回话有效</span></div><div class="line"><span class="comment">#生效方法：立即生效</span></div><div class="line"><span class="comment"># 有效期限：临时改变，只能在当前的终端窗口中有效，当前窗口关闭后就会恢复原有的path配置</span></div><div class="line"><span class="comment"># 用户局限：仅对当前用户</span></div><div class="line"><span class="comment">#以jdk为例</span></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.8.0_144</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>:<span class="variable">$PATH</span></div><div class="line"></div><div class="line"><span class="comment"># 只对当前登录用户生效</span></div><div class="line"><span class="comment"># vi ~/.bash_profile</span></div><div class="line"><span class="comment"># 修改文件中PATH一行，将/usr/local/jdk1.8.0_144/bin:/usr/local/scala-2.11.8/bin加入到PATH=$PATH:$HOME/bin一行之后</span></div><div class="line"></div><div class="line"><span class="comment"># 对所有系统用户生效</span></div><div class="line"><span class="comment"># 修改/etc/profile文件</span></div><div class="line"><span class="comment"># 在文件末尾加上如下两行代码</span></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.8.0_144</div><div class="line"><span class="built_in">export</span> SCALA_HOME=/usr/<span class="built_in">local</span>/scala-2.11.8</div><div class="line"><span class="built_in">export</span> SPARK_HOME=/usr/<span class="built_in">local</span>/spark-2.3.1-bin-hadoop2.7</div><div class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$SCALA_HOME</span>/bin:<span class="variable">$SPARK_HOME</span>/bin:<span class="variable">$PATH</span></div></pre></td></tr></table></figure>
<h2 id="使环境变量生效"><a href="#使环境变量生效" class="headerlink" title="使环境变量生效:"></a>使环境变量生效:</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使 ~/.bash_profile 生效</span></div><div class="line"><span class="built_in">source</span> ~/.bash_profile</div><div class="line"></div><div class="line"><span class="comment"># 使 /etc/profile生效</span></div><div class="line"><span class="built_in">source</span> /etc/profile</div></pre></td></tr></table></figure>
<h2 id="访问环境变量"><a href="#访问环境变量" class="headerlink" title="访问环境变量"></a>访问环境变量</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></div></pre></td></tr></table></figure>
<h2 id="host"><a href="#host" class="headerlink" title="host"></a>host</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vi /etc/hosts</div><div class="line">cat /etc/hosts</div></pre></td></tr></table></figure>
<h2 id="查看主机名"><a href="#查看主机名" class="headerlink" title="查看主机名"></a>查看主机名</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hostname</div></pre></td></tr></table></figure>
<h2 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 修改主机名</span></div><div class="line">hostnamectl <span class="built_in">set</span>-hostname hostname.domain.com</div><div class="line"></div><div class="line"><span class="comment"># 主机名添加到host，以可通过主机名访问自己</span></div></pre></td></tr></table></figure>
<h1 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vmstat</div></pre></td></tr></table></figure>
<p>procs ———–memory———- —swap– —–io—- –system– —–cpu—–<br> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st<br> 0  0      0 813472  11720 141636    0    0    22    18   16   15  0  0 99  0  0    </p>
<ul>
<li>us用户态cpu使用率， sy系统态cpu使用率， id空闲率</li>
<li>第一列为 调度程序运行队列长度</li>
<li>si 和 so 分别表示内存页面换入和换出的量</li>
</ul>
<h2 id="监控锁竞争"><a href="#监控锁竞争" class="headerlink" title="监控锁竞争"></a>监控锁竞争</h2><p><code>sysstat</code>包中的pidstat命令监控锁竞争</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 每秒让步式上下文切换</span></div><div class="line">pidstat -w</div><div class="line"></div><div class="line"><span class="comment"># 每5秒监控进程id为9391的应用</span></div><div class="line">pidstat -w -I -p 9391 -5</div></pre></td></tr></table></figure>
<p>01时34分40秒       PID   cswch/s nvcswch/s  Command<br>01时34分40秒         1      0.11      0.01  init<br>01时34分40秒         2      0.01      0.00  kthreadd<br>01时34分40秒         3      0.00      0.00  migration/0<br>01时34分40秒         4      0.05      0.00  ksoftirqd/0<br>01时34分40秒         5      0.00      0.00  stopper/0</p>
<p>cswch/s是让步上下文切换<br>cswch/s是总的让步式上下文切换数，除以虚拟处理器数目为每cup让步式上下文切换数</p>
<p>让步式上下文切换耗费的时钟周期代价非常高，通常高达<code>80 000</code>个时钟周期</p>
<blockquote>
<p>如果让步式上下文切换占去5%或更多的时钟周期，说明它可能遇到锁竞争<br>3.0GHz处理器每秒能执行3 000 000 000个时钟周期</p>
</blockquote>
<p>nvcswch/s是抢占式上下文切换<br>抢占式上下文切换率高表明预备运行的线程数多于可用的虚拟处理器</p>
<p>减少抢占式上下文切换的策略：</p>
<ul>
<li>创建处理器组</li>
<li>减少运行的应用线程数</li>
</ul>
<p>Linux上使用teskset创建处理器组，并将应用分配给这些处理器组。</p>
<h2 id="磁盘IO使用率"><a href="#磁盘IO使用率" class="headerlink" title="磁盘IO使用率"></a>磁盘IO使用率</h2><p><code>sysstat</code>包中的iostat命令查看磁盘IO使用率</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iostat -xm</div></pre></td></tr></table></figure>
<h1 id="rpm卸载"><a href="#rpm卸载" class="headerlink" title="rpm卸载"></a>rpm卸载</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">rpm -q dsc20</div><div class="line">rpm -q cassandra20</div><div class="line"></div><div class="line">rpm -e dsc20</div><div class="line">rpm -e cassandra20</div></pre></td></tr></table></figure>
<h1 id="Systemctl"><a href="#Systemctl" class="headerlink" title="Systemctl"></a>Systemctl</h1><p>Systemctl是一个systemd工具，主要负责控制systemd系统和服务管理器。</p>
<h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><h2 id="拷贝虚拟机后无法联网"><a href="#拷贝虚拟机后无法联网" class="headerlink" title="拷贝虚拟机后无法联网"></a>拷贝虚拟机后无法联网</h2><p>ifcfg-eth0已经配置了开机启动<br>执行service network restart报错：device eth0 does not seem to be present, delaying initialization</p>
<p>引起原因：ifcfg-eth0的配置文件里保存了以前的MAC地址</p>
<p>解决方法：<br>删除ifcfg-eth0中MAC地址信息<br>/etc/sysconfig/network-scripts/ifcfg-eth0<br>删除文件：<br>/etc/udev/rules.d/70-persistent-net.rules 删除后重启机器</p>
<h1 id="rsync命令"><a href="#rsync命令" class="headerlink" title="rsync命令"></a>rsync命令</h1><p>rsync命令是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件。rsync使用所谓的“rsync算法”来使本地和远程两个主机之间的文件达到同步，这个算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装 rsync</span></div><div class="line">yum install rsync -y</div><div class="line"><span class="comment"># 为便于启停rsync，可以安装xinetd：</span></div><div class="line">yum install xinetd -y</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 同步文件:如果目的端没有此文件，那么权限会保持与源端一致</span></div><div class="line">rsync main.c machineB:/home/userB</div><div class="line"><span class="comment"># 同步文件夹</span></div><div class="line">rsync -r synct/ slave0:/root/</div><div class="line"></div><div class="line"><span class="comment"># -v  # verbose 详细模式输出</span></div><div class="line"><span class="comment"># -a  # archive 归档模式，以递归的方式传输文件，并保持所有文件属性，（-a = -rlptgoD）</span></div><div class="line"><span class="comment"># 本机上的同步，把/test目录下的内容同步到/backup目录下</span></div><div class="line">rsync -av /<span class="built_in">test</span>/ /backup</div><div class="line"><span class="comment"># 本地的/test目录内容，同步到远端191.168.1.10的/backup目录下</span></div><div class="line">rsync -av /<span class="built_in">test</span>/ 192.168.1.20:/backup</div></pre></td></tr></table></figure>
<a href="https://blog.51cto.com/13525470/2063052" title="CentOS 7.3 Rsync服务的安装与配置" target="_blank" rel="external">CentOS 7.3 Rsync服务的安装与配置</a>
<h1 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h1><p>clear</p>
<h1 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h1><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># To change the root password:</span></div><div class="line">sudo passwd</div><div class="line"><span class="comment"># To change your user password:</span></div><div class="line">passwd</div><div class="line"><span class="comment"># To change other users password:</span></div><div class="line">sudo passwd USERNAME</div></pre></td></tr></table></figure>
<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># grep</span></div><div class="line">-v select non-matching lines</div></pre></td></tr></table></figure>
<h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p><code>样式扫描和处理语言</code></p>
<p>它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。</p>
<h3 id="字段引用"><a href="#字段引用" class="headerlink" title="字段引用$"></a>字段引用$</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">echo</span> test test2 | awk '&#123;<span class="built_in">print</span> $<span class="number">0</span>&#125;'</div><div class="line">test test2</div><div class="line">&gt; <span class="built_in">echo</span> test test2 | awk '&#123;<span class="built_in">print</span> $<span class="number">1</span>&#125;'</div><div class="line">test</div><div class="line">&gt; <span class="built_in">echo</span> test test2 | awk '&#123;<span class="built_in">print</span> $<span class="number">2</span>&#125;'</div><div class="line">test2</div></pre></td></tr></table></figure>
<h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><h2 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h2><ul>
<li>解压</li>
<li>添加环境变量</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -version</div></pre></td></tr></table></figure>
<h2 id="scala"><a href="#scala" class="headerlink" title="scala"></a>scala</h2><ul>
<li>解压</li>
<li>添加环境变量</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scala -version</div></pre></td></tr></table></figure>
<h2 id="虚拟机无法联网"><a href="#虚拟机无法联网" class="headerlink" title="虚拟机无法联网"></a>虚拟机无法联网</h2><p><code>启动网络服务</code></p>
<p><code>Centos6</code></p>
<ul>
<li>vi /etc/sysconfig/network-scripts/ifcfg-eth0</li>
</ul>
<p><code>Centos7</code></p>
<ul>
<li><p>vi /etc/sysconfig/network-scripts/ifcfg-ens33</p>
</li>
<li><p>ONBOOT=no修改为ONBOOT=yes</p>
</li>
<li>service network restart</li>
</ul>
<h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>On Linux (and probably most Unix), there is no OS-level DNS caching unless nscd is installed and running. </p>
<p><code>resolv.conf</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># DNS 请求超时时间，重试次数</div><div class="line">options timeout:5</div><div class="line">options attempts:3</div></pre></td></tr></table></figure>
<h2 id="WRITE-SAME-failed-Manually-zeroing"><a href="#WRITE-SAME-failed-Manually-zeroing" class="headerlink" title="WRITE SAME failed. Manually zeroing"></a>WRITE SAME failed. Manually zeroing</h2><p><code>Centos7</code></p>
<p>启动提示“WRITE SAME failed. Manually zeroing”</p>
<p>方案1：<br>如果安装系统的时候分4个及以上分区时就有几率出现此问题。将SWAP分区分为sda2分区即解决问题！由于CENTOS7智能辅助分区，分多个分区的时候SWAP分区会乱窜。注意分到sda2即可</p>
<p>方案2：<br>原因：硬件，一般是raid卡不支持WRITE SAME特性;<br>创建disable-write-same脚本，添加开机启动</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/sh</span></div><div class="line"><span class="comment">#chkconfig: 2345 80 90</span></div><div class="line"><span class="comment">#description:disable-write-same</span></div><div class="line"><span class="comment"># Disable SCSI WRITE_SAME, which is not supported by underlying disk </span></div><div class="line"><span class="comment"># emulation.  Run on boot from, eg, /etc/rc.local</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># See http://www.it3.be/2013/10/16/write-same-failed/</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Written by Ewen McNeill &lt;ewen@naos.co.nz&gt;, 2014-07-17</span></div><div class="line"><span class="comment">#---------------------------------------------------------------------------</span></div><div class="line"></div><div class="line">find /sys/devices -name max_write_same_blocks | </div><div class="line">    <span class="keyword">while</span> <span class="built_in">read</span> DISK; <span class="keyword">do</span> </div><div class="line">        <span class="built_in">echo</span> 0 &gt;<span class="string">"<span class="variable">$&#123;DISK&#125;</span>"</span></div><div class="line">    <span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>将脚本放入/etc/rc.local在开机时运行</p>
<h2 id="etc-rc-local-开机不执行"><a href="#etc-rc-local-开机不执行" class="headerlink" title="/etc/rc.local 开机不执行"></a>/etc/rc.local 开机不执行</h2><p><code>Centos7</code></p>
<p>/etc/rc.local 文件内容</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># It is highly advisable to create own systemd services or udev rules</span></div><div class="line"><span class="comment"># to run scripts during boot instead of using this file.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># In contrast to previous versions due to parallel execution during boot</span></div><div class="line"><span class="comment"># this script will NOT be run after all other services.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Please note that you must run 'chmod +x /etc/rc.d/rc.local' to ensure</span></div><div class="line"><span class="comment"># that this script will be executed during boot.</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#这个文件是为了兼容性的问题而添加的。</div><div class="line">#</div><div class="line">#强烈建议创建自己的systemd服务或udev规则来在开机时运行脚本而不是使用这个文件。</div><div class="line">#</div><div class="line">#与以前的版本引导时的并行执行相比较，这个脚本将不会在其他所有的服务后执行。</div><div class="line">#</div><div class="line">#请记住，你必须执行“chmod +x /etc/rc.d/rc.local”来确保确保这个脚本在引导时执行。</div></pre></td></tr></table></figure>
<h3 id="systemctl-开机执行"><a href="#systemctl-开机执行" class="headerlink" title="systemctl 开机执行"></a>systemctl 开机执行</h3><p><code>Centos7</code></p>
<ul>
<li>创建autostart.sh</li>
<li>把autostart.sh 放到 /etc/init.d/</li>
<li>运行:systemctl enable autostart.sh</li>
<li>systemctl disable autostart.sh 关闭启动</li>
</ul>
<p>脚本开头需chkconfig</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/sh</span></div><div class="line"><span class="comment">#chkconfig: 2345 80 90</span></div><div class="line"><span class="comment">#description:disable-write-same</span></div></pre></td></tr></table></figure>
<!-- TODO is not a native service, redirecting to /sbin/chkconfig -->
<!-- TODO chkconfig -->
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java Core]]></title>
      <url>http://xiaozhuang.github.io/2017/01/12/java-core/</url>
      <content type="html"><![CDATA[<p>Java 核心技术学习笔记<br><a id="more"></a></p>
<h1 id="流和文件"><a href="#流和文件" class="headerlink" title="流和文件"></a>流和文件</h1><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><p><code>jdk5.0</code><br>可使用正则表达式来解析基本类型和字符串的简单文本扫描器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Scanner scanner = <span class="keyword">null</span>;</div><div class="line"><span class="comment">//scanner = new Scanner(System.in);</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> File(<span class="string">"data.dat"</span>));</div><div class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">	e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//按行读取内容</span></div><div class="line"><span class="keyword">while</span>(scanner.hasNextLine())&#123;</div><div class="line">	String nextLine = scanner.nextLine();</div><div class="line">	<span class="keyword">if</span>(<span class="string">"exit"</span>.equals(nextLine))&#123;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	System.out.println(nextLine);</div><div class="line">&#125;</div><div class="line">scanner.close();</div></pre></td></tr></table></figure>
<h2 id="DataInputStream和DataOutputStream"><a href="#DataInputStream和DataOutputStream" class="headerlink" title="DataInputStream和DataOutputStream"></a>DataInputStream和DataOutputStream</h2><p>以二进制格式读写所有的基本java类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> num = <span class="number">1</span>;</div><div class="line"><span class="keyword">try</span> (FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"employee.dat"</span>);DataOutputStream dataOutputStream = <span class="keyword">new</span> DataOutputStream(fileOutputStream))&#123;</div><div class="line">	dataOutputStream.writeInt(num);</div><div class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">	e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e1) &#123;</div><div class="line">	e1.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h2><p>java.io中的类都将相对路径名解释为以<code>用户工作目录</code>开始，即VM启动时所设置的工作目录</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取用户工作目录</span></div><div class="line">System.getProperty(<span class="string">"user.dir"</span>)</div><div class="line"><span class="comment">// C:\Users\登录用户~1\AppData\Local\Temp\</span></div><div class="line">System.getProperty(<span class="string">"java.io.tmpdir"</span>)</div><div class="line"><span class="comment">// 获取运行平台文件分隔符</span></div><div class="line">File.separator</div><div class="line"><span class="comment">// 获取运行平台行结束符</span></div><div class="line">System.getProperty(<span class="string">"line.separator"</span>)</div><div class="line"></div><div class="line"><span class="comment">//create a temp file</span></div><div class="line">File temp = File.createTempFile(<span class="string">"tmpDataSave"</span>, <span class="string">".tmp"</span>);</div></pre></td></tr></table></figure>
<h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>Java SE1.4引入java.nio包用Charset类统一对字符集转换</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取Charset，参数为字符名字或别名</span></div><div class="line">Charset charset = Charset.forName(<span class="string">"UTF-8"</span>);</div><div class="line"><span class="comment">// 获取字符别名</span></div><div class="line">Set&lt;String&gt; aliases = charset.aliases();</div><div class="line"><span class="comment">// 获得所有可用字符集名字</span></div><div class="line">SortedMap&lt;String, Charset&gt; availableCharsets = Charset.availableCharsets();</div><div class="line"></div><div class="line"><span class="comment">//使用指定字符集，编码字符串；如果某个字符不能表示，将被转换为？</span></div><div class="line">String string = <span class="string">"sunday"</span>;</div><div class="line">ByteBuffer encode = charset.encode(string);</div><div class="line"><span class="keyword">byte</span>[] array = encode.array();</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 解码字符序列</span></div><div class="line">ByteBuffer bbuf = ByteBuffer.wrap(array);</div><div class="line">CharBuffer cbuf = charset.decode(bbuf);</div><div class="line">String string2 = cbuf.toString();</div><div class="line">System.out.println(string2);</div></pre></td></tr></table></figure>
<h2 id="随机访问文件"><a href="#随机访问文件" class="headerlink" title="随机访问文件"></a>随机访问文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 读入模式访问</span></div><div class="line">RandomAccessFile in = <span class="keyword">new</span> RandomAccessFile(<span class="string">"employee.dat"</span>,<span class="string">"r"</span>);</div><div class="line"><span class="comment">// 读入&amp;写出模式</span></div><div class="line">RandomAccessFile inOut = <span class="keyword">new</span> RandomAccessFile(<span class="string">"employee.dat"</span>,<span class="string">"rw"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 写入数据</span></div><div class="line">inOut.writeFloat(<span class="number">1.1f</span>);</div><div class="line"><span class="comment">// 文件指针设置为距文件开头pos个字节处</span></div><div class="line">inOut.seek(<span class="number">5</span>);</div><div class="line">inOut.writeFloat(<span class="number">1.2f</span>);</div><div class="line"></div><div class="line">inOut.seek(<span class="number">0</span>);</div><div class="line"><span class="comment">// 读出数据</span></div><div class="line"><span class="keyword">float</span> readFloat = inOut.readFloat();</div><div class="line"></div><div class="line"><span class="comment">// 文件指针位置</span></div><div class="line"><span class="keyword">long</span> filePointer = inOut.getFilePointer();</div><div class="line"></div><div class="line"><span class="comment">// 文件按字节度量的长度</span></div><div class="line"><span class="keyword">long</span> length = inOut.length();</div><div class="line"></div><div class="line">in.close();</div><div class="line">inOut.close();</div></pre></td></tr></table></figure>
<h2 id="对象流与序列化"><a href="#对象流与序列化" class="headerlink" title="对象流与序列化"></a>对象流与序列化</h2><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h1 id="Java的基本程序设计结构"><a href="#Java的基本程序设计结构" class="headerlink" title="Java的基本程序设计结构"></a>Java的基本程序设计结构</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>每个用双引号括起来的字符串都是String类的一个实例。</p>
<h3 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String greeting = <span class="string">"Hello"</span>;</div><div class="line">String s = greeting.substring(<span class="number">0</span>,<span class="number">3</span>);</div></pre></td></tr></table></figure>
<p>第二个参数是<code>不想复制</code>的第一个位置</p>
<h3 id="不可变字符串"><a href="#不可变字符串" class="headerlink" title="不可变字符串"></a>不可变字符串</h3><p>String 类没有提供用于<code>修改</code>字符串的方法。<br>String 类对象为不可变字符串。</p>
<p>不可变字符串有一个优点：编译器可以让字符串<code>共享</code></p>
<h3 id="检测字符串是否相等"><a href="#检测字符串是否相等" class="headerlink" title="检测字符串是否相等"></a>检测字符串是否相等</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s.equals(t)</div><div class="line"><span class="comment">// 检测字符串相等，不区分大小写</span></div><div class="line"><span class="string">"Hello"</span>.equalIgnoreCase(<span class="string">"hello"</span>)</div></pre></td></tr></table></figure>
<p>千万不要使用 == 运算符测试字符串的相等性<br>只有字符串<code>常量</code>是共享的，而 + 和 substring 等操作产生的结果并不是共享的。</p>
<h3 id="构建字符串"><a href="#构建字符串" class="headerlink" title="构建字符串"></a>构建字符串</h3><p>由较短的字符串构建字符串。<br>每次连接字符串，都会构建一个新的String对象，<br>既耗时，又浪费空间。</p>
<p>字符串构建器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line"></div><div class="line">builder.append(<span class="string">"ch"</span>);</div><div class="line">builder.append(<span class="string">"str"</span>)</div><div class="line"></div><div class="line">String completedString = builder.toString();</div></pre></td></tr></table></figure>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> WeekDays &#123;</div><div class="line">    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;</div><div class="line"></div><div class="line">    <span class="comment">//字符串转枚举</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WeekDays <span class="title">getEnum</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(str))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (WeekDays enumItem : WeekDays.values()) &#123;</div><div class="line">            <span class="keyword">if</span> (enumItem.name().equalsIgnoreCase(str))</div><div class="line">                <span class="keyword">return</span> enumItem;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> typeCode</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CardAccountType <span class="title">getEnum</span><span class="params">(Integer typeCode)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == typeCode)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (CardAccountType enumItem : CardAccountType.values()) &#123;</div><div class="line">            <span class="keyword">if</span> (enumItem.typeCode == typeCode) &#123;</div><div class="line">                <span class="keyword">return</span> enumItem;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,Integer&gt;&gt; transferToListMap()&#123;</div><div class="line">        ArrayList&lt;Map&lt;String, Integer&gt;&gt; days = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Integer&gt;&gt;();</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (WeekDays enumItem : WeekDays.values()) &#123;</div><div class="line">            HashMap&lt;String, Integer&gt; day = <span class="keyword">new</span> HashMap&lt;String,Integer&gt;();</div><div class="line">            day.put(enumItem.name(), enumItem.ordinal());</div><div class="line">            </div><div class="line">            days.add(day);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> days;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; <span class="title">transferToMap</span><span class="params">()</span></span>&#123;</div><div class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</div><div class="line">        <span class="keyword">for</span>(WeekDays enumItem : WeekDays.values())&#123;</div><div class="line">            map.put(enumItem.name(), enumItem.ordinal());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> map;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Integer,String&gt; <span class="title">transferToReverseMap</span><span class="params">()</span></span>&#123;</div><div class="line">        Map&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;Integer,String&gt;();</div><div class="line">        <span class="keyword">for</span>(WeekDays enumItem : WeekDays.values())&#123;</div><div class="line">            map.put(enumItem.ordinal(),enumItem.name());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> map;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeekDaysList</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//int -&gt; enum</span></div><div class="line">        WeekDays int2enum = WeekDays.values()[<span class="number">0</span>];</div><div class="line">        <span class="comment">//String -&gt; enum</span></div><div class="line">        WeekDays string2enum1 = WeekDays.valueOf(<span class="string">"MONDAY"</span>);</div><div class="line">        WeekDays string2enum2 = Enum.valueOf(WeekDays.class, <span class="string">"MONDAY"</span>);</div><div class="line">        <span class="comment">//enum -&gt; String</span></div><div class="line">        System.out.println(WeekDays.MONDAY.name());</div><div class="line">        <span class="comment">//enum -&gt; int:ordinal()获取当前枚举常量的位置</span></div><div class="line">        System.out.println(WeekDays.MONDAY.ordinal());</div><div class="line">        </div><div class="line">        <span class="comment">//按位置比较</span></div><div class="line">        System.out.println(WeekDays.MONDAY.compareTo(WeekDays.WEDNESDAY));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>该声明定义了一个类，它有7个实例常量。<br>比较两个枚举类型不需要调用equals，使用“==”就可以</p>
</blockquote>
<p>枚举类型可以添加构造器、方法和域。<br>构造器只在<code>构造枚举常量</code>时被调用。</p>
<h2 id="枚举中添加属性和方法"><a href="#枚举中添加属性和方法" class="headerlink" title="枚举中添加属性和方法"></a>枚举中添加属性和方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> Apple &#123;</div><div class="line"></div><div class="line">    AURORA(<span class="number">10</span>), BELMAC(<span class="number">12</span>), CORTLAND(<span class="number">15</span>), EMPIRE(<span class="number">8</span>), GRAVENSTEIN(<span class="number">11</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> price;</div><div class="line">    </div><div class="line">    Apple(<span class="keyword">int</span> price) &#123;</div><div class="line">        <span class="keyword">this</span>.price = price;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> price;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="枚举实例实现抽象方法"><a href="#枚举实例实现抽象方法" class="headerlink" title="枚举实例实现抽象方法"></a>枚举实例实现抽象方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 英镑换算枚举</span></div><div class="line"><span class="keyword">enum</span> Converter &#123;</div><div class="line">    KG(<span class="string">"KG"</span>) &#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">double</span> <span class="title">performConversion</span><span class="params">(<span class="keyword">double</span> f)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> f *= <span class="number">0.45359237</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//克拉</span></div><div class="line">    CARAT(<span class="string">"carat"</span>) &#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">double</span> <span class="title">performConversion</span><span class="params">(<span class="keyword">double</span> f)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> f *= <span class="number">2267.96185</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="comment">//符号</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</div><div class="line"></div><div class="line">    Converter(String symbol) &#123;</div><div class="line">        <span class="keyword">this</span>.symbol = symbol;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> symbol;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">performConversion</span><span class="params">(<span class="keyword">double</span> f)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p><code>Reflection</code></p>
<p>能够分析类能力的程序称为反射。</p>
<h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>java运行时加载类到内存中时，会创建<code>Class类实例</code>来代表加载的类或接口。</p>
<p>获取Class实例<code>方式1</code>，Object类中的getClass()方法返回一个Class类型实例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Employee e;</div><div class="line"><span class="comment">//...</span></div><div class="line">Class cl = e.getClass();</div></pre></td></tr></table></figure>
<p>获取Class实例<code>方式2</code>，调用静态方法forName获得类名对应的Class对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class&lt;?&gt; forName = Class.forName(<span class="string">"java.util.Date"</span>);</div><div class="line">System.out.println(forName.getName());</div></pre></td></tr></table></figure>
<blockquote>
<p>java.util.Date</p>
</blockquote>
<p>获取Class实例<code>方式3</code>，T为任意java类型，T.class代表匹配的类对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class cl1 = Date.class;</div><div class="line">Class cl2 = <span class="keyword">int</span>.class;</div><div class="line">Class cl3 = Double[].class;</div></pre></td></tr></table></figure>
<p>创建对象实例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Class&lt;?&gt; forName = Class.forName(<span class="string">"com.foo.reflect_learn.StrategyImpl"</span>);</div><div class="line"><span class="comment">// 默认构造函数创建对象</span></div><div class="line"><span class="comment">// Object newInstance = forName.newInstance();</span></div><div class="line"></div><div class="line"><span class="comment">// 获得指定参数的Constructor并创建对象</span></div><div class="line">Constructor&lt;?&gt; argsConstructor = forName.getDeclaredConstructor(String.class);</div><div class="line">Object newInstance = declaredConstructor.newInstance(<span class="string">"foo"</span>);</div></pre></td></tr></table></figure>
<h3 id="利用反射分析类的能力"><a href="#利用反射分析类的能力" class="headerlink" title="利用反射分析类的能力"></a>利用反射分析类的能力</h3><p>Class类的getFields, getMethods, getConstructors分别返回<code>public</code>域、方法、构造器数组，<br>其中<code>包括</code>超类的公有成员。</p>
<p>Class类的getDeclaredFields, getDeclaredMethods, getDeclaredConstructors分别返回<code>全部</code>域、方法、构造器数组，<br>其中包括private和protected成员，但<code>不包括</code>超类的成员。</p>
<p>通过反射，获取类public域列表、构造器列表、方法列表。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Field[] declaredFields = Orange.class.getDeclaredFields();</div><div class="line"></div><div class="line"><span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</div><div class="line"></div><div class="line">    declaredField.setAccessible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 静态成员变量</span></div><div class="line">    <span class="keyword">if</span> (Modifier.isStatic(declaredField.getModifiers())) &#123;</div><div class="line"></div><div class="line">        <span class="comment">// 变量类型</span></div><div class="line">        Class&lt;?&gt; fieldType = declaredField.getType();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (fieldType.isAssignableFrom(Apple.class)) &#123;</div><div class="line">            <span class="comment">// 获取静态成员实例</span></div><div class="line">            Object fieldValue = declaredField.get(<span class="keyword">null</span>);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == fieldValue) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            Apple apple = (Apple) fieldValue;</div><div class="line">            System.out.println(apple);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取方法签名</span></div><div class="line">method.toGenericString()</div></pre></td></tr></table></figure>
<h3 id="调用任意方法"><a href="#调用任意方法" class="headerlink" title="调用任意方法"></a>调用任意方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class&lt;?&gt; forName = Class.forName(<span class="string">"com.foo.reflect_learn.StrategyImpl"</span>);</div><div class="line">Method method1 = forName.getMethod(<span class="string">"methond1"</span>, <span class="keyword">null</span>);</div><div class="line">Object invoke = method1.invoke(newInstance, <span class="keyword">null</span>);</div></pre></td></tr></table></figure>
<p>这种设计风格不太简便，出错的可能性也比较大。</p>
<p>另外，invoke的参数和返回值是Object类型。<br>意味着必须进行多次类型转换，会使编译器错过代码检查机会。</p>
<p>使用反射获得方法指针的代码比直接调用方法慢。</p>
<blockquote>
<p>注：建议java开发者不要使用Method对象的回调功能。</p>
</blockquote>
<h3 id="运行时使用反射分析对象"><a href="#运行时使用反射分析对象" class="headerlink" title="运行时使用反射分析对象"></a>运行时使用反射分析对象</h3><p>运行时查看数据域的实际内容</p>
<p>反射访问私有域：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Class&lt;?&gt; strategy = Class.forName(<span class="string">"com.sunday.jdk6_learn.reflect_learn.StrategyImpl"</span>);</div><div class="line">            </div><div class="line">Object newInstance = strategy.newInstance();</div><div class="line"></div><div class="line"><span class="keyword">if</span>(newInstance <span class="keyword">instanceof</span> Strategy)&#123;</div><div class="line">    <span class="comment">//获取私有属性</span></div><div class="line">    Field infoField = strategy.getDeclaredField(<span class="string">"info"</span>);</div><div class="line">    <span class="comment">//闭安全检查</span></div><div class="line">    <span class="comment">//setAccessible()是AccessibleObject类中方法，它是Field、Method和Constructor类的超类。</span></div><div class="line">    infoField.setAccessible(<span class="keyword">true</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//读取私有属性</span></div><div class="line">    Object object = infoField.get(newInstance);</div><div class="line">    System.out.println(object);</div><div class="line">    <span class="comment">//设置私有属性</span></div><div class="line">    infoField.set(newInstance, <span class="string">"foo"</span>);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="instanceof-amp-isAssignableFrom"><a href="#instanceof-amp-isAssignableFrom" class="headerlink" title="instanceof &amp; isAssignableFrom"></a>instanceof &amp; isAssignableFrom</h3><p>instanceof 用来判断一个<code>对象</code>实例obj是否是另一个类或接口的实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">obj <span class="keyword">instanceof</span> ClassName</div></pre></td></tr></table></figure>
<p>isAssignableFrom 用来判断一个<code>类</code>Class1是否与另一个类Class2相同，或者Class1是否是Class2的超类或接口；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class1.isAssignableFrom(class2)</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 是否是枚举类型</span></div><div class="line">java.lang.Class.isEnum()</div></pre></td></tr></table></figure>
<h3 id="getDeclaringClass"><a href="#getDeclaringClass" class="headerlink" title="getDeclaringClass"></a>getDeclaringClass</h3><p><code>java.lang.reflect.Executable#getDeclaringClass</code></p>
<p>如果此 Class 对象所表示的类或接口是另一个类的成员，则返回的 Class 对象表示该对象的声明类。如果该类或接口不是其他类的成员，则此方法返回 null</p>
<h3 id="isInstance"><a href="#isInstance" class="headerlink" title="isInstance"></a>isInstance</h3><p><code>java.lang.Class#isInstance</code></p>
<p>判定指定的 Object 是否与此 Class 所表示的对象赋值兼容。此方法是 Java 语言 instanceof 运算符的动态等效方法。</p>
<h1 id="泛型程序设计"><a href="#泛型程序设计" class="headerlink" title="泛型程序设计"></a>泛型程序设计</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 泛型方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; List&lt;T&gt; <span class="title">getRecords</span><span class="params">(Class&lt;T&gt; c, Selector s)</span> </span>&#123;</div><div class="line">     <span class="comment">// Use Selector to select rows </span></div><div class="line">     List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;T&gt;();</div><div class="line">     <span class="keyword">for</span> (<span class="comment">/* iterate over results */</span>) &#123;</div><div class="line">         T row = c.newInstance(); <span class="comment">// use reflection to set fields from result </span></div><div class="line">         list.add(row); </div><div class="line">      &#125; </div><div class="line">      <span class="keyword">return</span> list; </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// org.springframework.core.env.PropertySourcesPropertyResolver#getProperty(java.lang.String, java.lang.Class&lt;T&gt;)</span></div><div class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getProperty</span><span class="params">(String key, Class&lt;T&gt; targetValueType)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> debugEnabled = logger.isDebugEnabled();</div><div class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">        logger.trace(format(<span class="string">"getProperty(\"%s\", %s)"</span>, key, targetValueType.getSimpleName()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (PropertySource&lt;?&gt; propertySource : <span class="keyword">this</span>.propertySources) &#123;</div><div class="line">        <span class="keyword">if</span> (debugEnabled) &#123;</div><div class="line">            logger.debug(format(<span class="string">"Searching for key '%s' in [%s]"</span>, key, propertySource.getName()));</div><div class="line">        &#125;</div><div class="line">        Object value;</div><div class="line">        <span class="keyword">if</span> ((value = propertySource.getProperty(key)) != <span class="keyword">null</span>) &#123;</div><div class="line">            Class&lt;?&gt; valueType = value.getClass();</div><div class="line">            <span class="keyword">if</span> (debugEnabled) &#123;</div><div class="line">                logger.debug(</div><div class="line">                        format(<span class="string">"Found key '%s' in [%s] with type [%s] and value '%s'"</span>,</div><div class="line">                                key, propertySource.getName(), valueType.getSimpleName(), value));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.conversionService.canConvert(valueType, targetValueType)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">                        format(<span class="string">"Cannot convert value [%s] from source type [%s] to target type [%s]"</span>,</div><div class="line">                                value, valueType.getSimpleName(), targetValueType.getSimpleName()));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> conversionService.convert(value, targetValueType);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (debugEnabled) &#123;</div><div class="line">        logger.debug(format(<span class="string">"Could not find key '%s' in any property source. Returning [null]"</span>, key));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 8]]></title>
      <url>http://xiaozhuang.github.io/2017/01/03/java8/</url>
      <content type="html"><![CDATA[<p>“编程语言的某个新特性还会时不时地让我感到兴奋，因为它让我花更少的时间就能够写出更清晰、更简洁的代码。”<br>————JAVA8实战<br><a id="more"></a></p>
<h1 id="方法和Lambda作为一等公民"><a href="#方法和Lambda作为一等公民" class="headerlink" title="方法和Lambda作为一等公民"></a>方法和Lambda作为一等公民</h1><p>java8的第一个新功能是方法引用。</p>
<p>方法传递的形参是接口，实参是方法或Lambda</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; <span class="title">filterApples</span><span class="params">(List&lt;Apple&gt; inventory, Predicate&lt;Apple&gt; p)</span></span>&#123;</div><div class="line">	List&lt;Apple&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">	<span class="keyword">for</span>(Apple apple : inventory)&#123;</div><div class="line">		<span class="keyword">if</span>(p.test(apple))&#123;</div><div class="line">			result.add(apple);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isHeavyApple</span><span class="params">(Apple p)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> p.getWeight() &gt; <span class="number">150</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//库存</span></div><div class="line">List&lt;Apple&gt; inventory = Arrays.asList(<span class="keyword">new</span> Apple(<span class="number">80</span>,<span class="string">"green"</span>),</div><div class="line">        <span class="keyword">new</span> Apple(<span class="number">155</span>, <span class="string">"green"</span>),</div><div class="line">        <span class="keyword">new</span> Apple(<span class="number">120</span>, <span class="string">"red"</span>));</div><div class="line"></div><div class="line"></div><div class="line">List&lt;Apple&gt; filterApples = filterApples(inventory,(Apple a) -&gt; <span class="string">"green"</span>.equals(a.getColor()));</div><div class="line">System.out.println(filterApples);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 方法引用::语法</span></div><div class="line">List&lt;Apple&gt; filterApples2 = filterApples(inventory,App::isHeavyApple);</div><div class="line">System.out.println(filterApples2);</div></pre></td></tr></table></figure>
<h1 id="通过行为参数化传递代码"><a href="#通过行为参数化传递代码" class="headerlink" title="通过行为参数化传递代码"></a>通过行为参数化传递代码</h1><p><code>行为参数化</code></p>
<p>行为参数化，接受多个<code>不同的行为作为参数</code>，并在内部使用它们，完成不同的行为。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Apple apple)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; <span class="title">filterApples</span><span class="params">(List&lt;Apple&gt; apples, Predicate predicate)</span></span>&#123;</div><div class="line">    LinkedList&lt;Apple&gt; results = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (Apple apple : apples) &#123;</div><div class="line">        <span class="keyword">if</span>(predicate.test(apple))&#123;</div><div class="line">            results.add(apple);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>泛型化:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T apple)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">filterApples</span><span class="params">(List&lt;T&gt; list, Predicate&lt;T&gt; p)</span></span>&#123;</div><div class="line">    LinkedList&lt;T&gt; results = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (T e : list) &#123;</div><div class="line">        <span class="keyword">if</span>(p.test(e))&#123;</div><div class="line">            results.add(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">filterApples(apples, (Apple apple) -&gt; <span class="string">"red"</span>.equals(apple.getColor()));</div><div class="line">filterApples(apples, (Apple apple) -&gt; apple.getWeight() &gt; <span class="number">150</span>);</div></pre></td></tr></table></figure>
<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>Lambda 表达式可理解为简洁地表示<code>可传递</code>的<code>匿名函数</code>的一种方式。</p>
<ul>
<li>参数列表</li>
<li>函数主题</li>
<li>返回类型</li>
<li>异常列表</li>
</ul>
<p>基本语法：<br><code>(parameters) -&gt; expression</code></p>
<p><code>(parameters) -&gt; { statements; }</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Comparator&lt;Apple&gt; byWeight = (Apple a1, Apple a2) -&gt; ObjectUtils.compare(a1.getWeight(), a2.getWeight());</div><div class="line"></div><div class="line"><span class="comment">// 表达式可包含多行</span></div><div class="line"><span class="comment">/* (int x, int y) -&gt; &#123;</span></div><div class="line"> 	System.out.println("Result:");</div><div class="line">     System.out.println(x + y);</div><div class="line"> &#125;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// 可使用显式返回语句</span></div><div class="line"><span class="comment">// return 是一个控制流，需使用花括号</span></div><div class="line"><span class="comment">// (Integer i) -&gt; &#123; return "Alan" + i; &#125;</span></div></pre></td></tr></table></figure>
<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>函数式接口就是只定义一个抽象方法的接口</p>
<blockquote>
<p>包含<code>默认方法</code>时，只要接口只定义<code>一个抽象方法</code>，仍然是函数接口。</p>
</blockquote>
<p>Lambda表达式允许直接以<code>内联的形式</code>为函数是接口的抽象方法提供实现，<br>并把整个表达式作为函数式接口的实例。</p>
<p>Lambda表达式可以赋值给一个<code>变量</code> 或 传递给<code>接收函数式接口作为参数</code>的方法。</p>
<p>@FunctionalInterface 注解，表示该接口设计成一个函数式接口。</p>
<h2 id="环绕执行模式"><a href="#环绕执行模式" class="headerlink" title="环绕执行模式"></a>环绕执行模式</h2><p>资源处理时，打开资源，做一些处理，然后关闭资源；</p>
<p>使用Lambda表达式，传递行为，复用环绕执行代码；</p>
<h2 id="使用函数式接口"><a href="#使用函数式接口" class="headerlink" title="使用函数式接口"></a>使用函数式接口</h2><h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><p><code>java.util.function.Predicate&lt;T&gt;</code></p>
<p>Predicate定义<code>test</code>方法，接受泛型对象，并返回boolean</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p><code>java.util.function.Consumer&lt;T&gt;</code></p>
<p>Consumer定义<code>accept</code>方法，接受泛型对象，返回void<br>访问T对象，并执行某些操作，可使用该接口；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p><code>java.util.function.Function&lt;T, R&gt;</code></p>
<p>Function 定义apply方法，接受泛型T对象，返回泛型R对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</div><div class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="函数接口汇总"><a href="#函数接口汇总" class="headerlink" title="函数接口汇总"></a>函数接口汇总</h3><table>
<thead>
<tr>
<th>接口</th>
<th>类型</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td>Predicate<t></t></td>
<td>1入参</td>
<td>Boolean</td>
</tr>
<tr>
<td>BiPredicate<t, u=""></t,></td>
<td>2入参</td>
<td>Boolean</td>
</tr>
<tr>
<td>Supplier<t></t></td>
<td>无入参</td>
<td>T</td>
</tr>
<tr>
<td>Consumer<t></t></td>
<td>1入参</td>
<td>void</td>
</tr>
<tr>
<td>BiConsumer<t></t></td>
<td>2入参</td>
<td>void</td>
</tr>
<tr>
<td>Function<t, r=""></t,></td>
<td>1入参</td>
<td>R</td>
</tr>
<tr>
<td>BiFunction<t, u,="" r=""></t,></td>
<td>2入参</td>
<td>R</td>
</tr>
<tr>
<td>UnaryOperator<t></t></td>
<td>1入参T</td>
<td>T</td>
</tr>
<tr>
<td>BinaryOperator<t></t></td>
<td>1入参T</td>
<td>T</td>
</tr>
</tbody>
</table>
<h3 id="原始类型特化"><a href="#原始类型特化" class="headerlink" title="原始类型特化"></a>原始类型特化</h3><p>Predicate<integer> 使用基本数据类型时，会自动装箱；</integer></p>
<p>Jdk提供了函数式接口专门的版本，IntPredicate、LongPredicate等，避免自动装箱；</p>
<blockquote>
<p>装箱后的值需要更多的内存，并需要额外的内存搜索来获取被包装的原始值。</p>
</blockquote>
<h2 id="类型检查、类型推断以及限制"><a href="#类型检查、类型推断以及限制" class="headerlink" title="类型检查、类型推断以及限制"></a>类型检查、类型推断以及限制</h2><p>Lambda表达式可以为接口生成一个实例。</p>
<h3 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h3><p>Lambda的类型 从使用Lambda的上下文推断出来。 上下文中Lambda表达式需要的类型称为 <code>目标类型</code>。</p>
<p>Lambda表达式抛出异常，则抽象方法声明的throws语句也必须匹配。</p>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>Lambda可以没有限制的捕获<code>实例变量</code>和<code>静态变量</code>。</p>
<p>Lambda访问局部变量，实际是<code>访问局部变量的副本</code>。</p>
<h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">List&lt;Apple&gt; appleList = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">appleList.add(<span class="keyword">new</span> Apple(<span class="number">150</span>));</div><div class="line">appleList.add(<span class="keyword">new</span> Apple(<span class="number">100</span>));</div><div class="line"></div><div class="line"><span class="comment">// 升序</span></div><div class="line">appleList.sort(Comparator.comparing(Apple::getWeight));</div><div class="line"></div><div class="line"><span class="comment">// 降序</span></div><div class="line">appleList.sort(Comparator.comparing(Apple::getWeight).reversed());</div></pre></td></tr></table></figure>
<p>3种方法引用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 静态方法引用</span></div><div class="line">(args) -&gt; ClassName.staticMethod(args);</div><div class="line"></div><div class="line">ClassName::staticMethod</div><div class="line"></div><div class="line"><span class="comment">// 2. 实例方法引用 (arg0 为ClassName类型)</span></div><div class="line">(arg0, rest) -&gt; arg0.instanceMethod(rest)</div><div class="line">ClassNama::instanceMethod</div><div class="line"></div><div class="line"><span class="comment">// 3. 对象的实例方法引用</span></div><div class="line">(args) -&gt; expr.instanceMethod(args)</div><div class="line">expression::instanceMethod;</div></pre></td></tr></table></figure>
<h3 id="构造方法引用"><a href="#构造方法引用" class="headerlink" title="构造方法引用"></a>构造方法引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 无参构造</span></div><div class="line">Supplier&lt;Apple&gt; c1 = Apple::<span class="keyword">new</span>;</div><div class="line">Apple apple = c1.get();</div><div class="line"></div><div class="line"><span class="comment">// 有参构造</span></div><div class="line">Function&lt;Integer, Apple&gt; c2 = Apple::<span class="keyword">new</span>;</div><div class="line">Apple apple150 = c2.apply(<span class="number">150</span>);</div></pre></td></tr></table></figure>
<h2 id="复合Lambda表达式"><a href="#复合Lambda表达式" class="headerlink" title="复合Lambda表达式"></a>复合Lambda表达式</h2><p>通过默认方法，实现函数接口复合</p>
<h3 id="比较器复合"><a href="#比较器复合" class="headerlink" title="比较器复合"></a>比较器复合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 逆序</span></div><div class="line">appleList.sort(Comparator.comparing(Apple::getWeight).reversed());</div><div class="line"></div><div class="line"><span class="comment">// 比较器链，第1个比较相等时，按第2个比较</span></div><div class="line">appleList.sort(Comparator.comparing(Apple::getWeight)</div><div class="line">                .reversed()</div><div class="line">                .thenComparing(Apple::getColor));</div><div class="line"></div><div class="line"><span class="comment">// org.apache.commons.lang3.ObjectUtils#compare(T, T)</span></div><div class="line"><span class="comment">// 升序排序，null在后面</span></div><div class="line">apples.sort((o1, o2) -&gt; ObjectUtils.compare(o1.getDate(), o2.getDate()));</div><div class="line">System.out.println(JSON.toJSONString(apples, SerializerFeature.WriteDateUseDateFormat));</div><div class="line"></div><div class="line"><span class="comment">// 升序排序，null在前面</span></div><div class="line">apples.sort((o1, o2) -&gt; ObjectUtils.compare(o1.getDate(), o2.getDate(), <span class="keyword">true</span>));</div><div class="line">System.out.println(JSON.toJSONString(apples, SerializerFeature.WriteDateUseDateFormat));</div><div class="line"></div><div class="line"><span class="comment">// 降序</span></div><div class="line">apples.sort(</div><div class="line">        Collections.reverseOrder(</div><div class="line">                (o1, o2) -&gt; ObjectUtils.compare(o1.getDate(), o2.getDate())</div><div class="line">        )</div><div class="line">);</div><div class="line">System.out.println(JSON.toJSONString(apples, SerializerFeature.WriteDateUseDateFormat));</div></pre></td></tr></table></figure>
<h3 id="谓词复合"><a href="#谓词复合" class="headerlink" title="谓词复合"></a>谓词复合</h3><p>包括： negate、and 和 or</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// negate</span></div><div class="line">Predicate&lt;Apple&gt; notRedApple = redApple.negate();</div><div class="line"></div><div class="line"><span class="comment">// and</span></div><div class="line">notRedApple.and((apple) -&gt; apple.getWeight() &gt; <span class="number">150</span>)</div></pre></td></tr></table></figure>
<h3 id="函数复合"><a href="#函数复合" class="headerlink" title="函数复合"></a>函数复合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Function&lt;Integer, Integer&gt; f = (x) -&gt; x + <span class="number">1</span>;</div><div class="line">Function&lt;Integer, Integer&gt; g = (x) -&gt; x * <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="comment">// h = g(f(x))</span></div><div class="line">Function&lt;Integer, Integer&gt; h = f.andThen(g);</div><div class="line"><span class="comment">// k = f(g(x))</span></div><div class="line">Function&lt;Integer, Integer&gt; k = f.compose(g);</div></pre></td></tr></table></figure>
<h1 id="流"><a href="#流" class="headerlink" title="流"></a>流</h1><p>java8用Stream API解决两个问题；</p>
<ul>
<li>集合处理时的套路和晦涩</li>
<li>难以利用多核</li>
</ul>
<p>Collection主要为了存储和访问数据，Stream主要用于描述对数据的计算。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//库存</span></div><div class="line">List&lt;Apple&gt; apples = Arrays.asList(</div><div class="line">                <span class="keyword">new</span> Apple(<span class="string">"green"</span>, <span class="number">80</span>),</div><div class="line">                <span class="keyword">new</span> Apple(<span class="string">"red"</span>, <span class="number">155</span>),</div><div class="line">                <span class="keyword">new</span> Apple(<span class="string">"yellow"</span>, <span class="number">120</span>)</div><div class="line">        );</div><div class="line"></div><div class="line"><span class="comment">// 满足重量条件、获取颜色</span></div><div class="line">List&lt;String&gt; weightAppleColors = apples</div><div class="line">        .stream()</div><div class="line">        .filter(apple -&gt; apple.getWeight() &gt; <span class="number">150</span>)</div><div class="line">        .sorted(Comparator.comparing(Apple::getWeight))</div><div class="line">        .map(Apple::getColor)</div><div class="line">        .collect(Collectors.toList());</div><div class="line"></div><div class="line"><span class="comment">// 并行计算流</span></div><div class="line">apples.parallelStream();</div><div class="line"></div><div class="line"><span class="comment">// 分组为map</span></div><div class="line">Map&lt;String, List&lt;Apple&gt;&gt; colorMap = apples.stream()</div><div class="line">                .collect(Collectors.groupingBy(Apple::getColor));</div><div class="line"></div><div class="line"><span class="comment">// flatMap 多个流合并成一个流</span></div><div class="line"><span class="comment">// Stream&lt;String[]&gt; -&gt; flatMap -&gt; Stream&lt;String&gt;</span></div><div class="line">Student obj1 = <span class="keyword">new</span> Student();</div><div class="line">obj1.setName(<span class="string">"mkyong"</span>);</div><div class="line">obj1.addBook(<span class="string">"Java 8 in Action"</span>);</div><div class="line">obj1.addBook(<span class="string">"Spring Boot in Action"</span>);</div><div class="line">obj1.addBook(<span class="string">"Effective Java (2nd Edition)"</span>);</div><div class="line"></div><div class="line">Student obj2 = <span class="keyword">new</span> Student();</div><div class="line">obj2.setName(<span class="string">"zilap"</span>);</div><div class="line">obj2.addBook(<span class="string">"Learning Python, 5th Edition"</span>);</div><div class="line">obj2.addBook(<span class="string">"Effective Java (2nd Edition)"</span>);</div><div class="line"></div><div class="line">List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">list.add(obj1);</div><div class="line">list.add(obj2);</div><div class="line"></div><div class="line">List&lt;String&gt; collect =</div><div class="line">        list.stream()</div><div class="line">                .map(x -&gt; x.getBook())      <span class="comment">//Stream&lt;Set&lt;String&gt;&gt;</span></div><div class="line">                .flatMap(x -&gt; x.stream())   <span class="comment">//Stream&lt;String&gt;</span></div><div class="line">                .distinct()</div><div class="line">                .collect(Collectors.toList());</div></pre></td></tr></table></figure>
<p>Java中并行与无共享可变状态<br>库负责分块，即把大的流分成几个小的流，以便并行处理。<br>其次，流提供几乎免费的并行，只有传递给filter之类的库方法不会互动时才能工作。</p>
<p><code>函数式编程</code>函数的主要意思：</p>
<ul>
<li>把函数作为一等值</li>
<li>执行时在元素之间无互动</li>
</ul>
<h2 id="使用流"><a href="#使用流" class="headerlink" title="使用流"></a>使用流</h2><ul>
<li>一个数据源</li>
<li>一个中间操作链：可以连接起来的流操作称为中间操作。</li>
<li>一个终端终端操作：终端操作从流的流水线上生成结果。</li>
</ul>
<blockquote>
<p>流只能遍历一次</p>
</blockquote>
<p>中间操作：</p>
<ul>
<li>filter： 排除元素</li>
<li>map： 元素转成其他形式或提取信息</li>
<li>limit：截断流</li>
<li>sorted</li>
<li>distinct</li>
</ul>
<p>终端操作：</p>
<ul>
<li>forEach： 消费流中元素</li>
<li>count： 返回流中元素的个数</li>
<li>collect： 流归约成一个集合</li>
</ul>
<h3 id="joining"><a href="#joining" class="headerlink" title="joining"></a>joining</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String[] animals = <span class="keyword">new</span> String[] &#123; <span class="string">"Dog"</span>, <span class="string">"Cat"</span>, <span class="string">"Bird"</span>, <span class="string">"Cow"</span> &#125;;</div><div class="line">String result = Arrays.stream(animals).collect(Collectors.joining(<span class="string">","</span>));</div><div class="line"></div><div class="line">String workOrderCodesStr = String.join(<span class="string">","</span>, workOrderCodes);</div><div class="line"></div><div class="line">assertEquals(result, <span class="string">"Dog, Cat, Bird, Cow"</span>);</div></pre></td></tr></table></figure>
<h1 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h1><p>java8中，接口可以包含实现类没有提供实现的方法签名，缺失的方法主体随接口提供</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoInterface</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">testFun</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//TODO default implementation</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认方法主要为了支持库设计是，让他们能够写出<code>更容易改进</code>的接口</p>
<p>无默认方法时，给接口加入一个新方法，意味着所有的实现类都必须为其提供一个实现</p>
<h1 id="新的日期和时间API"><a href="#新的日期和时间API" class="headerlink" title="新的日期和时间API"></a>新的日期和时间API</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//LocalDate：只包含日期，比如：2016-10-20</span></div><div class="line"><span class="comment">//LocalTime：只包含时间，比如：23:12:10</span></div><div class="line">LocalDate localDate = LocalDate.of(<span class="number">2017</span>, <span class="number">7</span>, <span class="number">1</span>);</div><div class="line">LocalTime localTime = LocalTime.of(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//当前月份最后一秒</span></div><div class="line"><span class="comment">//LocalDateTime：包含日期和时间，比如：2016-10-20 23:14:21</span></div><div class="line">LocalDateTime localDateTime = LocalDateTime.of(localDate, localTime)</div><div class="line">        .plusMonths(<span class="number">1</span>)</div><div class="line">        .minusSeconds(<span class="number">1</span>);<span class="comment">//当前月第一天，后一个月，前一秒</span></div><div class="line"></div><div class="line"><span class="comment">//日期</span></div><div class="line">LocalDateTime now = LocalDateTime.now();</div><div class="line"><span class="comment">//日期格式化</span></div><div class="line">DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">String localDateTimeFormat = localDateTime.format(formatter);</div><div class="line">System.out.println(<span class="string">"LocalDateTime Date Formate: "</span> + localDateTimeFormat);</div><div class="line">String formatDateTime = now.format(formatter);</div><div class="line">System.out.println(<span class="string">"Now Date Formate: "</span> + formatDateTime);</div><div class="line"></div><div class="line"><span class="comment">//日期转时间戳</span></div><div class="line">Instant instant = localDateTime.toInstant(ZoneOffset.UTC);</div><div class="line">System.out.println(instant.getEpochSecond());</div><div class="line"></div><div class="line"><span class="comment">// String -&gt; LocalDateTime</span></div><div class="line">String dateStr = <span class="string">"2016-11-09 10:30"</span>;</div><div class="line">DateTimeFormatter dateStrFormatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm"</span>);</div><div class="line">LocalDateTime dateStrLocalDateTime = LocalDateTime.parse(dateStr, dateStrFormatter);</div><div class="line">System.out.println(<span class="string">"String -&gt; LocalDateTime: "</span> + dateStrLocalDateTime);</div></pre></td></tr></table></figure>
<h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">StringBuilder contentBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line"><span class="keyword">try</span> (Stream&lt;String&gt; stream = Files.lines(Paths.get(filePath), StandardCharsets.UTF_8)) &#123;</div><div class="line">    stream.forEach(s -&gt; contentBuilder.append(s).append(<span class="string">"\n"</span>));</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> contentBuilder.toString();</div><div class="line"></div><div class="line"><span class="comment">//读取全部文本</span></div><div class="line">String data = <span class="keyword">new</span> String(Files.readAllBytes(Paths.get(System.getProperty(<span class="string">"user.dir"</span>) + System.getProperty(<span class="string">"line.separator"</span>) + tmpDataSave + tmpDataSaveSuffix)), StandardCharsets.UTF_8);</div></pre></td></tr></table></figure>
<h1 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Optional&lt;String&gt; gender = Optional.of(<span class="string">"MALE"</span>);</div><div class="line">Optional&lt;String&gt; emptyGender = Optional.empty();</div><div class="line"></div><div class="line">System.out.println(gender.orElse(<span class="string">"&lt;N/A&gt;"</span>)); <span class="comment">//MALE</span></div><div class="line">System.out.println(emptyGender.orElse(<span class="string">"&lt;N/A&gt;"</span>)); <span class="comment">//&lt;N/A&gt;</span></div><div class="line"></div><div class="line">System.out.println(gender.orElseGet(() -&gt; <span class="string">"&lt;N/A&gt;"</span>)); <span class="comment">//MALE</span></div><div class="line">System.out.println(emptyGender.orElseGet(() -&gt; <span class="string">"&lt;N/A&gt;"</span>)); <span class="comment">//&lt;N/A&gt;</span></div></pre></td></tr></table></figure>
<h1 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h1><p><code>组合式异步编程</code></p>
<p>CompletableFuturene能够用最有效的方式，非常容易的将多个同步或异步执行的任务结合在一起</p>
<p>实现2个接口：</p>
<ul>
<li>CompletionStage</li>
<li>Future</li>
</ul>
<h2 id="Future接口"><a href="#Future接口" class="headerlink" title="Future接口"></a>Future接口</h2><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean cancel(boolean mayInterruptIfRunning)</td>
<td>试图取消对此任务的执行。</td>
</tr>
<tr>
<td>V get()</td>
<td>尝如有必要，等待计算完成，然后获取其结果。</td>
</tr>
<tr>
<td>V get(long timeout, TimeUnit unit)</td>
<td>如有必要，最多等待为使计算完成所给定的时间之后，获取其结果（如果结果可用）。</td>
</tr>
<tr>
<td>boolean cancel(boolean mayInterruptIfRunning)</td>
<td>试图取消对此任务的执行。</td>
</tr>
<tr>
<td>boolean isCancelled()</td>
<td>果在任务正常完成前将其取消，则返回 true</td>
</tr>
<tr>
<td>boolean isDone()</td>
<td>如果任务已完成，则返回 true</td>
</tr>
</tbody>
</table>
<h2 id="CompletableFuture-1"><a href="#CompletableFuture-1" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h2><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>public T getNow(T valueIfAbsent)</td>
<td>Returns the result value (or throws any encountered exception) if completed, else returns the given valueIfAbsent.</td>
</tr>
<tr>
<td>public T join()</td>
<td>Returns the result value when complete, or throws an (<code>unchecked</code>) exception if completed exceptionally.</td>
</tr>
</tbody>
</table>
<a href="https://colobu.com/2016/02/29/Java-CompletableFuture/" title="JavaCompletableFuture详解" target="_blank" rel="external">JavaCompletableFuture详解</a>
<a href="https://colobu.com/2018/03/12/20-Examples-of-Using-Java’s-CompletableFuture/" title="CompletableFuture20" target="_blank" rel="external">CompletableFuture20</a>
<h2 id="完成的CompletableFuture"><a href="#完成的CompletableFuture" class="headerlink" title="完成的CompletableFuture"></a>完成的CompletableFuture</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CompletableFuture cf = CompletableFuture.completedFuture(<span class="string">"message"</span>);</div></pre></td></tr></table></figure>
<h2 id="异步阶段"><a href="#异步阶段" class="headerlink" title="异步阶段"></a>异步阶段</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CompletableFuture.runAsync(() -&gt; &#123;</div><div class="line">    <span class="comment">// return void</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</div><div class="line">    <span class="comment">// return void</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"return T"</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="在前一个阶段上应用函数"><a href="#在前一个阶段上应用函数" class="headerlink" title="在前一个阶段上应用函数"></a>在前一个阶段上应用函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 同步</span></div><div class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</div><div class="line">    <span class="comment">// return void</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"return T"</span>;</div><div class="line">&#125;).thenAccept(System.out::println);</div><div class="line"></div><div class="line"><span class="comment">// 异步</span></div><div class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</div><div class="line">    <span class="comment">// return void</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"return T"</span>;</div><div class="line">&#125;).thenAcceptAsync(System.out::println);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">BasicThreadFactory threadFactory = <span class="keyword">new</span> BasicThreadFactory.Builder()</div><div class="line">                .namingPattern(<span class="string">"sys-async-thread-%d"</span>)</div><div class="line">                .daemon(<span class="keyword">true</span>)</div><div class="line">                .build();</div><div class="line">LinkedBlockingQueue&lt;Runnable&gt; blockingQueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">1024</span>);</div><div class="line">ThreadPoolExecutor threadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">8</span>, <span class="number">64</span>, TimeUnit.SECONDS,blockingQueue, threadFactory, <span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</div><div class="line"></div><div class="line"><span class="comment">// 异步-指定线程池</span></div><div class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</div><div class="line">    <span class="comment">// return void</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"return T"</span>;</div><div class="line">&#125;).thenAcceptAsync(System.out::println, threadPool);</div></pre></td></tr></table></figure>
<h2 id="完成计算异常"><a href="#完成计算异常" class="headerlink" title="完成计算异常"></a>完成计算异常</h2><p><code>java.util.concurrent.CompletionStage#handle</code></p>
<blockquote>
<p>Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed with this stage’s result and exception as arguments to the supplied function. </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"return T"</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">CompletableFuture&lt;String&gt; handleRet = stringCompletableFuture.handle((s, th) -&gt; &#123;</div><div class="line">    <span class="keyword">return</span> (th != <span class="keyword">null</span>) ? <span class="string">"completed exceptionally"</span> : s;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">handleRet.thenAccept(System.out::println);</div></pre></td></tr></table></figure>
<h2 id="取消计算"><a href="#取消计算" class="headerlink" title="取消计算"></a>取消计算</h2><p><code>java.util.concurrent.CompletableFuture#cancel</code></p>
<blockquote>
<p>等价于java.util.concurrent.CompletableFuture#completeExceptionally</p>
</blockquote>
<h2 id="任意一个CompletionStage完成的时候，fn会被执行"><a href="#任意一个CompletionStage完成的时候，fn会被执行" class="headerlink" title="任意一个CompletionStage完成的时候，fn会被执行"></a>任意一个CompletionStage完成的时候，fn会被执行</h2><p><code>java.util.concurrent.CompletionStage#acceptEither</code></p>
<blockquote>
<p>Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied action.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String original = <span class="string">"Message"</span>;</div><div class="line">StringBuilder result = <span class="keyword">new</span> StringBuilder();</div><div class="line">CompletableFuture cf = CompletableFuture.completedFuture(original)</div><div class="line">            .thenApplyAsync(s -&gt; delayedUpperCase(s))</div><div class="line">            .acceptEither(CompletableFuture.completedFuture(original).thenApplyAsync(s -&gt; delayedLowerCase(s)),</div><div class="line">                    s -&gt; result.append(s).append(<span class="string">"acceptEither"</span>));</div><div class="line">cf.join();</div><div class="line">assertTrue(<span class="string">"Result was empty"</span>, result.toString().endsWith(<span class="string">"acceptEither"</span>));</div></pre></td></tr></table></figure>
<h2 id="在两个阶段都执行完后运行"><a href="#在两个阶段都执行完后运行" class="headerlink" title="在两个阶段都执行完后运行"></a>在两个阶段都执行完后运行</h2><p><code>java.util.concurrent.CompletionStage#runAfterBoth</code></p>
<blockquote>
<p>Returns a new CompletionStage that, when this and the other given stage both complete normally, executes the given action.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> String original = <span class="string">"Message"</span>;</div><div class="line">StringBuilder result = <span class="keyword">new</span> StringBuilder();</div><div class="line">CompletableFuture.completedFuture(original).thenApply(String::toUpperCase).runAfterBoth(</div><div class="line">        CompletableFuture.completedFuture(original).thenApply(String::toLowerCase),</div><div class="line">        () -&gt; result.append(<span class="string">"done"</span>));</div><div class="line">assertTrue(<span class="string">"Result was empty"</span>, result.length() &gt; <span class="number">0</span>);</div></pre></td></tr></table></figure>
<h2 id="异步使用BiFunction处理两个阶段的结果"><a href="#异步使用BiFunction处理两个阶段的结果" class="headerlink" title="异步使用BiFunction处理两个阶段的结果"></a>异步使用BiFunction处理两个阶段的结果</h2><p><code>java.util.concurrent.CompletableFuture#thenCombine</code></p>
<blockquote>
<p>两个CompletableFuture并行执行，BiFunction处理结果</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CompletableFuture cf = CompletableFuture.completedFuture(original).thenApply(s -&gt; delayedUpperCase(s))</div><div class="line">            .thenCompose(upper -&gt; CompletableFuture.completedFuture(original).thenApply(s -&gt; delayedLowerCase(s))</div><div class="line">                    .thenApply(s -&gt; upper + s));</div></pre></td></tr></table></figure>
<h2 id="当任意一个CompletableFuture完成后，-创建一个完成的CompletableFuture"><a href="#当任意一个CompletableFuture完成后，-创建一个完成的CompletableFuture" class="headerlink" title="当任意一个CompletableFuture完成后， 创建一个完成的CompletableFuture."></a>当任意一个CompletableFuture完成后， 创建一个完成的CompletableFuture.</h2><p><code>ava.util.concurrent.CompletableFuture#anyOf</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">StringBuilder result = <span class="keyword">new</span> StringBuilder();</div><div class="line">List messages = Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</div><div class="line">List&lt;CompletableFuture&gt; futures = messages.stream()</div><div class="line">        .map(msg -&gt; CompletableFuture.completedFuture(msg).thenApply(s -&gt; delayedUpperCase(s)))</div><div class="line">        .collect(Collectors.toList());</div><div class="line">CompletableFuture.anyOf(futures.toArray(<span class="keyword">new</span> CompletableFuture[futures.size()])).whenComplete((res, th) -&gt; &#123;</div><div class="line">    <span class="keyword">if</span>(th == <span class="keyword">null</span>) &#123;</div><div class="line">        assertTrue(isUpperCase((String) res));</div><div class="line">        result.append(res);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">assertTrue(<span class="string">"Result was empty"</span>, result.length() &gt; <span class="number">0</span>);</div></pre></td></tr></table></figure>
<h2 id="当所有的阶段都完成后创建一个阶段"><a href="#当所有的阶段都完成后创建一个阶段" class="headerlink" title="当所有的阶段都完成后创建一个阶段"></a>当所有的阶段都完成后创建一个阶段</h2><p><code>java.util.concurrent.CompletableFuture#allOf</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List messages = Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</div><div class="line">List&lt;CompletableFuture&gt; futures = messages.stream()</div><div class="line">        .map(msg -&gt; CompletableFuture.completedFuture(msg).thenApply(s -&gt; delayedUpperCase(s)))</div><div class="line">        .collect(Collectors.toList());</div><div class="line">CompletableFuture.allOf(futures.toArray(<span class="keyword">new</span> CompletableFuture[futures.size()])).whenComplete((v, th) -&gt; &#123;</div><div class="line">    futures.forEach(cf -&gt; assertTrue(isUpperCase(cf.getNow(<span class="keyword">null</span>))));</div><div class="line">    result.append(<span class="string">"done"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="solutions"><a href="#solutions" class="headerlink" title="solutions"></a>solutions</h1><h2 id="jvm-crash"><a href="#jvm-crash" class="headerlink" title="jvm crash"></a>jvm crash</h2><p><code>jdk1.8.0_20</code></p>
<p>pinpoint: the agent 1.6.2 crash for tomcat and elasticsearch or other jvm app </p>
<a href="https://bugs.openjdk.java.net/browse/JDK-8097231" title="JDK-8097231" target="_blank" rel="external">JDK-8097231</a>
<h2 id="java-Docker化部署GC变长"><a href="#java-Docker化部署GC变长" class="headerlink" title="java Docker化部署GC变长"></a>java Docker化部署GC变长</h2><p>docker中jvm获取到宿主机 cpu核数，gc线程数计算错误</p>
<p><a href="https://juejin.im/post/5b63ff20e51d4519946020b1" target="_blank" rel="external">https://juejin.im/post/5b63ff20e51d4519946020b1</a></p>
<blockquote>
<p>在Java SE 8u131以上的版本后，已经可以正确识别Docker设定的CPU资源限制，不用再显式设定ParallelGCThreads和CICompilerCount，而内存方面的识别还需要以下参数：-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap</p>
</blockquote>
<p><a href="https://blogs.oracle.com/java-platform-group/java-se-support-for-docker-cpu-and-memory-limits" target="_blank" rel="external">https://blogs.oracle.com/java-platform-group/java-se-support-for-docker-cpu-and-memory-limits</a></p>
<p>Java 8u131及以上版本开始支持了Docker的cpu和memory限制<br><a href="https://juejin.im/post/5ac226aaf265da237e09e4dc" target="_blank" rel="external">https://juejin.im/post/5ac226aaf265da237e09e4dc</a></p>
<h2 id="ConcurrentHashSet"><a href="#ConcurrentHashSet" class="headerlink" title="ConcurrentHashSet"></a>ConcurrentHashSet</h2><p>you produce a concurrent hash set backed by a concurrent hash map, by using Collections.newSetFromMap(map)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set&lt;Long&gt; codes = Collections.newSetFromMap(<span class="keyword">new</span> ConcurrentHashMap&lt;&gt;());</div></pre></td></tr></table></figure>
<a href="https://stackoverflow.com/questions/6992608/why-there-is-no-concurrenthashset-against-concurrenthashmap" title="why-there-is-no-concurrenthashset-against-concurrenthashmap" target="_blank" rel="external">why-there-is-no-concurrenthashset-against-concurrenthashmap</a>]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JQuery Note]]></title>
      <url>http://xiaozhuang.github.io/2016/12/21/js-jquery-note/</url>
      <content type="html"><![CDATA[<p>jQuery is a fast, small, and feature-rich JavaScript library.<br><a id="more"></a></p>
<h1 id="查看JQuery版本"><a href="#查看JQuery版本" class="headerlink" title="查看JQuery版本"></a>查看JQuery版本</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.fn.jquery</div></pre></td></tr></table></figure>
<h1 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h1><p>自 jQuery 版本 1.7 起，on() 方法是 bind()、live() 和 delegate() 方法的新的替代品。</p>
<p>移除事件处理程序，使用 off() 方法。<br>添加只运行一次的事件，使用 one() 方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"p"</span>).on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="string">"The paragraph was clicked."</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="全局时间绑定与触发"><a href="#全局时间绑定与触发" class="headerlink" title="全局时间绑定与触发"></a>全局时间绑定与触发</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).on(<span class="string">'show.uk.slideset'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'show.uk.slideset trigger'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="built_in">document</span>).trigger(<span class="string">'show.uk.slideset'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//参数传递</span></div><div class="line">$(<span class="built_in">document</span>).on(<span class="string">'show.uk.slideset'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event,data</span>)</span>&#123;</div><div class="line">  alert(<span class="built_in">JSON</span>.stringify(data));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="built_in">document</span>).trigger(<span class="string">'show.uk.slideset'</span>,&#123;<span class="string">'name'</span>:<span class="string">'s'</span>&#125;);</div></pre></td></tr></table></figure>
<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="序号选择"><a href="#序号选择" class="headerlink" title="序号选择"></a>序号选择</h2><p>:eq() ,index 值从 0 开始</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 选择第二个p元素</span></div><div class="line">$(<span class="string">"p:eq(1)"</span>)；</div></pre></td></tr></table></figure>
<h2 id="同辈"><a href="#同辈" class="headerlink" title="同辈"></a>同辈</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"p"</span>).siblings(<span class="string">".selected"</span>)；</div></pre></td></tr></table></figure>
<h2 id="绑定多个组件"><a href="#绑定多个组件" class="headerlink" title="绑定多个组件"></a>绑定多个组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#isDelete, #showSource'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#onQuery'</span>).click();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).keydown(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(event.which == <span class="number">13</span>)&#123;</div><div class="line">   	alert(<span class="string">'Enter Pressed'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">"#state"</span>).keydown(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(event.keyCode == <span class="string">'13'</span>)&#123;</div><div class="line">        $(<span class="string">'#onQuery'</span>).click();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="proxy-function-context"><a href="#proxy-function-context" class="headerlink" title="$.proxy(function, context)"></a>$.proxy(function, context)</h1><p>接受一个函数，然后返回一个新函数，并且这个新函数始终保持了特定的上下文语境</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="number">1.4</span> --&gt;</div><div class="line">&lt;!-- context:函数的上下文语境(this)会被设置成这个 object 对象。 --&gt;</div><div class="line"></div><div class="line">$.proxy(fun, context)</div><div class="line"></div><div class="line">&lt;!-- name:将要改变上下文语境的函数名(这个函数必须是前一个参数 context 对象的属性) --&gt;</div><div class="line">$.proxy(context, name)</div><div class="line"></div><div class="line">&lt;!-- 1.6 --&gt;</div><div class="line">&lt;!-- additionalArguments:任何数目的参数传递给function参数的函数引用 --&gt;</div><div class="line">$.proxy( fun, context [, dditionalArguments])</div><div class="line"></div><div class="line">$.proxy( context, name [, additionalArguments ] )；</div></pre></td></tr></table></figure>
<h1 id="extend"><a href="#extend" class="headerlink" title="$.extend()"></a>$.extend()</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jQuery.extend( target [, object1 ] [, objectN ] )；</div></pre></td></tr></table></figure>
<h1 id="选择器-1"><a href="#选择器-1" class="headerlink" title="选择器"></a>选择器</h1><h2 id="取得匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。"><a href="#取得匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。" class="headerlink" title="取得匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。"></a>取得匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- $.next([selector]) --&gt;</div><div class="line">$(<span class="string">'li.third-item'</span>).next().css(<span class="string">'background-color'</span>, <span class="string">'red'</span>);</div><div class="line"></div><div class="line">$(<span class="string">'li.third-item'</span>).next(<span class="string">':eq(0)'</span>).css(<span class="string">'background-color'</span>, <span class="string">'red'</span>);</div></pre></td></tr></table></figure>
<h2 id="获取匹配元素集合中第一个元素。"><a href="#获取匹配元素集合中第一个元素。" class="headerlink" title="获取匹配元素集合中第一个元素。"></a>获取匹配元素集合中第一个元素。</h2><p><code>$.first()</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>list item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>list item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>list item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>list item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>list item 5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'li'</span>).first().css(<span class="string">'background-color'</span>, <span class="string">'red'</span>);</div><div class="line">$(<span class="string">'li'</span>).filter(<span class="string">":gt(0)"</span>);</div></pre></td></tr></table></figure>
<h2 id="jquery-select-element-from-string"><a href="#jquery-select-element-from-string" class="headerlink" title="jquery select element from string"></a>jquery select element from string</h2><h2 id="获取同辈元素"><a href="#获取同辈元素" class="headerlink" title="获取同辈元素"></a>获取同辈元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">siblings([selector]);</div></pre></td></tr></table></figure>
<h2 id="closest"><a href="#closest" class="headerlink" title="closest()"></a>closest()</h2><p>closest() 方法获得匹配选择器的第一个祖先元素，从当前元素开始沿 DOM 树向上</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).bind(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>) </span>&#123;</div><div class="line">	$(e.target).closest(<span class="string">"li"</span>).toggleClass(<span class="string">"hilight"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="delegate"><a href="#delegate" class="headerlink" title="delegate()"></a>delegate()</h2><p>.delegate是另一种绑定事件的方式。它将事件处理函数绑定在指定的根元素上， 由于事件会冒泡，它用来处理指定的子元素上的事件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#root'</span>).delegate(<span class="string">'a'</span>, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'clicked'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.avatarMaskWinnerClassName'</span>).fadeOut();</div><div class="line">$(<span class="string">'.avatarMaskWinnerClassName'</span>).fadeIn();</div><div class="line"></div><div class="line">$(<span class="string">"#image"</span>).stop().animate(&#123;<span class="attr">opacity</span>: <span class="number">0</span>&#125;,<span class="number">1000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).css(&#123;<span class="string">'background-image'</span>: <span class="string">"url('/images/alt_image.png')"</span>&#125;)</div><div class="line">            .animate(&#123;<span class="attr">opacity</span>: <span class="number">1</span>&#125;,&#123;<span class="attr">duration</span>:<span class="number">1000</span>&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).css(<span class="string">"backgroundImage"</span>,<span class="string">"url(imgs/right.png)"</span>);</div></pre></td></tr></table></figure>
<h1 id="url参数拼接"><a href="#url参数拼接" class="headerlink" title="url参数拼接"></a>url参数拼接</h1><p>$.param()</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> urlparam = &#123;</div><div class="line">  <span class="attr">param1</span>:<span class="string">"param1"</span>,</div><div class="line">  <span class="attr">param2</span>:<span class="string">"param2"</span></div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log($.param(urlparam));</div></pre></td></tr></table></figure>
<h1 id="按键监听"><a href="#按键监听" class="headerlink" title="按键监听"></a>按键监听</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"input"</span>).keydown(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">"input"</span>).css(<span class="string">"background-color"</span>,<span class="string">"#FFFFCC"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">"input"</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">"input"</span>).css(<span class="string">"background-color"</span>,<span class="string">"#D6D6FF"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="获取radio-value"><a href="#获取radio-value" class="headerlink" title="获取radio value"></a>获取radio value</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">":radio[name='repairType']:checked"</span>).val();</div></pre></td></tr></table></figure>
<h1 id="插件开发"><a href="#插件开发" class="headerlink" title="插件开发"></a>插件开发</h1><h2 id="获取当前tag"><a href="#获取当前tag" class="headerlink" title="获取当前tag"></a>获取当前tag</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jQuery.fn.tagName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.prop(<span class="string">"tagName"</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJ IDEA使用笔记]]></title>
      <url>http://xiaozhuang.github.io/2016/12/10/intellij-idea/</url>
      <content type="html"><![CDATA[<p>IDEA  全称 IntelliJ IDEA，是java语言开发的集成环境，IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、各类版本工具(git、svn、github等)、JUnit、CVS整合、代码分析、 创新的GUI设计等方面的功能可以说是超常的。<br><a id="more"></a></p>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><ul>
<li>Alt + Insert    生成getter和setter</li>
<li>Ctrl + O    覆盖基类方法</li>
<li>Ctrl + Alt + O            移除未使用引用</li>
</ul>
<ul>
<li>Alt + Enter    快速修正，创建接口实现类</li>
</ul>
<ul>
<li>Ctrl + Shift + U    大小写转换</li>
<li>Ctrl + Shift + Alt + L    格式化代码</li>
</ul>
<ul>
<li>Ctrl + Space    基本的代码提示</li>
<li>Ctrl + Shift + Space    智能提示</li>
</ul>
<ul>
<li>Ctrl + Shift + Enter    <code>自动补全末尾的字符</code></li>
<li>Shift + Enter    光标换行</li>
</ul>
<ul>
<li>Ctrl + N            快速打开类</li>
<li>Ctrl + Shift + N            快速打开文件</li>
<li>Ctrl + Shift + Alt + N    快速打开方法</li>
<li>Ctrl + H                    打开类继承关系    </li>
<li>Ctrl + Alt + H   查找方法使用</li>
<li><p>Shift + Shift 快速查找</p>
</li>
<li><p>Ctrl + Alt + T    选中代码，添加try catch</p>
</li>
<li>Ctrl + Alt + L    格式化代码</li>
</ul>
<ul>
<li>Ctrl + Shift + T    创建单元测试</li>
<li>Ctrl + Shift + F10    测试当前方法</li>
</ul>
<ul>
<li><p>Ctrl+F12 显示当前文件的结构</p>
</li>
<li><p>Shift + Esc 隐藏项目导航</p>
</li>
<li><p>Alt + Esc 显示项目导航</p>
</li>
<li><p>Ctrl + D 复制当前行</p>
</li>
<li><p>Ctrl + Y 删除当前行</p>
</li>
<li><p>Ctrl + E 最近的文件</p>
</li>
<li><p>Ctrl + Alt 点击类方法，打开方法实现</p>
</li>
</ul>
<ul>
<li><p>Ctrl + Shift + A  查找快捷键</p>
</li>
<li><p>Alt + 数字  打开侧边栏</p>
</li>
<li>Alt + Shift + [ 项目切换</li>
<li></li>
<li><p>F11        添加书签</p>
</li>
<li><p>Shift + F11        查看书签</p>
</li>
<li><p>Alt + Shift + F   添加收藏</p>
</li>
<li><p>Ctrl+Alt+S   插件启停</p>
</li>
<li><p>Ctrl + Shift + Alt + J 编辑相同内容</p>
</li>
<li><p>Alt + Insert 在测试类名上执行，添加测试方法</p>
</li>
<li><p>sout –&gt;  System.out.println();</p>
</li>
<li>soutp –&gt;  System.out.println(“”);</li>
<li>soutv –&gt;  System.out.println(“变量名 = “ + 变量);</li>
<li>soutm –&gt;  System.out.println(“当前类名.当前方法”);</li>
<li>psvm –&gt;  public static void main(String[] args) {}</li>
</ul>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><ul>
<li>F7 单步进入</li>
<li>F8 下一步yi</li>
<li>Shift + F8 跳至下一个断点</li>
</ul>
<h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><ul>
<li>Shift + F6  重命名</li>
<li><p>Ctrl + F6 方法重构</p>
</li>
<li><p>Ctrl + Shift + Alt + T    重构</p>
</li>
<li>Ctrl + Alt + V    提取变量</li>
<li>Ctrl + Alt + M    方法提取</li>
</ul>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>右键–&gt;git–&gt;annotate  idea中查看java文件修改历史</p>
<h2 id="智能提示"><a href="#智能提示" class="headerlink" title="智能提示"></a>智能提示</h2><h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><p>常用的有fori/sout/psvm+Tab即可生成循环、System.out、main方法等boilerplate样板代码<br>用Ctrl+J可以查看所有模板</p>
<p>后缀自动补全功能(Postfix Completion)，比模板生成更加灵活和强大。<br>for(User user : users)  –&gt;  user.for + Tab<br>Date birthday = user.getBirthday();   –&gt;  user.getBirthday().var + Tab<br>user.nn –&gt; if(user != null)</p>
<h1 id="configure-Spring-facet-in-IntelliJ-IDEA"><a href="#configure-Spring-facet-in-IntelliJ-IDEA" class="headerlink" title="configure Spring facet in IntelliJ IDEA"></a>configure Spring facet in IntelliJ IDEA</h1><p>Go to File/Project Structure/Modules, click the green plus icon, select Spring from the dropdown and select your module in the next dialog.<br>Then click the green plus in the right pane, click plus and select your Spring configuration files and classes and click OK.</p>
<h1 id="取消重启时从新打开项目"><a href="#取消重启时从新打开项目" class="headerlink" title="取消重启时从新打开项目"></a>取消重启时从新打开项目</h1><p>File-&gt;settings-&gt;system Settings-&gt; Reopen last project on startup  取消勾选</p>
<h1 id="Tomcat-VM-options"><a href="#Tomcat-VM-options" class="headerlink" title="Tomcat VM options"></a>Tomcat VM options</h1><p>-Xms512m -Xmx1024m -XX:PermSize=256M -XX:MaxPermSize=512M -Dfile.encoding=UTF-8</p>
<p>-Xmx2048m -Xms2048m -Xmn512m -XX:MaxPermSize=512m</p>
<h1 id="idea-把一个add到git的文件去掉"><a href="#idea-把一个add到git的文件去掉" class="headerlink" title="idea 把一个add到git的文件去掉"></a>idea 把一个add到git的文件去掉</h1><p>Git -&gt; Repository -&gt; Reset HEAD…</p>
<h1 id="idea-Override-is-not-allowed-when-implementing-interface-method"><a href="#idea-Override-is-not-allowed-when-implementing-interface-method" class="headerlink" title="idea @Override is not allowed when implementing interface method"></a>idea @Override is not allowed when implementing interface method</h1><ul>
<li><p>在project/module上，右键选择菜单“Open Module Settings” ;</p>
</li>
<li><p>选择Modules，修改“Language Level” 为 “8-Lambdas,……”;</p>
</li>
<li><p>选择Project， 修改“Project language level” 为 “SDK default”。</p>
</li>
</ul>
<h1 id="JDK配置"><a href="#JDK配置" class="headerlink" title="JDK配置"></a>JDK配置</h1><p>File –&gt;Project Structure -&gt; sdks</p>
<h1 id="idea乱码"><a href="#idea乱码" class="headerlink" title="idea乱码"></a>idea乱码</h1><p>Settings → File Encoding → Project Encoding → IDE Encoding.</p>
<h1 id="IntelliJ-IDEA-Tomcat-Debug启动非常慢，系统运行非常慢"><a href="#IntelliJ-IDEA-Tomcat-Debug启动非常慢，系统运行非常慢" class="headerlink" title="IntelliJ IDEA Tomcat Debug启动非常慢，系统运行非常慢"></a>IntelliJ IDEA Tomcat Debug启动非常慢，系统运行非常慢</h1><p>看看你在debug的时候是否在方法上加了断点，如果在方法上加了断点，那么运行时非常慢。</p>
<h1 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h1><p>添加remote tomcat<br>远程服务IP，端口8086</p>
<p>Sartup/Connection -&gt; Debug<br>-agentlib:jdwp=transport=dt_socket,address=8086,suspend=n,server=y</p>
<p>服务端：JAVA_OPTS中添加<br>-agentlib:jdwp=transport=dt_socket,address=8086,suspend=n,server=y</p>
<h1 id="maven本地jar包在idea中dependencies总是有红线解决办法"><a href="#maven本地jar包在idea中dependencies总是有红线解决办法" class="headerlink" title="maven本地jar包在idea中dependencies总是有红线解决办法"></a>maven本地jar包在idea中dependencies总是有红线解决办法</h1><p>对于有波浪线的dependency，将其从pom中删除，保存后，再撤销回来，然后reimport<br>就ok了</p>
<h1 id="Idea编译无法输出profile资源文件问题"><a href="#Idea编译无法输出profile资源文件问题" class="headerlink" title="Idea编译无法输出profile资源文件问题"></a>Idea编译无法输出profile资源文件问题</h1><p>由于idea使用的编译器是Javac（在settings—Java Compiler里配置）</p>
<h1 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h1><h2 id="比较两个分支"><a href="#比较两个分支" class="headerlink" title="比较两个分支"></a>比较两个分支</h2><p>选择分支与当前分支比较</p>
<p>右键项目 -&gt; Git -&gt; Compare with Branche</p>
<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><h2 id="Live-Template"><a href="#Live-Template" class="headerlink" title="Live Template"></a>Live Template</h2><p>File-&gt;Settings-&gt;Editor-&gt;Live Template</p>
<p><a href="https://www.jetbrains.com/help/phpstorm/2016.1/edit-template-variables-dialog.html" target="_blank" rel="external">https://www.jetbrains.com/help/phpstorm/2016.1/edit-template-variables-dialog.html</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.添加模板</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * <span class="doctag">@Author</span> wangdianzhuang</div><div class="line"> * <span class="doctag">@Date</span> : $CREAT_DATE$</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// 2.设置模板中占位符匹配的变量(Edit variables)</span></div><div class="line"><span class="comment">// $CREAT_DATE$</span></div><div class="line"><span class="comment">// date("yyyy-MM-dd HH:mm:ss")</span></div><div class="line"></div><div class="line"><span class="comment">// 3.设置模板生效范围</span></div></pre></td></tr></table></figure>
<h2 id="File-and-Code-Templates"><a href="#File-and-Code-Templates" class="headerlink" title="File and Code Templates"></a>File and Code Templates</h2><p><code>新文件模板</code></p>
<p>Settings -&gt; Editor -&gt;  File and Code Templates</p>
<h2 id="重建索引"><a href="#重建索引" class="headerlink" title="重建索引"></a>重建索引</h2><p>File -&gt; Invalidate caches…</p>
<h2 id="idea-maven自动下载源码和文档"><a href="#idea-maven自动下载源码和文档" class="headerlink" title="idea maven自动下载源码和文档"></a>idea maven自动下载源码和文档</h2><p>File =&gt; Setting =&gt; Build, Execution, Deployment =&gt; Build Tools =&gt; Maven =&gt; Importing</p>
<p>然后勾选自动下载 Sources，Documentation即可</p>
<h2 id="修改idea默认通用"><a href="#修改idea默认通用" class="headerlink" title="修改idea默认通用"></a>修改idea默认通用</h2><p>File -&gt; Other settings -&gt; default settings</p>
<h2 id="修改控制台缓冲大小"><a href="#修改控制台缓冲大小" class="headerlink" title="修改控制台缓冲大小"></a>修改控制台缓冲大小</h2><p>Settings→Editor→General→Console</p>
<h1 id="默认JDK"><a href="#默认JDK" class="headerlink" title="默认JDK"></a>默认JDK</h1><p>File -&gt; other settins -&gt; Default Project Structrue -&gt; Project</p>
<h2 id="修改终端为git-bash"><a href="#修改终端为git-bash" class="headerlink" title="修改终端为git bash"></a>修改终端为git bash</h2><p>File -&gt; Settings -&gt; Tools -&gt; Terminal</p>
<p>shell path 为”C:\Program Files (x86)\Git\bin\sh.exe” –login -i</p>
<h2 id="修改日志字体"><a href="#修改日志字体" class="headerlink" title="修改日志字体"></a>修改日志字体</h2><p>File -&gt; Settings -&gt; Editor -&gt; Colors &amp; Fonts -&gt; Console Font.</p>
<p>字号：13 字体：Consolas</p>
<h2 id="Intellij-IDEA-自动生成-serialVersionUID"><a href="#Intellij-IDEA-自动生成-serialVersionUID" class="headerlink" title="Intellij IDEA 自动生成 serialVersionUID"></a>Intellij IDEA 自动生成 serialVersionUID</h2><p>启用 校验 Serializable 校验</p>
<p>Setting-&gt;Inspections-&gt;Serialization issues-&gt;Serializable class without ’serialVersionUID’<br>选上以后，在你的class中：Alt+Enter就会提示自动创建serialVersionUID了。</p>
<p>默认配置<br>Other Settings -&gt; Settings for New Projects-&gt;Serialization issues-&gt;Serializable class without ’serialVersionUID’ </p>
<h2 id="IDEA更新快照"><a href="#IDEA更新快照" class="headerlink" title="IDEA更新快照"></a>IDEA更新快照</h2><p>Settings -&gt; Maven -&gt; Always update snapshots</p>
<h2 id="修改idea自动添加import时使用import"><a href="#修改idea自动添加import时使用import" class="headerlink" title="修改idea自动添加import时使用import*"></a>修改idea自动添加import时使用import*</h2><p>settings -&gt; Code Style -&gt; Java -&gt; Imports<br>class count to use import with ‘<em>‘      设置500<br>Names count to use static import with ‘</em>‘   设置500</p>
<h2 id="Markdown插件"><a href="#Markdown插件" class="headerlink" title="Markdown插件"></a>Markdown插件</h2><p>Markdown support</p>
<h2 id="BashSupport"><a href="#BashSupport" class="headerlink" title="BashSupport"></a>BashSupport</h2><p>bash高亮</p>
<h2 id="circular-dependency"><a href="#circular-dependency" class="headerlink" title="circular dependency"></a>circular dependency</h2><p>Error:Cannot build artifact ‘jsfcopy-web:war exploded’ because it is included into a circular dependency (artifact ‘jsfcopy-web:war exploded’, artifact ‘jsfcopy-service:war exploded’)</p>
<p>project structure -&gt; artifacts<br>移除非web项目 jsfcopy-service</p>
<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><h2 id="active-profile"><a href="#active-profile" class="headerlink" title="active profile"></a>active profile</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># VM options</span></div><div class="line">-Dspring.profiles.active=develop</div></pre></td></tr></table></figure>
<h1 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决"></a>错误解决</h1><h2 id="Unable-to-open-debugger-port"><a href="#Unable-to-open-debugger-port" class="headerlink" title="Unable to open debugger port"></a>Unable to open debugger port</h2><p>删除这个 Tomcat 配置，让 Intellij IDEA 自动找debug新的端口<br>查看debug端口，tomcat配置 Startup/Connection -&gt; Debug</p>
<h1 id="显示侧边栏"><a href="#显示侧边栏" class="headerlink" title="显示侧边栏"></a>显示侧边栏</h1><p>view -&gt; tool Buttons</p>
<h1 id="Maven-Projects模块灰色"><a href="#Maven-Projects模块灰色" class="headerlink" title="Maven Projects模块灰色"></a>Maven Projects模块灰色</h1><p>在idea中maven的setting中找到ignored files，取消被忽略的模块</p>
<h1 id="maven项目不包含在root-pom中模块加载"><a href="#maven项目不包含在root-pom中模块加载" class="headerlink" title="maven项目不包含在root pom中模块加载"></a>maven项目不包含在root pom中模块加载</h1><p>maven工程中不包含在root pom modules配置中的模块，idea不自动加载依赖<br>idea Maven面板中也没有该模块，也就不能执行打包</p>
<p>解决方式:<br>    mavan面板中，点击“加好” 选择该模块pom.xml</p>
<h1 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h1><p>file&gt;settings&gt;Lauguages &amp; Frameworks&gt;javascript<br>ECMAScript 6 </p>
<h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><h2 id="局部变量下划线"><a href="#局部变量下划线" class="headerlink" title="局部变量下划线"></a>局部变量下划线</h2><p>已<code>重新分配</code>的局部变量和参数现在加下划线。</p>
<h2 id="定制Toolbars"><a href="#定制Toolbars" class="headerlink" title="定制Toolbars"></a>定制Toolbars</h2><p>Open Settings/Preferences dialog, and click Menus and Toolbars.</p>
<h2 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h2><h3 id="idea-Apply-a-commit-to-another-branch"><a href="#idea-Apply-a-commit-to-another-branch" class="headerlink" title="idea Apply a commit to another branch"></a>idea Apply a commit to another branch</h3><p>从其他分支获取commit</p>
<ol>
<li>切换至target分支</li>
<li>Version Control -&gt; Log 查找commit</li>
<li>点击Cherry-pick，对应commit内容将被添加至changelist</li>
<li>提交</li>
</ol>
<h3 id="Warning-Kotlin-Classpath-entry-points-to-a-non-existent-location"><a href="#Warning-Kotlin-Classpath-entry-points-to-a-non-existent-location" class="headerlink" title="Warning:Kotlin: Classpath entry points to a non-existent location"></a>Warning:Kotlin: Classpath entry points to a non-existent location</h3><p>jdk 删除endorsed下jar包后，项目编译warning</p>
<h2 id="idea-cannot-resolve-symbol"><a href="#idea-cannot-resolve-symbol" class="headerlink" title="idea cannot resolve symbol"></a>idea cannot resolve symbol</h2><p>“File” -&gt; “Invalidate Caches / Restart”</p>
<h2 id="Command-line-is-too-long"><a href="#Command-line-is-too-long" class="headerlink" title="Command line is too long"></a>Command line is too long</h2><p><code>运行单元测试报错</code><br>JAR manifest -java -cp classpath.jar classname[args]</p>
<h2 id="继承关系图"><a href="#继承关系图" class="headerlink" title="继承关系图"></a>继承关系图</h2><p>Ctrl + H 查看继承关系<br>Ctrl + Sheft + Alt + U 查看继承关系图（或者，继承关系右键，show Diagram）</p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> IDE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Guava Note]]></title>
      <url>http://xiaozhuang.github.io/2016/11/20/guava-note/</url>
      <content type="html"><![CDATA[<p>Guava工程包含了若干被Google的 Java项目广泛依赖 的核心库，例如：集合 [collections] 、缓存 [caching] 、原生类型支持 [primitives support] 、并发库 [concurrency libraries] 、通用注解 [common annotations] 、字符串处理 [string processing] 、I/O 等等</p>
<a id="more"></a>
<h1 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h1><p>Guava用Optional<t>表示可能为null的T类型引用。</t></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用Optional的意义</span></div><div class="line"><span class="comment">// Optional迫使积极思考引用缺失的情况</span></div><div class="line"></div><div class="line"><span class="comment">// 创建</span></div><div class="line">Person person = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="comment">// 创建引用缺失的Optional实例</span></div><div class="line">Optional.absent();</div><div class="line"></div><div class="line">Optional&lt;Person&gt; optional = Optional.fromNullable(person);</div><div class="line">Optional&lt;Person&gt; optionalNotNull = Optional.of(person);</div><div class="line"></div><div class="line"><span class="comment">// 如果Optional包含非null的引用（引用存在），返回true</span></div><div class="line"><span class="keyword">boolean</span> present = optional.isPresent();</div></pre></td></tr></table></figure>
<h1 id="Objects方法"><a href="#Objects方法" class="headerlink" title="Objects方法"></a>Objects方法</h1><h2 id="Objects-equals"><a href="#Objects-equals" class="headerlink" title="Objects.equals"></a>Objects.equals</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Guava</span></div><div class="line">Objects.equal(<span class="string">"a"</span>, <span class="string">"a"</span>); <span class="comment">// returns true</span></div><div class="line">Objects.equal(<span class="keyword">null</span>, <span class="string">"a"</span>); <span class="comment">// returns false</span></div><div class="line">Objects.equal(<span class="string">"a"</span>, <span class="keyword">null</span>); <span class="comment">// returns false</span></div><div class="line">Objects.equal(<span class="keyword">null</span>, <span class="keyword">null</span>); <span class="comment">// returns true</span></div><div class="line"></div><div class="line"><span class="comment">// DK7引入的Objects类提供了一样的方 Objects.equals</span></div></pre></td></tr></table></figure>
<h2 id="Objects-hashCode"><a href="#Objects-hashCode" class="headerlink" title="Objects.hashCode"></a>Objects.hashCode</h2><p>用所有字段作散列[hash]</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Objects.hashCode(field1, field2, fieldn)</div><div class="line"><span class="comment">// DK7引入的Objects类提供了一样的方法Objects.hash(Object...)</span></div></pre></td></tr></table></figure>
<h2 id="ComparisonChain"><a href="#ComparisonChain" class="headerlink" title="ComparisonChain"></a>ComparisonChain</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> ComparisonChain.start()</div><div class="line">    <span class="comment">// Object 类型，参数非空； 否则使用 &lt;T&gt; ComparisonChain compare(@Nullable T left, @Nullable T right, Comparator&lt;T&gt; comparator)</span></div><div class="line">    <span class="comment">// org.apache.commons.lang3.ObjectUtils#compare(T, T, boolean)</span></div><div class="line">    .compare(<span class="keyword">this</span>.aString, that.aString)</div><div class="line">    .compare(<span class="keyword">this</span>.anInt, that.anInt)</div><div class="line">    .compare(<span class="keyword">this</span>.anEnum, that.anEnum, Ordering.natural().nullsLast())</div><div class="line">    .result();</div></pre></td></tr></table></figure>
<h1 id="Preconditions"><a href="#Preconditions" class="headerlink" title="Preconditions"></a>Preconditions</h1><p>前置条件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 参数校验</span></div><div class="line"><span class="comment">// IllegalArgumentException</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkArgument</span><span class="params">(<span class="keyword">boolean</span> expression)</span></span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkArgument</span><span class="params">(<span class="keyword">boolean</span> expression, @Nullable Object errorMessage)</span></div><div class="line"></div><div class="line"><span class="comment">// %s 模板占位符</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkArgument</span><span class="params">(</span></div><div class="line">      <span class="keyword">boolean</span> expression,</div><div class="line">      @Nullable String errorMessageTemplate,</div><div class="line">      @Nullable Object... errorMessageArgs)</div><div class="line"></div><div class="line"><span class="comment">// 状态校验</span></div><div class="line"><span class="comment">// IllegalStateException</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkState</span><span class="params">(<span class="keyword">boolean</span> expression)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkState</span><span class="params">(<span class="keyword">boolean</span> expression, @Nullable Object errorMessage)</span></div><div class="line"></div><div class="line"><span class="comment">// 非空校验</span></div><div class="line"><span class="comment">// NullPointerException</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title">checkNotNull</span><span class="params">(T reference)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title">checkNotNull</span><span class="params">(T reference, @Nullable Object errorMessage)</span></div><div class="line"></div><div class="line"><span class="comment">// index 及 position校验</span></div><div class="line"><span class="comment">// IndexOutOfBoundsException</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">checkElementIndex</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> size)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">checkElementIndex</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> size, @Nullable String desc)</span></div><div class="line"></div><div class="line"><span class="comment">// IndexOutOfBoundsException</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">checkPositionIndex</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> size)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">checkPositionIndex</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> size, @Nullable String desc)</span></div><div class="line"></div><div class="line"><span class="comment">// IndexOutOfBoundsException</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkPositionIndexes</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> size)</span></div></pre></td></tr></table></figure>
<h1 id="令牌桶的流控RateLimiter"><a href="#令牌桶的流控RateLimiter" class="headerlink" title="令牌桶的流控RateLimiter"></a>令牌桶的流控RateLimiter</h1><p>RateLimiter经常用于限制对一些物理资源或者逻辑资源的访问速率</p>
<p>RateLimiter 并不提供公平性的保证</p>
<p>RateLimiter 并未通过线程生成令牌，而是acquire时计算</p>
<h2 id="RateLimiter-API"><a href="#RateLimiter-API" class="headerlink" title="RateLimiter API"></a>RateLimiter API</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 根据指定的稳定吞吐率创建RateLimiter; 参数 permitsPerSecond QPS</span></div><div class="line"><span class="keyword">final</span> RateLimiter rateLimiter = RateLimiter.create(<span class="number">5000.0</span>); </div><div class="line"><span class="comment">// 预热时间内, 每秒分配的许可数会平稳地增长</span></div><div class="line"><span class="keyword">final</span> RateLimiter rateLimiterGrowing = RateLimiter.create(<span class="number">10</span>, <span class="number">1</span>, TimeUnit.SECONDS);</div><div class="line"></div><div class="line"><span class="comment">// 从RateLimiter获取一个许可，该方法会被阻塞直到获取到请求</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">acquire</span><span class="params">()</span></span></div><div class="line"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> permits)</span></div><div class="line"></div><div class="line"><span class="comment">// 非阻塞获取acquire</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">()</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> permits)</span></div><div class="line"></div><div class="line"><span class="comment">// 无法在timeout 过期之前获取得到许可数的话，那么立即返回false</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">long</span> timeout, TimeUnit unit)</span></div><div class="line"></div><div class="line"><span class="comment">// 获取速率</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> <span class="title">getRate</span><span class="params">()</span></div><div class="line"><span class="comment">// 设置速率</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setRate</span><span class="params">(<span class="keyword">double</span> permitsPerSecond)</span></div></pre></td></tr></table></figure>
<p>请求的许可数说明：<br>高开销的任务抵达一个<code>空闲</code>的RateLimiter，<br>会被马上许可，但是下一个请求会经历额外的限制;</p>
<h2 id="RateLimiter-使用说明"><a href="#RateLimiter-使用说明" class="headerlink" title="RateLimiter 使用说明"></a>RateLimiter 使用说明</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用场景</span></div><div class="line"><span class="comment">// 每秒5kb的速率处理它</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">submitPacket</span><span class="params">(<span class="keyword">byte</span>[] packet)</span> </span>&#123;</div><div class="line">    rateLimiter.acquire(packet.length);</div><div class="line">    networkService.send(packet);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意 RateLimiter acquire内部使用锁，多线程性能待确认</p>
</blockquote>
<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="不可变集合"><a href="#不可变集合" class="headerlink" title="不可变集合"></a>不可变集合</h2><p>用不变的集合进行防御性编程和性能提升。</p>
<h3 id="三种创建方式"><a href="#三种创建方式" class="headerlink" title="三种创建方式"></a>三种创建方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// of方法</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ImmutableSet&lt;String&gt; COLOR_NAMES = ImmutableSet.of(</div><div class="line">        <span class="string">"red"</span>,</div><div class="line">        <span class="string">"orange"</span>,</div><div class="line">        <span class="string">"yellow"</span>,</div><div class="line">        <span class="string">"green"</span>,</div><div class="line">        <span class="string">"blue"</span>,</div><div class="line">        <span class="string">"purple"</span>);</div><div class="line"></div><div class="line"><span class="comment">//copyOf方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    Set&lt;Bar&gt; bars;</div><div class="line">    Foo(Set&lt;Bar&gt; bars) &#123;</div><div class="line">        <span class="keyword">this</span>.bars = ImmutableSet.copyOf(bars); <span class="comment">// 防御性拷贝!</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Builder工具</span></div><div class="line">ImmutableSet&lt;Color&gt; GOOGLE_COLORS =</div><div class="line">                ImmutableSet.&lt;Color&gt;builder()</div><div class="line">                    .addAll(WEBSAFE_COLORS)</div><div class="line">                    .add(<span class="keyword">new</span> Color(<span class="number">0</span>, <span class="number">191</span>, <span class="number">255</span>))</div><div class="line">                    .build();</div></pre></td></tr></table></figure>
<h3 id="asList视图"><a href="#asList视图" class="headerlink" title="asList视图"></a>asList视图</h3><p>所有不可变集合都有一个asList()方法提供ImmutableList视图，方便用列表形式地读取集合元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ImmutableList&lt;String&gt; asList = COLORNAME.asList();</div><div class="line">System.out.println(asList.get(<span class="number">0</span>));</div></pre></td></tr></table></figure>
<h3 id="关联可变集合和不可变集合"><a href="#关联可变集合和不可变集合" class="headerlink" title="关联可变集合和不可变集合"></a>关联可变集合和不可变集合</h3><table>
<thead>
<tr>
<th>可变集合接口</th>
<th>属于JDK还是Guava</th>
<th>不可变版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>Collection</td>
<td>JDK</td>
<td>ImmutableCollection</td>
</tr>
<tr>
<td>List</td>
<td>JDK</td>
<td>ImmutableList</td>
</tr>
<tr>
<td>Set</td>
<td>JDK</td>
<td>ImmutableSet</td>
</tr>
<tr>
<td>SortedSet/NavigableSet</td>
<td>JDK</td>
<td>ImmutableSortedSet</td>
</tr>
<tr>
<td>Map</td>
<td>JDK</td>
<td>ImmutableMap</td>
</tr>
<tr>
<td>SortedMap</td>
<td>JDK</td>
<td>ImmutableSortedMap</td>
</tr>
<tr>
<td>Multiset</td>
<td>Guava</td>
<td>ImmutableMultiset</td>
</tr>
<tr>
<td>SortedMultiset</td>
<td>Guava</td>
<td>ImmutableSortedMultiset</td>
</tr>
<tr>
<td>Multimap</td>
<td>Guava</td>
<td>ImmutableMultimap</td>
</tr>
<tr>
<td>ListMultimap</td>
<td>Guava</td>
<td>ImmutableListMultimap</td>
</tr>
<tr>
<td>SetMultimap</td>
<td>Guava</td>
<td>ImmutableSetMultimap</td>
</tr>
<tr>
<td>BiMap</td>
<td>Guava</td>
<td>ImmutableBiMap</td>
</tr>
<tr>
<td>ClassToInstanceMap</td>
<td>Guava</td>
<td>ImmutableClassToInstanceMap</td>
</tr>
<tr>
<td>Table</td>
<td>Guava</td>
<td>ImmutableTable</td>
</tr>
</tbody>
</table>
<h2 id="新集合类型-Multiset"><a href="#新集合类型-Multiset" class="headerlink" title="新集合类型-Multiset"></a>新集合类型-Multiset</h2><h3 id="Multiset"><a href="#Multiset" class="headerlink" title="Multiset"></a>Multiset</h3><p>Multiset，它可以多次添加相等的元素，包含元素计数<br>HashMultiset.count的复杂度为O(1)，TreeMultiset.count的复杂度为O(log n)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt;</span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">        <span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">        result = prime * result + ((name == <span class="keyword">null</span>) ? <span class="number">0</span> : name.hashCode());</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        Person other = (Person) obj;</div><div class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (other.name != <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">"]"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person other)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(other.getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">System.out.println(<span class="string">"--- HashMultiset ---"</span>);</div><div class="line">        </div><div class="line">Multiset&lt;Person&gt; hashMultiset = HashMultiset.create();</div><div class="line"></div><div class="line">Person wangdz = <span class="keyword">new</span> Person(<span class="string">"wangdz"</span>);</div><div class="line">hashMultiset.add(wangdz);</div><div class="line"></div><div class="line">Person wangdz2 = <span class="keyword">new</span> Person(<span class="string">"wangdz"</span>);</div><div class="line">hashMultiset.add(wangdz2);</div><div class="line"></div><div class="line">Person sunday = <span class="keyword">new</span> Person(<span class="string">"sunday"</span>);</div><div class="line">hashMultiset.add(sunday);</div><div class="line"></div><div class="line"><span class="keyword">int</span> sunday_count = hashMultiset.count(sunday);</div><div class="line">System.out.println(sunday_count);</div><div class="line"></div><div class="line"><span class="keyword">int</span> wangdz_count = hashMultiset.count(wangdz);</div><div class="line">System.out.println(wangdz_count);</div><div class="line"></div><div class="line"><span class="keyword">for</span>(Person person: hashMultiset)&#123;</div><div class="line">    System.out.println(person);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//elementSet()返回所有不重复元素的Set&lt;E&gt;</span></div><div class="line">Set&lt;Person&gt; elementSet = hashMultiset.elementSet();</div><div class="line"></div><div class="line"><span class="comment">//和Map的entrySet类似，返回Set&lt;Multiset.Entry&lt;E&gt;&gt;</span></div><div class="line">Set&lt;Entry&lt;Person&gt;&gt; entrySet = hashMultiset.entrySet();</div><div class="line"><span class="keyword">for</span>(Entry&lt;Person&gt; entry : entrySet)&#123;</div><div class="line">    Person element = entry.getElement();</div><div class="line">    System.out.println(element);</div><div class="line">    <span class="keyword">int</span> element_count = entry.getCount();</div><div class="line">    System.out.println(element_count);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Multiset.addAll(Collection)可以添加Collection中的所有元素并进行计数</span></div><div class="line"></div><div class="line">System.out.println(<span class="string">"--- TreeMultiset ---"</span>);</div><div class="line"></div><div class="line">Multiset&lt;Person&gt; multiset2 = TreeMultiset.create();</div><div class="line">multiset2.add(wangdz);</div><div class="line">multiset2.add(wangdz2);</div><div class="line">multiset2.add(sunday);</div><div class="line"></div><div class="line"><span class="keyword">for</span>(Person person: hashMultiset)&#123;</div><div class="line">    System.out.println(person);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Multiset-方法"><a href="#Multiset-方法" class="headerlink" title="Multiset 方法"></a>Multiset 方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>count(E)</td>
<td>给定元素在Multiset中的计数</td>
</tr>
<tr>
<td>elementSet()</td>
<td>Multiset中不重复元素的集合，类型为Set<e></e></td>
</tr>
<tr>
<td>entrySet()</td>
<td>和Map的entrySet类似，返回Set<multiset.entry<e>&gt;，其中包含的Entry支持getElement()和getCount()方法</multiset.entry<e></td>
</tr>
<tr>
<td>add(E, int)</td>
<td>增加给定元素在Multiset中的计数</td>
</tr>
<tr>
<td>remove(E, int)</td>
<td>减少给定元素在Multiset中的计数</td>
</tr>
<tr>
<td>setCount(E, int)</td>
<td>设置给定元素在Multiset中的计数，不可以为负数</td>
</tr>
<tr>
<td>size()</td>
<td>返回集合元素的总个数（包括重复的元素）</td>
</tr>
</tbody>
</table>
<h3 id="Multiset的各种实现"><a href="#Multiset的各种实现" class="headerlink" title="Multiset的各种实现"></a>Multiset的各种实现</h3><table>
<thead>
<tr>
<th>Map</th>
<th>对应的Multiset</th>
<th>是否支持null元素</th>
</tr>
</thead>
<tbody>
<tr>
<td>HashMap</td>
<td>HashMultiset</td>
<td>是</td>
</tr>
<tr>
<td>TreeMap</td>
<td>TreeMultiset</td>
<td>是（如果comparator支持的话）</td>
</tr>
<tr>
<td>LinkedHashMap</td>
<td>LinkedHashMultiset</td>
<td>是</td>
</tr>
<tr>
<td>ConcurrentHashMap</td>
<td>ConcurrentHashMultiset</td>
<td>否</td>
</tr>
<tr>
<td>ImmutableMap</td>
<td>ImmutableMultiset</td>
<td>否</td>
</tr>
</tbody>
</table>
<h2 id="SortedMultiset"><a href="#SortedMultiset" class="headerlink" title="SortedMultiset"></a>SortedMultiset</h2><p>SortedMultiset是Multiset 接口的变种，它支持高效地获取指定范围的子集。</p>
<p>如：用 latencies.subMultiset(0,BoundType.CLOSED, 100, BoundType.OPEN).size()来统计你的站点中延迟在100毫秒以内的访问</p>
<p>TreeMultiset实现SortedMultiset接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">SortedMultiset&lt;Integer&gt; latencies = TreeMultiset.create();</div><div class="line">latencies.add(<span class="number">10</span>);</div><div class="line">latencies.add(<span class="number">90</span>);</div><div class="line">latencies.add(<span class="number">90</span>);</div><div class="line">latencies.add(<span class="number">100</span>);</div><div class="line"><span class="comment">//统计指定范围内数据，范围不止int类型，依赖compare方法</span></div><div class="line"><span class="keyword">int</span> count = latencies.subMultiset(<span class="number">0</span>,BoundType.CLOSED, <span class="number">100</span>, BoundType.OPEN).size();</div><div class="line">System.out.println(count);</div></pre></td></tr></table></figure>
<h2 id="Multimap"><a href="#Multimap" class="headerlink" title="Multimap"></a>Multimap</h2><p>Guava的 Multimap可以很容易地把一个键映射到多个值<br>ListMultimap或SetMultimap接口，它们分别把键映射到List或Set</p>
<h3 id="ListMultimap"><a href="#ListMultimap" class="headerlink" title="ListMultimap"></a>ListMultimap</h3><p><code>优化Map&lt;K, List&lt;V&gt;&gt;</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">List&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">persons.add(<span class="keyword">new</span> Person(<span class="string">"sunday"</span>));</div><div class="line">persons.add(<span class="keyword">new</span> Person(<span class="string">"wangdz"</span>));</div><div class="line"></div><div class="line">ListMultimap&lt;String,Person&gt; listMultimap = ArrayListMultimap.create();</div><div class="line">listMultimap.put(<span class="string">"person"</span>, <span class="keyword">new</span> Person(<span class="string">"person1"</span>));</div><div class="line">listMultimap.put(<span class="string">"person"</span>, <span class="keyword">new</span> Person(<span class="string">"person2"</span>));</div><div class="line"></div><div class="line"></div><div class="line">List&lt;Person&gt; list = listMultimap.get(<span class="string">"person"</span>);</div><div class="line">System.out.println(list);</div><div class="line"></div><div class="line">listMultimap.putAll(<span class="string">"me"</span>, persons);</div><div class="line">List&lt;Person&gt; list2 = listMultimap.get(<span class="string">"me"</span>);</div><div class="line">System.out.println(list2);</div></pre></td></tr></table></figure>
<h3 id="SetMultimap"><a href="#SetMultimap" class="headerlink" title="SetMultimap"></a>SetMultimap</h3><p><code>优化Map&lt;K, Set&lt;V&gt;&gt;</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Set&lt;Person&gt; persons = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">persons.add(<span class="keyword">new</span> Person(<span class="string">"sunday"</span>));</div><div class="line">persons.add(<span class="keyword">new</span> Person(<span class="string">"wangdz"</span>));</div><div class="line"></div><div class="line">SetMultimap&lt;String,Person&gt; hashMultimap = HashMultimap.create();</div><div class="line">hashMultimap.put(<span class="string">"person"</span>, <span class="keyword">new</span> Person(<span class="string">"person1"</span>));</div><div class="line">hashMultimap.put(<span class="string">"person"</span>, <span class="keyword">new</span> Person(<span class="string">"person1"</span>));</div><div class="line"></div><div class="line">Set&lt;Person&gt; set = hashMultimap.get(<span class="string">"person"</span>);</div><div class="line">System.out.println(set);</div><div class="line"></div><div class="line">hashMultimap.putAll(<span class="string">"me"</span>,persons);</div><div class="line">Set&lt;Person&gt; list2 = hashMultimap.get(<span class="string">"me"</span>);</div><div class="line">System.out.println(list2);</div></pre></td></tr></table></figure>
<h3 id="Multimap方法"><a href="#Multimap方法" class="headerlink" title="Multimap方法"></a>Multimap方法</h3><table>
<thead>
<tr>
<th>方法签名</th>
<th>描述</th>
<th>等价于</th>
</tr>
</thead>
<tbody>
<tr>
<td>put(K, V)</td>
<td>添加键到单个值的映射</td>
<td>multimap.get(key).add(value)</td>
</tr>
<tr>
<td>putAll(K, Iterable<v>)</v></td>
<td>依次添加键到多个值的映射</td>
<td>Iterables.addAll(multimap.get(key), values)</td>
</tr>
<tr>
<td>remove(K, V)</td>
<td>移除键到值的映射；如果有这样的键值并成功移除，返回true。</td>
<td>multimap.get(key).remove(value)</td>
</tr>
<tr>
<td>removeAll(K)</td>
<td>清除键对应的所有值，返回的集合包含所有之前映射到K的值，但修改这个集合就不会影响Multimap了。</td>
<td>multimap.get(key).clear()</td>
</tr>
<tr>
<td>replaceValues(K, Iterable<v>)</v></td>
<td>清除键对应的所有值，并重新把key关联到Iterable中的每个元素。返回的集合包含所有之前映射到K的值。</td>
<td>multimap.get(key).clear(); Iterables.addAll(multimap.get(key), values)</td>
</tr>
</tbody>
</table>
<h3 id="Multimap的视图"><a href="#Multimap的视图" class="headerlink" title="Multimap的视图"></a>Multimap的视图</h3><ul>
<li>asMap：<code>Multimap&lt;K, V&gt;</code>提供<code>Map&lt;K,Collection&lt;V&gt;&gt;</code>形式的视图</li>
<li>entries用<code>Collection&lt;Map.Entry&lt;K, V&gt;&gt;</code>返回Multimap中所有”键-单个值映射”——包括重复键。（对SetMultimap，返回的是Set）</li>
<li>keySet用Set表示Multimap中所有不同的键。</li>
<li>keys用Multiset表示Multimap中的所有键，每个键重复出现的次数等于它映射的值的个数。可以从这个Multiset中移除元素，但不能做添加操作；移除操作会反映到底层的Multimap。</li>
<li>values()用一个”扁平”的<code>Collection&lt;V&gt;</code>包含Multimap中的所有值。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">List&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">persons.add(<span class="keyword">new</span> Person(<span class="string">"sunday"</span>));</div><div class="line">persons.add(<span class="keyword">new</span> Person(<span class="string">"wangdz"</span>));</div><div class="line"></div><div class="line">ListMultimap&lt;String,Person&gt; listMultimap = ArrayListMultimap.create();</div><div class="line">listMultimap.put(<span class="string">"person"</span>, <span class="keyword">new</span> Person(<span class="string">"person1"</span>));</div><div class="line">listMultimap.put(<span class="string">"person"</span>, <span class="keyword">new</span> Person(<span class="string">"person1"</span>));</div><div class="line"></div><div class="line">listMultimap.putAll(<span class="string">"me"</span>, persons);</div><div class="line"></div><div class="line">System.out.println(<span class="string">"---- asMap() ----"</span>);</div><div class="line">Map&lt;String, Collection&lt;Person&gt;&gt; asMap = listMultimap.asMap();</div><div class="line"></div><div class="line">System.out.println(<span class="string">"---- entries() ----"</span>);</div><div class="line">Collection&lt;Entry&lt;String, Person&gt;&gt; entries = listMultimap.entries();</div><div class="line"><span class="keyword">for</span>(Entry&lt;String, Person&gt; entry : entries)&#123;</div><div class="line">  String key = entry.getKey();</div><div class="line">  Person value = entry.getValue();</div><div class="line">  System.out.println(<span class="string">"key:"</span>+ key + <span class="string">" value:"</span> + value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">System.out.println(<span class="string">"---- keySet() ----"</span>);</div><div class="line">Set&lt;String&gt; keySet = listMultimap.keySet();</div><div class="line"><span class="keyword">for</span>(String key : keySet)&#123;</div><div class="line">  System.out.println(<span class="string">"key:"</span>+key);</div><div class="line">&#125;</div><div class="line"></div><div class="line">System.out.println(<span class="string">"---- keys() ----"</span>);</div><div class="line">Multiset&lt;String&gt; keys = listMultimap.keys();</div><div class="line"><span class="keyword">for</span>(String key : keys)&#123;</div><div class="line">  System.out.println(<span class="string">"key:"</span> + key);</div><div class="line">&#125;</div><div class="line"></div><div class="line">System.out.println(<span class="string">"---- values() ----"</span>);</div><div class="line">Collection&lt;Person&gt; values = listMultimap.values();</div><div class="line"><span class="keyword">for</span>(Person person : values)&#123;</div><div class="line">  System.out.println(person);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>—- entries() —-<br>key:person value:Person [name=person1]<br>key:person value:Person [name=person1]<br>key:me value:Person [name=sunday]<br>key:me value:Person [name=wangdz]<br>—- keySet() —-<br>key:person<br>key:me<br>—- keys() —-<br>key:person<br>key:person<br>key:me<br>key:me<br>—- values() —-<br>Person [name=person1]<br>Person [name=person1]<br>Person [name=sunday]<br>Person [name=wangdz]</p>
</blockquote>
<h3 id="Multimap不是Map"><a href="#Multimap不是Map" class="headerlink" title="Multimap不是Map"></a>Multimap不是Map</h3><ul>
<li>Multimap.get(key)总是返回非null、但是可能空的集合</li>
<li>当且仅当有值映射到键时，Multimap.containsKey(key)才会返回true</li>
<li>Multimap.size()返回所有”键-单个值映射”的个数，而非不同键的个数。要得到不同键的个数，请改用Multimap.keySet().size()</li>
</ul>
<h3 id="Multimap的各种实现"><a href="#Multimap的各种实现" class="headerlink" title="Multimap的各种实现"></a>Multimap的各种实现</h3><table>
<thead>
<tr>
<th>实现</th>
<th>键行为类似</th>
<th>值行为类似</th>
</tr>
</thead>
<tbody>
<tr>
<td>ArrayListMultimap</td>
<td>HashMap</td>
<td>ArrayList</td>
</tr>
<tr>
<td>HashMultimap</td>
<td>HashMap</td>
<td>HashSet</td>
</tr>
<tr>
<td>LinkedListMultimap*</td>
<td>LinkedHashMap*</td>
<td>LinkedList*</td>
</tr>
<tr>
<td>LinkedHashMultimap**</td>
<td>LinkedHashMap</td>
<td>LinkedHashMap</td>
</tr>
<tr>
<td>TreeMultimap</td>
<td>TreeMap</td>
<td>TreeSet</td>
</tr>
<tr>
<td>ImmutableListMultimap</td>
<td>ImmutableMap</td>
<td>ImmutableList</td>
</tr>
<tr>
<td>ImmutableSetMultimap</td>
<td>ImmutableMap</td>
<td>ImmutableSet</td>
</tr>
</tbody>
</table>
<p>除了两个不可变形式的实现，其他所有实现都支持null键和null值<br><em>LinkedListMultimap.entries()保留了所有键和值的迭代顺序<br>*</em>LinkedHashMultimap保留了映射项的插入顺序，包括键插入的顺序，以及键映射的所有值的插入顺序<br>如果你想要更大的定制化，请用Multimaps.newMultimap(Map, Supplier<collection>)或list和 set版本，使用自定义的Collection、List或Set实现Multimap。</collection></p>
<h2 id="新集合类型-BiMap"><a href="#新集合类型-BiMap" class="headerlink" title="新集合类型-BiMap"></a>新集合类型-BiMap</h2><p>BiMap<k, v="">是双向映射Map:</k,></p>
<ul>
<li>可以用 inverse()反转BiMap<k, v="">的键值映射</k,></li>
<li>保证值是唯一的，因此 values()返回Set而不是普通的Collection</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">BiMap&lt;String, Integer&gt; userIds = HashBiMap.create();</div><div class="line">userIds.put(<span class="string">"sunday"</span>, <span class="number">17</span>);</div><div class="line"></div><div class="line">BiMap&lt;Integer, String&gt; userIdsInverse = userIds.inverse();</div><div class="line">userIdsInverse.put(<span class="number">19</span>, <span class="string">"wangdz"</span>);</div><div class="line"></div><div class="line">System.out.println(<span class="string">"---- keySet ergodic ----"</span>);</div><div class="line">Set&lt;String&gt; keySet = userIds.keySet();</div><div class="line"><span class="keyword">for</span>(String key : keySet)&#123;</div><div class="line">    System.out.println(<span class="string">"key:"</span> + key + <span class="string">"value:"</span> + userIds.get(key));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//把键映射到已经存在的值，会抛出IllegalArgumentException异常。如果对特定值，你想要强制替换它的键，请使用 BiMap.forcePut(key, value)。</span></div><div class="line">userIds.forcePut(<span class="string">"sunday"</span>, <span class="number">21</span>);</div><div class="line"></div><div class="line">System.out.println(<span class="string">"---- entrySet ergodic ----"</span>);</div><div class="line">Set&lt;Entry&lt;String, Integer&gt;&gt; entrySet = userIds.entrySet();</div><div class="line"><span class="keyword">for</span>(Entry&lt;String, Integer&gt; entry : entrySet)&#123;</div><div class="line">    System.out.println(<span class="string">"key:"</span> + entry.getKey() + <span class="string">" value:"</span> +entry.getValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>BiMap的各种实现</p>
<table>
<thead>
<tr>
<th>键–值实现</th>
<th>值–键实现</th>
<th>对应的BiMap实现</th>
</tr>
</thead>
<tbody>
<tr>
<td>HashMap</td>
<td>HashMap</td>
<td>HashBiMap</td>
</tr>
<tr>
<td>ImmutableMap</td>
<td>ImmutableMap</td>
<td>ImmutableBiMap</td>
</tr>
<tr>
<td>EnumMap</td>
<td>EnumMap</td>
<td>EnumBiMap</td>
</tr>
<tr>
<td>EnumMap</td>
<td>HashMap</td>
<td>EnumHashBiMap</td>
</tr>
</tbody>
</table>
<p>注：Maps类中还有一些诸如synchronizedBiMap的BiMap工具方法.</p>
<h2 id="新集合类型-Table"><a href="#新集合类型-Table" class="headerlink" title="新集合类型-Table"></a>新集合类型-Table</h2><p><code>Table&lt;R, C, V&gt;</code><br>Table有两个支持所有类型的键：“行”和“列”</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Table&lt;Integer, Integer, Integer&gt; matrix = HashBasedTable.create();</div><div class="line">matrix.put(<span class="number">1</span>, <span class="number">1</span>, <span class="number">11</span>);</div><div class="line">matrix.put(<span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>);</div><div class="line">matrix.put(<span class="number">1</span>, <span class="number">3</span>, <span class="number">13</span>);</div><div class="line"></div><div class="line">matrix.put(<span class="number">2</span>, <span class="number">1</span>, <span class="number">21</span>);</div><div class="line">matrix.put(<span class="number">2</span>, <span class="number">2</span>, <span class="number">22</span>);</div><div class="line">matrix.put(<span class="number">2</span>, <span class="number">3</span>, <span class="number">23</span>);</div><div class="line"></div><div class="line">Map&lt;Integer, Integer&gt; row = matrix.row(<span class="number">1</span>); <span class="comment">//第一行</span></div><div class="line">Set&lt;Integer&gt; rowkeySet = row.keySet();</div><div class="line"><span class="keyword">for</span>(Integer rowKey : rowkeySet)&#123;</div><div class="line">    System.out.println(<span class="string">"rowKey:"</span>+rowKey + <span class="string">"rowValue:"</span>+row.get(rowKey));</div><div class="line">&#125;</div><div class="line"></div><div class="line">Map&lt;Integer, Integer&gt; column = matrix.column(<span class="number">2</span>); <span class="comment">//第二列</span></div><div class="line">Set&lt;Entry&lt;Integer, Integer&gt;&gt; entrySet = column.entrySet();</div><div class="line"><span class="keyword">for</span>(Entry&lt;Integer, Integer&gt; entry : entrySet)&#123;</div><div class="line">    System.out.println(<span class="string">"columnKey:"</span> + entry.getKey() + <span class="string">"columnValue:"</span>+entry.getValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>rowKey:1rowValue:11<br>rowKey:2rowValue:12<br>rowKey:3rowValue:13<br>columnKey:1columnValue:12<br>columnKey:2columnValue:22</p>
</blockquote>
<ul>
<li>rowMap()：用<code>Map&lt;R, Map&lt;C, V&gt;&gt;</code>表现<code>Table&lt;R, C, V&gt;</code></li>
<li>rowKeySet()：返回“行”的集合Set<r></r></li>
<li><p>row(r)：用<code>Map&lt;C, V&gt;</code>返回给定”行”的所有列，对这个map进行的写操作也将写入Table中</p>
</li>
<li><p>类似的列访问方法：columnMap()、columnKeySet()、column(c)。（基于列的访问会比基于的行访问稍微低效点）</p>
</li>
<li><p>cellSet()：用元素类型为<code>Table.Cell&lt;R, C, V&gt;</code>的Set表现<code>Table&lt;R, C, V&gt;</code>。Cell类似于Map.Entry</p>
</li>
</ul>
<p>Table有如下几种实现：</p>
<table>
<thead>
<tr>
<th>类名</th>
<th>实现方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>HashBasedTable</td>
<td>本质上用<code>HashMap&lt;R, HashMap&lt;C, V&gt;&gt;</code>实现；</td>
</tr>
<tr>
<td>TreeBasedTable</td>
<td>本质上用<code>TreeMap&lt;R, TreeMap&lt;C,V&gt;&gt;</code>实现；</td>
</tr>
<tr>
<td>ImmutableTable</td>
<td>本质上用<code>ImmutableMap&lt;R, ImmutableMap&lt;C, V&gt;&gt;</code>实现；注：ImmutableTable对稀疏或密集的数据集都有优化。</td>
</tr>
<tr>
<td>ArrayTable</td>
<td>要求在构造时就指定行和列的大小，本质上由一个二维数组实现，以提升访问速度和密集Table的内存利用率。ArrayTable与其他Table的工作原理有点不同，请参见Javadoc了解详情。</td>
</tr>
</tbody>
</table>
<h2 id="新集合类型-ClassToInstanceMap"><a href="#新集合类型-ClassToInstanceMap" class="headerlink" title="新集合类型-ClassToInstanceMap"></a>新集合类型-ClassToInstanceMap</h2><p>ClassToInstanceMap是一种特殊的Map：它的键是类型，而值是符合键所指类型的对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> ClassToInstanceMap&lt;Number&gt; numberDefaults=MutableClassToInstanceMap.create();</div><div class="line">numberDefaults.putInstance(Integer.class, <span class="number">0</span>);</div><div class="line">numberDefaults.put(Long.class, <span class="number">1L</span>);</div><div class="line"></div><div class="line">System.out.println(numberDefaults.getInstance(Integer.class));</div><div class="line">System.out.println(numberDefaults.getInstance(Long.class));</div></pre></td></tr></table></figure>
<blockquote>
<p>0<br>1</p>
</blockquote>
<p>从技术上讲，ClassToInstanceMap<b>实现了Map<class<? extends="" b="">, B&gt;<br>或者换句话说，是一个映射B的子类型到对应实例的Map<br>B始终是Map所支持类型的上界——通常B就是Object</class<?></b></p>
<p>Guava提供了两种有用的ClassToInstanceMap实现:<br>MutableClassToInstanceMap和 ImmutableClassToInstanceMap</p>
<h2 id="新集合类型-RangeSet"><a href="#新集合类型-RangeSet" class="headerlink" title="新集合类型-RangeSet"></a>新集合类型-RangeSet</h2><p>RangeSet描述了一组不相连的、非空的区间。当把一个区间添加到可变的RangeSet时，所有相连的区间会被合并，空区间会被忽略。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">RangeSet&lt;Integer&gt; rangeSet = TreeRangeSet.create();</div><div class="line">rangeSet.add(Range.closed(<span class="number">1</span>, <span class="number">10</span>)); <span class="comment">// &#123;[1,10]&#125;</span></div><div class="line">rangeSet.add(Range.closedOpen(<span class="number">11</span>, <span class="number">15</span>));<span class="comment">//不相连区间:&#123;[1,10], [11,15)&#125;</span></div><div class="line">rangeSet.add(Range.closedOpen(<span class="number">15</span>, <span class="number">20</span>)); <span class="comment">//相连区间; &#123;[1,10], [11,20)&#125;</span></div><div class="line">rangeSet.add(Range.openClosed(<span class="number">0</span>, <span class="number">0</span>)); <span class="comment">//空区间; &#123;[1,10], [11,20)&#125;</span></div><div class="line">rangeSet.remove(Range.open(<span class="number">5</span>, <span class="number">10</span>)); <span class="comment">//分割[1, 10]; &#123;[1,5], [10,10], [11,20)&#125;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>[[1..5], [10..10], [11..20)]</p>
</blockquote>
<p>请注意，要合并Range.closed(1, 10)和Range.closedOpen(11, 15)这样的区间，你需要首先用Range.canonical(DiscreteDomain)对区间进行预处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> RangeSet&lt;Integer&gt; rangeSet = TreeRangeSet.create();</div><div class="line">rangeSet.add(Range.closed(<span class="number">1</span>, <span class="number">10</span>));</div><div class="line">rangeSet.add(Range.closedOpen(<span class="number">11</span>, <span class="number">15</span>));</div><div class="line">System.out.println(rangeSet);</div></pre></td></tr></table></figure>
<blockquote>
<p>[[1..10], [11..15)]</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RangeSet&lt;Integer&gt; rangeSet = TreeRangeSet.create();</div><div class="line">rangeSet.add(Range.closed(<span class="number">1</span>, <span class="number">10</span>).canonical(DiscreteDomain.integers()));</div><div class="line">rangeSet.add(Range.closedOpen(<span class="number">11</span>, <span class="number">15</span>).canonical(DiscreteDomain.integers()));</div><div class="line">System.out.println(rangeSet);</div></pre></td></tr></table></figure>
<blockquote>
<p>[[1..15)]</p>
</blockquote>
<p>Building Ranges</p>
<table>
<thead>
<tr>
<th>类名</th>
<th>实现方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>(a..b)</td>
<td>open(C, C)</td>
</tr>
<tr>
<td>[a..b]</td>
<td>closed(C, C)</td>
</tr>
<tr>
<td>[a..b)</td>
<td>closedOpen(C, C)</td>
</tr>
<tr>
<td>(a..b]</td>
<td>openClosed(C, C)</td>
</tr>
<tr>
<td>(a..+∞)</td>
<td>greaterThan(C)</td>
</tr>
<tr>
<td>[a..+∞)</td>
<td>atLeast(C)</td>
</tr>
<tr>
<td>(-∞..b)</td>
<td>lessThan(C)</td>
</tr>
<tr>
<td>(-∞..b]</td>
<td>atMost(C)</td>
</tr>
<tr>
<td>(-∞..+∞)</td>
<td>all()</td>
</tr>
</tbody>
</table>
<h3 id="RangeSet的视图"><a href="#RangeSet的视图" class="headerlink" title="RangeSet的视图"></a>RangeSet的视图</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>complement()</td>
<td>返回RangeSet的补集视图</td>
</tr>
<tr>
<td>subRangeSet(Range<c>)</c></td>
<td>返回RangeSet与给定Range的交集视图</td>
</tr>
<tr>
<td>asRanges()</td>
<td>用Set<range<c>&gt;表现RangeSet，这样可以遍历其中的Range</range<c></td>
</tr>
<tr>
<td>asSet(DiscreteDomain<c>)（仅ImmutableRangeSet支持）</c></td>
<td>用ImmutableSortedSet<c>表现RangeSet，以区间中所有元素的形式而不是区间本身的形式查看（这个操作不支持DiscreteDomain 和RangeSet都没有上边界，或都没有下边界的情况）</c></td>
</tr>
</tbody>
</table>
<p>注：没有下边界(-∞..b]等</p>
<h3 id="RangeSet的查询方法"><a href="#RangeSet的查询方法" class="headerlink" title="RangeSet的查询方法"></a>RangeSet的查询方法</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>contains(C)</td>
<td>RangeSet最基本的操作，判断RangeSet中是否有任何区间包含给定元素。</td>
</tr>
<tr>
<td>rangeContaining(C)</td>
<td>返回包含给定元素的区间；若没有这样的区间，则返回null。</td>
</tr>
<tr>
<td>encloses(Range<c>)</c></td>
<td>简单明了，判断RangeSet中是否有任何区间包括给定区间。</td>
</tr>
<tr>
<td>span()</td>
<td>返回包括RangeSet中所有区间的最小区间。</td>
</tr>
</tbody>
</table>
<h2 id="新集合类型-RangeMap"><a href="#新集合类型-RangeMap" class="headerlink" title="新集合类型-RangeMap"></a>新集合类型-RangeMap</h2><p>RangeMap描述了”不相交的、非空的区间”到特定值的映射<br>和RangeSet不同，RangeMap不会合并相邻的映射，即便相邻的区间映射到相同的值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RangeMap&lt;Integer, String&gt; rangeMap = TreeRangeMap.create();</div><div class="line">rangeMap.put(Range.closed(<span class="number">1</span>, <span class="number">10</span>), <span class="string">"foo"</span>); <span class="comment">//&#123;[1,10] =&gt; "foo"&#125;</span></div><div class="line">rangeMap.put(Range.open(<span class="number">3</span>, <span class="number">6</span>), <span class="string">"bar"</span>); <span class="comment">//&#123;[1,3] =&gt; "foo", (3,6) =&gt; "bar", [6,10] =&gt; "foo"&#125;</span></div><div class="line">rangeMap.put(Range.open(<span class="number">10</span>, <span class="number">20</span>), <span class="string">"foo"</span>); <span class="comment">//&#123;[1,3] =&gt; "foo", (3,6) =&gt; "bar", [6,10] =&gt; "foo", (10,20) =&gt; "foo"&#125;</span></div><div class="line">rangeMap.remove(Range.closed(<span class="number">5</span>, <span class="number">11</span>)); <span class="comment">//&#123;[1,3] =&gt; "foo", (3,5) =&gt; "bar", (11,20) =&gt; "foo"&#125;</span></div><div class="line"></div><div class="line">System.out.println(rangeMap);</div></pre></td></tr></table></figure>
<blockquote>
<p>[[1..3]=foo, (3..5)=bar, (11..20)=foo]</p>
</blockquote>
<h3 id="RangeMap的视图"><a href="#RangeMap的视图" class="headerlink" title="RangeMap的视图"></a>RangeMap的视图</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>asMapOfRanges()</td>
<td>用Map<range<k>, V&gt;表现RangeMap。这可以用来遍历RangeMap</range<k></td>
</tr>
<tr>
<td>subRangeMap(Range<k>)</k></td>
<td>用RangeMap类型返回RangeMap与给定Range的交集视图</td>
</tr>
</tbody>
</table>
<h2 id="强大的集合工具类：java-util-Collections中未包含的集合工具"><a href="#强大的集合工具类：java-util-Collections中未包含的集合工具" class="headerlink" title="强大的集合工具类：java.util.Collections中未包含的集合工具"></a>强大的集合工具类：java.util.Collections中未包含的集合工具</h2><p>任何对JDK集合框架有经验的程序员都熟悉和喜欢java.util.Collections包含的工具方法。Guava沿着这些路线提供了更多的工具方法：适用于所有集合的静态方法。这是Guava最流行和成熟的部分之一。</p>
<table>
<thead>
<tr>
<th>集合接口</th>
<th>属于JDK还是Guava</th>
<th>对应的Guava工具类</th>
</tr>
</thead>
<tbody>
<tr>
<td>Collection</td>
<td>JDK</td>
<td>Collections2：不要和java.util.Collections混淆</td>
</tr>
<tr>
<td>List</td>
<td>JDK</td>
<td>Lists</td>
</tr>
<tr>
<td>Set</td>
<td>JDK</td>
<td>Sets</td>
</tr>
<tr>
<td>SortedSet</td>
<td>JDK</td>
<td>Sets</td>
</tr>
<tr>
<td>Map</td>
<td>JDK</td>
<td>Maps</td>
</tr>
<tr>
<td>SortedMap</td>
<td>JDK</td>
<td>Maps</td>
</tr>
<tr>
<td>Queue</td>
<td>JDK</td>
<td>Queues</td>
</tr>
<tr>
<td>Multiset</td>
<td>Guava</td>
<td>Multisets</td>
</tr>
<tr>
<td>Multimap</td>
<td>Guava</td>
<td>Multimaps</td>
</tr>
<tr>
<td>BiMap</td>
<td>Guava</td>
<td>Maps</td>
</tr>
<tr>
<td>Table</td>
<td>Guava</td>
<td>Tables</td>
</tr>
</tbody>
</table>
<h3 id="静态工厂方法"><a href="#静态工厂方法" class="headerlink" title="静态工厂方法"></a>静态工厂方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//推断范型</span></div><div class="line">List&lt;String&gt; list = Lists.newArrayList();</div><div class="line"></div><div class="line"><span class="comment">// 按指定大小分割</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;List&lt;T&gt;&gt; partition(List&lt;T&gt; list, <span class="keyword">int</span> size)</div><div class="line"></div><div class="line"><span class="comment">// 返回倒序视图</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">reverse</span><span class="params">(List&lt;T&gt; list)</span></span></div><div class="line"></div><div class="line"><span class="comment">//初始化时就指定起始元素</span></div><div class="line">List&lt;String&gt; theseElements = Lists.newArrayList(<span class="string">"alpha"</span>, <span class="string">"beta"</span>, <span class="string">"gamma"</span>);</div><div class="line">System.out.println(theseElements);</div><div class="line"></div><div class="line"><span class="comment">//提高集合初始化大小的可读性</span></div><div class="line">List&lt;Type&gt; exactly100 = Lists.newArrayListWithCapacity(<span class="number">100</span>);</div><div class="line">List&lt;Type&gt; approx100 = Lists.newArrayListWithExpectedSize(<span class="number">100</span>);</div><div class="line">Set&lt;Type&gt; approx100Set = Sets.newHashSetWithExpectedSize(<span class="number">100</span>);</div></pre></td></tr></table></figure>
<h3 id="Iterables"><a href="#Iterables" class="headerlink" title="Iterables"></a>Iterables</h3><p>在可能的情况下，Guava提供的工具方法更偏向于接受Iterable而不是Collection类型<br>在Google，对于不存放在主存的集合——比如从数据库或其他数据中心收集的结果集，因为实际上还没有攫取全部数据，这类结果集都不能支持类似size()的操作 ——通常都不会用Collection类型来表示。</p>
<h3 id="FluentIterable"><a href="#FluentIterable" class="headerlink" title="FluentIterable"></a>FluentIterable</h3><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 按指定大小分割，得到的子集都不能进行修改操作</span></div><div class="line">Lists.partition(Iterable, <span class="keyword">int</span>)</div><div class="line"><span class="comment">// 返回给定List的反转视图</span></div><div class="line">Lists.reverse(List)</div></pre></td></tr></table></figure>
<h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3><p>标准的集合运算（Set-Theoretic）方法,这些方法接受Set参数并返回SetView</p>
<p>SetView可用于：</p>
<ul>
<li>直接当作Set使用，因为SetView也实现了Set接口</li>
<li>用copyInto(Set)拷贝进另一个可变集合</li>
<li>用immutableCopy()对自己做不可变拷贝</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>union(Set, Set)</td>
<td>并集</td>
</tr>
<tr>
<td>intersection(Set, Set)</td>
<td>交集</td>
</tr>
<tr>
<td>difference(Set, Set)</td>
<td>差集</td>
</tr>
<tr>
<td>symmetricDifference(Set,   Set)</td>
<td>对称差集 </td>
</tr>
<tr>
<td>cartesianProduct(List<set>)</set></td>
<td>返回所有集合的笛卡儿积</td>
</tr>
<tr>
<td>powerSet(Set)</td>
<td>返回给定集合的所有子集</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">List&lt;Set&lt;String&gt;&gt; sets = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">HashSet&lt;String&gt; newHashSet = Sets.newHashSet(<span class="string">"a"</span>,<span class="string">"b"</span>);</div><div class="line">HashSet&lt;String&gt; newHashSet2 = Sets.newHashSet(<span class="string">"a"</span>,<span class="string">"c"</span>);</div><div class="line">sets.add(newHashSet);</div><div class="line">sets.add(newHashSet2);</div><div class="line"></div><div class="line"><span class="comment">//并集</span></div><div class="line">SetView&lt;String&gt; union = Sets.union(newHashSet,newHashSet2);</div><div class="line">System.out.println(<span class="string">"---Sets.union ---"</span>);</div><div class="line">System.out.println(union);</div><div class="line"></div><div class="line"><span class="comment">//交集</span></div><div class="line">SetView&lt;String&gt; intersection = Sets.intersection(newHashSet, newHashSet2);</div><div class="line">System.out.println(<span class="string">"---Sets.intersection ---"</span>);</div><div class="line">System.out.println(intersection);</div><div class="line"></div><div class="line"><span class="comment">//差集</span></div><div class="line">SetView&lt;String&gt; difference = Sets.difference(newHashSet, newHashSet2);</div><div class="line">System.out.println(<span class="string">"---Sets.difference ---"</span>);</div><div class="line">System.out.println(difference);</div><div class="line"></div><div class="line"><span class="comment">//对称差集 </span></div><div class="line">SetView&lt;String&gt; symmetricDifference = Sets.symmetricDifference(newHashSet,newHashSet2);</div><div class="line">System.out.println(<span class="string">"---Sets.symmetricDifference ---"</span>);</div><div class="line">System.out.println(symmetricDifference);</div><div class="line"></div><div class="line"><span class="comment">//笛卡尔积</span></div><div class="line">Set&lt;List&lt;String&gt;&gt; cartesianProduct = Sets.cartesianProduct(sets);</div><div class="line">System.out.println(<span class="string">"--- Sets.cartesianProduct ----"</span>);</div><div class="line"><span class="keyword">for</span>(List&lt;String&gt; list : cartesianProduct)&#123;</div><div class="line">    System.out.println(list);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//子集</span></div><div class="line">Set&lt;Set&lt;String&gt;&gt; powerSet = Sets.powerSet(newHashSet);</div><div class="line">System.out.println(<span class="string">"--- Sets.powerSet ----"</span>);</div><div class="line"><span class="keyword">for</span>(Set&lt;String&gt; set : powerSet)&#123;</div><div class="line">    System.out.println(set);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>—Sets.union —<br>[b, a, c]<br>—Sets.intersection —<br>[a]<br>—Sets.difference —<br>[b]<br>—Sets.symmetricDifference —<br>[b, c]<br>— Sets.cartesianProduct —-<br>[b, c]<br>[b, a]<br>[a, c]<br>[a, a]<br>— Sets.powerSet —-<br>[]<br>[b]<br>[a]<br>[b, a]</p>
</blockquote>
<h3 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h3><h1 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h1><p>使用场景</p>
<ul>
<li>消耗一些内存空间来提升速度</li>
<li>预料到某些键会被查询一次以上</li>
</ul>
<h2 id="Callable方式"><a href="#Callable方式" class="headerlink" title="Callable方式"></a>Callable方式</h2><p>使用场景： 缓存加载方式<code>不固定</code>，每次调用get获取缓存，传入Callable</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">log.info(<span class="string">"====== Callable方式 ======"</span>);</div><div class="line">Cache&lt;String, String&gt; cache = CacheBuilder.newBuilder()</div><div class="line">    <span class="comment">// 总量</span></div><div class="line">    .maximumSize(<span class="number">2</span>)</div><div class="line">    <span class="comment">// 按写 过期</span></div><div class="line">    <span class="comment">//.expireAfterWrite(10, TimeUnit.MINUTES)</span></div><div class="line">    <span class="comment">// 按读 过期</span></div><div class="line">    .expireAfterAccess(<span class="number">10</span>, TimeUnit.MINUTES)</div><div class="line">    <span class="comment">// Guava Cache的统计功</span></div><div class="line">    .recordStats()</div><div class="line">    .removalListener(<span class="keyword">new</span> RemovalListener&lt;String, String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRemoval</span><span class="params">(RemovalNotification&lt;String, String&gt; notification)</span> </span>&#123;</div><div class="line">            log.info(<span class="string">"Cache Remove Key: &#123;&#125; Value: &#123;&#125;"</span>, notification.getKey(), notification.getValue());</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .build();</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> idx = i;</div><div class="line">    <span class="comment">// Callable 方式，获取缓存时指定缓存获取方法，获取缓存时 "如果有缓存则返回；否则运算、缓存、然后返回"</span></div><div class="line">    <span class="comment">// 在整个加载方法完成前，缓存项相关的可观察状态都不会更改。</span></div><div class="line">    String value = cache.get(String.valueOf(i), <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"V_"</span> + idx;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    log.info(<span class="string">"cache value: "</span> + value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">CacheStats stats = cache.stats();</div><div class="line">log.info(<span class="string">"缓存命中率 &#123;&#125; "</span>, stats.hitRate());</div><div class="line">log.info(<span class="string">"加载新值的平均时间 &#123;&#125; "</span>, stats.averageLoadPenalty());</div><div class="line">log.info(<span class="string">"缓存项被回收的总数 &#123;&#125; "</span>, stats.evictionCount());</div></pre></td></tr></table></figure>
<h2 id="CacheLoader方式"><a href="#CacheLoader方式" class="headerlink" title="CacheLoader方式"></a>CacheLoader方式</h2><p>使用场景： 缓存加载方式<code>固定</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 缓存不存在时，通过CacheLoader 加载</div><div class="line"> */</div><div class="line"><span class="keyword">final</span> LoadingCache&lt;Class&lt;?&gt;, ImmutableSet&lt;Class&lt;?&gt;&gt;&gt; flattenHierarchyCache =</div><div class="line">    CacheBuilder.newBuilder()</div><div class="line">        .build(</div><div class="line">            <span class="keyword">new</span> CacheLoader&lt;Class&lt;?&gt;, ImmutableSet&lt;Class&lt;?&gt;&gt;&gt;() &#123;</div><div class="line">                <span class="comment">// &lt;Class&lt;?&gt;&gt; is actually needed to compile</span></div><div class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"RedundantTypeArguments"</span>)</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="keyword">public</span> ImmutableSet&lt;Class&lt;?&gt;&gt; load(Class&lt;?&gt; concreteClass) &#123;</div><div class="line">                    <span class="comment">// 获取父类</span></div><div class="line">                    <span class="keyword">return</span> ImmutableSet.&lt;Class&lt;?&gt;&gt;copyOf(</div><div class="line">                            TypeToken.of(concreteClass).getTypes().rawTypes());</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"><span class="comment">// LoadingCache 的 get(K) 方法要么返回已经缓存的值，要么使用CacheLoader向缓存原子地加载新值</span></div><div class="line"><span class="comment">// 如果定义的CacheLoader没有声明任何检查型异常，则可以通过getUnchecked(K)查找缓存</span></div><div class="line">ImmutableSet&lt;Class&lt;?&gt;&gt; rawTypes = flattenHierarchyCache.getUnchecked(Set.class);</div></pre></td></tr></table></figure>
<h2 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 个别清除：Cache.invalidate(key)</span></div><div class="line"><span class="comment">// 批量清除：Cache.invalidateAll(keys)</span></div><div class="line"><span class="comment">// 清除所有缓存项：Cache.invalidateAll()</span></div><div class="line"></div><div class="line"><span class="comment">// 清理什么时候发生</span></div><div class="line"><span class="comment">// 在写操作时顺带做少量的维护工作，或者偶尔在读操作时做——如果写操作实在太少的话</span></div></pre></td></tr></table></figure>
<h2 id="刷新缓存"><a href="#刷新缓存" class="headerlink" title="刷新缓存"></a>刷新缓存</h2><p>CacheBuilder.refreshAfterWrite(long, TimeUnit)可以为缓存增加<code>自动定时刷新</code>功能</p>
<p>在刷新操作进行时，缓存仍然可以向其他线程返回旧值，而不像回收操作，读缓存的线程必须等待新值加载完成。</p>
<p>如果你在缓存上同时声明expireAfterWrite和refreshAfterWrite，缓存并不会因为刷新盲目地定时重置，如果缓存项没有被检索，那刷新就不会真的发生，缓存项在过期时间后也变得可以回收。</p>
<h1 id="Reflection-反射"><a href="#Reflection-反射" class="headerlink" title="Reflection 反射"></a>Reflection 反射</h1><h2 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h2><p>Java不能在运行时保留对象的泛型类型信息。</p>
<p>反射允许你去检测方法和类的泛型类型。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClasA</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; sList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> List&lt;Integer&gt; iList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// jdk 运行时获取泛型</span></div><div class="line">        Field stringListField = ClasA.class.getDeclaredField(<span class="string">"sList"</span>);</div><div class="line">        ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();</div><div class="line">        Class&lt;?&gt; stringListClass = (Class&lt;?&gt;) stringListType.getActualTypeArguments()[<span class="number">0</span>];</div><div class="line">        <span class="comment">// class java.lang.String.</span></div><div class="line">        System.out.println(stringListClass);</div><div class="line"></div><div class="line">        Field integerListField = ClasA.class.getDeclaredField(<span class="string">"sList"</span>);</div><div class="line">        ParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();</div><div class="line">        Class&lt;?&gt; integerListClass = (Class&lt;?&gt;) integerListType.getActualTypeArguments()[<span class="number">0</span>];</div><div class="line">        <span class="comment">// class java.lang.Integer.</span></div><div class="line">        System.out.println(integerListClass); </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="TypeToken"><a href="#TypeToken" class="headerlink" title="TypeToken"></a>TypeToken</h2><p>TypeToken支持很多种类能支持的查询</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// guava 运行时获取泛型</span></div><div class="line">TypeToken&lt;?&gt; iListTypeToken = TypeToken.of(ClasA.class.getDeclaredField(<span class="string">"iList"</span>).getGenericType());</div><div class="line">System.out.println(iListTypeToken);</div><div class="line"></div><div class="line"><span class="comment">// 获得包装的java.lang.reflect.Type.</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Type <span class="title">getType</span><span class="params">()</span></span></div><div class="line"><span class="comment">// 返回运行时类</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> Class&lt;? <span class="keyword">super</span> T&gt; <span class="title">getRawType</span><span class="params">()</span> </div><div class="line"><span class="comment">// 返回一个Set，包含所有接口，子类和类是这个类型的类。</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> TypeSet <span class="title">getTypes</span><span class="params">()</span></div><div class="line"></div><div class="line">Set&lt;Class&lt;? <span class="keyword">super</span> Set&gt;&gt; classes = TypeToken.of(concreteClass).getTypes().rawTypes());</div></pre></td></tr></table></figure>
<h2 id="Invokable"><a href="#Invokable" class="headerlink" title="Invokable"></a>Invokable</h2><p>Guava的Invokable是对java.lang.reflect.Method和java.lang.reflect.Constructor的流式包装。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Invokable invokable = Invokable.from(Student.class.getMethod(<span class="string">"add"</span>, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class));</div><div class="line">System.out.println(invokable.isPublic()); <span class="comment">// true</span></div><div class="line">System.out.println(invokable.getDeclaringClass()); <span class="comment">// class com.qinjiangbo.Student</span></div><div class="line">System.out.println(invokable.getParameters()); <span class="comment">// [int arg0, int arg1]</span></div><div class="line">System.out.println(invokable.getOwnerType()); <span class="comment">// com.qinjiangbo.Student</span></div><div class="line">System.out.println(invokable.getExceptionTypes()); <span class="comment">// [java.lang.NumberFormatException]</span></div><div class="line">System.out.println(invokable.getReturnType()); <span class="comment">// int</span></div><div class="line">System.out.println(invokable.getModifiers()); <span class="comment">// 1</span></div><div class="line">System.out.println(invokable.getName()); <span class="comment">// add</span></div><div class="line">System.out.println(invokable.isOverridable()); <span class="comment">// true</span></div><div class="line">System.out.println(invokable.isVarArgs()); <span class="comment">// false</span></div><div class="line">System.out.println(invokable.isPublic()); <span class="comment">// true</span></div><div class="line">System.out.println(invokable.isAbstract()); <span class="comment">// false</span></div><div class="line">System.out.println(invokable.isAccessible()); <span class="comment">// false</span></div><div class="line">System.out.println(invokable.isAnnotationPresent(ABC.class)); <span class="comment">// true</span></div><div class="line">System.out.println(invokable.isStatic()); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h1 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h1><p>见观察者模式 Guava EventBus</p>
<h1 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Adler-32和CRC-32</span></div><div class="line"><span class="comment">// 上传前计算本地文件的crc32，上传后将crc32进行对比</span></div><div class="line">HashFunction adler32 = Hashing.adler32();</div><div class="line">HashFunction crc32 = Hashing.crc32();</div><div class="line">HashFunction md5 = Hashing.md5();</div><div class="line"></div><div class="line"><span class="comment">// murmur Hash算法</span></div><div class="line"><span class="comment">// MurmurHash 是一种非加密型哈希函数，适用于一般的哈希检索操作。 由Austin Appleby在2008年发明， 并出现了多个变种，都已经发布到了公有领域(public domain)。与其它流行的哈希函数相比，对于规律性较强的key，MurmurHash的随机分布特征表现更良好。---摘自wiki</span></div><div class="line"><span class="keyword">int</span> bits = <span class="number">256</span>;</div><div class="line"><span class="comment">//组合多个murmur3_128 生成更长hash</span></div><div class="line">HashFunction goodFastHash = Hashing.goodFastHash(bits);</div><div class="line"><span class="comment">// 生出32-bit或128-bit哈希值</span></div><div class="line">HashFunction murmur3_32 = Hashing.murmur3_32();</div><div class="line">HashFunction murmur3_128 = Hashing.murmur3_128();</div><div class="line"></div><div class="line"><span class="comment">// sha1，sha256，sha512三种加密算法</span></div><div class="line">HashFunction sha1 = Hashing.sha1();</div><div class="line">HashFunction sha256 = Hashing.sha256();</div><div class="line">HashFunction sha512 = Hashing.sha512();</div><div class="line"></div><div class="line">HashFunction hf = murmur3_32;</div><div class="line"></div><div class="line">HashCode hc = hf.newHasher()</div><div class="line">        .putLong(<span class="number">1051764212428247040L</span>)</div><div class="line">        .putString(<span class="string">"Waybill"</span>, Charsets.UTF_8)</div><div class="line">        .hash();</div><div class="line"></div><div class="line">System.out.println(hc.toString());</div><div class="line"></div><div class="line"></div><div class="line">ArrayList&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line"></div><div class="line">Person person = Person.builder().id(<span class="number">1051764212428247040L</span>).firstName(<span class="string">"Sunday"</span>).lastName(<span class="string">"Wang"</span>).birthYear(<span class="number">2007</span>).build();</div><div class="line">Person person2 = Person.builder().id(<span class="number">1053953652747689984L</span>).firstName(<span class="string">"Sunday"</span>).lastName(<span class="string">"Wang"</span>).birthYear(<span class="number">2007</span>).build();</div><div class="line">Person person3 = Person.builder().id(<span class="number">1056414184771702784L</span>).firstName(<span class="string">"Sunday"</span>).lastName(<span class="string">"Wang"</span>).birthYear(<span class="number">2007</span>).build();</div><div class="line"></div><div class="line">persons.add(person);</div><div class="line">persons.add(person2);</div><div class="line">persons.add(person3);</div><div class="line"></div><div class="line"><span class="keyword">int</span>  bucketsNum = <span class="number">64</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (Person personItem : persons) &#123;</div><div class="line">    HashCode hash = hf.newHasher().putObject(personItem, Person.getPersonFunnel()).hash();</div><div class="line">    <span class="comment">// 为给定的”桶”大小返回一致性哈希值。当”桶”增长时，该方法保证最小程度的一致性哈希值变化。</span></div><div class="line">    <span class="keyword">int</span> bucketNum = Hashing.consistentHash(hash, bucketsNum);</div><div class="line">    System.out.println(bucketNum);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Guava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sublime Note]]></title>
      <url>http://xiaozhuang.github.io/2016/11/16/sublime_note/</url>
      <content type="html"><![CDATA[<p>Sublime Text：一款具有代码高亮、语法提示、自动完成且反应快速的编辑器软件，不仅具有华丽的界面，还支持插件扩展机制<br><a id="more"></a></p>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>Ctrl + K + U：转大写<br>Ctrl + K + L：转小写</p>
<p>列选择 ：Shift + 鼠标右键<br>添加多光标编辑：Ctrl + 左键<br>相同文本编辑：Alt + F3</p>
<p>JSON格式化：Ctrl + Alt + F<br>代码合并单行：Ctrl + J</p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Sublime </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven]]></title>
      <url>http://xiaozhuang.github.io/2016/11/10/maven-note/</url>
      <content type="html"><![CDATA[<p>Apache Maven is a software project management and comprehension tool.<br><a id="more"></a></p>
<h1 id="Maven命令"><a href="#Maven命令" class="headerlink" title="Maven命令"></a>Maven命令</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 清理</span></div><div class="line">mvn clean</div><div class="line"><span class="comment"># 清理并编译</span></div><div class="line">mvn clean compile</div><div class="line">mvn clean <span class="built_in">test</span></div><div class="line">mvn clean package</div><div class="line">mvn clean install</div><div class="line"><span class="comment"># 清理并发布（私服）</span></div><div class="line">mvn clean deploy</div><div class="line"><span class="comment"># 打包同时打源码包</span></div><div class="line">clean <span class="built_in">source</span>:jar package</div><div class="line"></div><div class="line"><span class="comment"># 跳过测试</span></div><div class="line">mvn package -Dmaven.test.skip=<span class="literal">true</span></div><div class="line">mvn package -D skipTests=<span class="literal">true</span></div></pre></td></tr></table></figure>
<h2 id="deploy配置"><a href="#deploy配置" class="headerlink" title="deploy配置"></a>deploy配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 项目pom添加 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jd-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://artifactory.jd.com/libs-snapshots-local<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- maven setting.xml 配置账号--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">server</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">id</span>&gt;</span>jd-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">username</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">username</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">password</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">password</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">server</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="阿里云中央仓库"><a href="#阿里云中央仓库" class="headerlink" title="阿里云中央仓库"></a>阿里云中央仓库</h1><p>修改settings.xml，在mirrors节点下添加配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- maven阿里云中央仓库 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </div><div class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="scope标签"><a href="#scope标签" class="headerlink" title="scope标签"></a>scope标签</h1><ul>
<li>compile(默认) 需要参与当前项目的编译，打包时包含进去</li>
<li>test 仅仅参与测试相关的工作</li>
<li>provided 打包时不包含，运行时提供</li>
<li>system 参与度与provided相同，依赖项不从maven仓库取，从本地文件系统取</li>
<li>runtime 运行时依赖，编译时不需要</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;servlet-api-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="聚合和继承"><a href="#聚合和继承" class="headerlink" title="聚合和继承"></a>聚合和继承</h1><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>可在父POM中dependencyManagement，<br>使用dependencyManagement声明的依赖不会引入依赖，也不会给子模块引入依赖</p>
<p>子模块中添加父POM在dependencyManagement中声明的依赖，只需要声明groupId 和 artifactId</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.juvenxu.mvnbook.account<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>account-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Account Parent<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">springframework.version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">springframework.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.7<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 这种方式引用pom，子模块申明依赖版本时，如果已在import的pom中存在，子模块中version声明无效；需在dependencyManagement中Override --&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.juvenxu.mvnbook.account<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>account-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../account-parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>account-email<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Account Email<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">javax.mail.version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">javax.mail.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">greenmail.version</span>&gt;</span>1.3.1b<span class="tag">&lt;/<span class="name">greenmail.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>        </div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>           </div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>         </div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>         </div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;javax.mail.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>       </div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.icegreen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>greenmail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;greenmail.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="依赖调节"><a href="#依赖调节" class="headerlink" title="依赖调节"></a>依赖调节</h1><ul>
<li>路径最近者优先</li>
<li>第一声明者优先（Version：2.0.9+）</li>
</ul>
<p>排除依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Spring exclude commons-logging--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="优化依赖"><a href="#优化依赖" class="headerlink" title="优化依赖"></a>优化依赖</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 参看已解析的依赖</span></div><div class="line">mvn dependency:list</div><div class="line"></div><div class="line"><span class="comment"># 查看依赖树</span></div><div class="line">mvn dependency:tree</div><div class="line"></div><div class="line">idea的main工程的pom文件里右键-&gt;manve-&gt;show dependencies查看</div><div class="line"></div><div class="line"><span class="comment"># 依赖分析</span></div><div class="line"><span class="comment"># Used undeclared dependencies，项目中用到，但没有显示声明的依赖</span></div><div class="line"><span class="comment"># Unused declared dependencies，项目中未使用的依赖（只分析主代码和项目代码中依赖）</span></div><div class="line">mvn dependency:analyze</div></pre></td></tr></table></figure>
<h1 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpmime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="Maven内置属性"><a href="#Maven内置属性" class="headerlink" title="Maven内置属性"></a>Maven内置属性</h1><ul>
<li>${basedir}表示项目根目录,即包含pom.xml文件的目录;</li>
<li>${version}表示项目版本;</li>
<li>${project.basedir}同${basedir};</li>
<li>${project.baseUri}表示项目文件地址;</li>
<li>${maven.build.timestamp}表示项目构件开始时间;</li>
<li>${maven.build.timestamp.format}表示属性${maven.build.timestamp}的展示格式,默认值为yyyyMMdd-HHmm,可自定义其格式</li>
</ul>
<p>POM属性(使用pom属性可以引用到pom.xml文件对应元素的值)</p>
<ul>
<li>${project.build.directory}表示主源码路径;</li>
<li>${project.build.sourceEncoding}表示主源码的编码格式;</li>
<li>${project.build.sourceDirectory}表示主源码路径;</li>
<li>${project.build.finalName}表示输出文件名称;</li>
<li>${project.version}表示项目版本,与${version}相同;</li>
</ul>
<p>Java系统属性<br>mvn help:system命令可查看所有的Java系统属性</p>
<h1 id="Including-and-excluding-files-and-directories"><a href="#Including-and-excluding-files-and-directories" class="headerlink" title="Including and excluding files and directories"></a>Including and excluding files and directories</h1><a href="http://maven.apache.org/plugins/maven-resources-plugin/examples/include-exclude.html" title="include-exclude" target="_blank" rel="external">include-exclude</a>
<h1 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h1><h2 id="添加install本地仓库jar包报错"><a href="#添加install本地仓库jar包报错" class="headerlink" title="添加install本地仓库jar包报错"></a>添加install本地仓库jar包报错</h2><p>was cached in the local repository, resolution will not be reattempted until the update interval of</p>
<p>原因：<br>    install到本地仓库的jar包，其parent pom 既不在中央参考，又不在本地仓库</p>
<p>解决方法：<br>    parent pom install到本地仓库</p>
<h2 id="idea-找不到符号"><a href="#idea-找不到符号" class="headerlink" title="idea 找不到符号"></a>idea 找不到符号</h2><p>idea运行tomcat报错，”找不到符号”，报错类可以打开类文件<br>问题原因：<br>    idea maven无法加载jar包</p>
<p>解决办法：<br>    修改idea maven配置，不使用默认配置</p>
<h2 id="lombok-找不到符号"><a href="#lombok-找不到符号" class="headerlink" title="lombok 找不到符号"></a>lombok 找不到符号</h2><p>maven-compiler-plugin:2.3.2 升级 maven-compiler-plugin3.5.1</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;maven.compiler.target&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.plexus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>plexus-compiler-javac<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;maven.compiler.target&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="web项目同时打jar和war"><a href="#web项目同时打jar和war" class="headerlink" title="web项目同时打jar和war"></a>web项目同时打jar和war</h2><p>Making both a War and Jar at the same time</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-a-jar<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="java目录下xml文件不打包"><a href="#java目录下xml文件不打包" class="headerlink" title="java目录下xml文件不打包"></a>java目录下xml文件不打包</h2><p>src/main/java目录下xml文件编译时未编译到target目录下</p>
<p>原因：<br>    src/main/java和src/test/java<br>    这两个目录中的所有*.java文件会分别在comile和test-comiple阶段被编译，编译结果分别放到了target/classes和targe/test-classes目录中，但是这两个目录中的其他文件都会被忽略掉。</p>
<p>解决方法：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="profiles"><a href="#profiles" class="headerlink" title="profiles"></a>profiles</h2><p>profile可以让我们定义一系列的配置信息，然后指定其激活条件。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>production<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">log.path.prefix</span>&gt;</span>/export/home/tomcat/logs/etms-waybill-web<span class="tag">&lt;/<span class="name">log.path.prefix</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mockito-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>develop<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">log.path.prefix</span>&gt;</span>/export/home/tomcat/logs/etms-waybill-web<span class="tag">&lt;/<span class="name">log.path.prefix</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 开发环境，将test资源文件下autotest中配置编译至target --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/test/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>autotest/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jd.transportation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>auto-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mockito-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="profile替换资源文件"><a href="#profile替换资源文件" class="headerlink" title="profile替换资源文件"></a>profile替换资源文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">spring.datasource.username=$&#123;spring_datasource_username&#125;</div><div class="line">spring.datasource.password=$&#123;spring_datasource_password&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>development<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">spring_datasource_username</span>&gt;</span>waybill<span class="tag">&lt;/<span class="name">spring_datasource_username</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">spring_datasource_password</span>&gt;</span>waybill<span class="tag">&lt;/<span class="name">spring_datasource_password</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>production<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>false<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">spring_datasource_username</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">spring_datasource_password</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Spring-Boot-使用maven-profile-替换配置无效"><a href="#Spring-Boot-使用maven-profile-替换配置无效" class="headerlink" title="Spring Boot 使用maven profile 替换配置无效"></a>Spring Boot 使用maven profile 替换配置无效</h2><p>If you use the spring-boot-starter-parent, you can then refer to your Maven ‘project properties’ with @..@ placeholders</p>
<p>因Spring Boot将分隔符设置为<code>@</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">spring.datasource.username=@spring_datasource_username@</div><div class="line">spring.datasource.password=@spring_datasource_password@</div></pre></td></tr></table></figure>
<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/howto-properties-and-configuration.html" title="howto-properties-and-configuration" target="_blank" rel="external">howto-properties-and-configuration</a>
<h2 id="why-can’t-I-override-the-version-of-a-dependencyManagement-imported-pom"><a href="#why-can’t-I-override-the-version-of-a-dependencyManagement-imported-pom" class="headerlink" title="why can’t I override the version of a dependencyManagement imported pom"></a>why can’t I override the version of a dependencyManagement imported pom</h2><p><code>通过properties覆盖imported pom中version不生效</code></p>
<h1 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h1><h2 id="versions-maven-plugin"><a href="#versions-maven-plugin" class="headerlink" title="versions-maven-plugin"></a>versions-maven-plugin</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 修改版本号 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 即可修改该模块及依赖该模块的版本号为1.0.1-SNAPSHOT，其中参数-DallowSnapshots=true,表示允许release版修改为snapshot版 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>versions-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">generateBackupPoms</span>&gt;</span>false<span class="tag">&lt;/<span class="name">generateBackupPoms</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">newVersion</span>&gt;</span>1.0.8<span class="tag">&lt;/<span class="name">newVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 修改全模块版本号 -DallowSnapshots=true,表示允许release版修改为snapshot版</span></div><div class="line">mvn versions:<span class="built_in">set</span> -DnewVersion=1.0.1-SNAPSHOT -DprocessAllModules=<span class="literal">true</span> -DallowSnapshots=<span class="literal">true</span></div><div class="line"></div><div class="line">mvn versions:<span class="built_in">set</span> -DgroupId=com.jd.ql.waybill -DartifactId=waybill-ump -DnewVersion=0.0.5-SNAPSHOT -DprocessAllModules=<span class="literal">true</span> -DallowSnapshots=<span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># 回退版本号</span></div><div class="line">mvn versions:revert</div><div class="line"><span class="comment"># 若确认版本</span></div><div class="line">mvn versions:commit</div></pre></td></tr></table></figure>
<h1 id="todo-list"><a href="#todo-list" class="headerlink" title="todo list"></a>todo list</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="frontend-maven-plugin"><a href="#frontend-maven-plugin" class="headerlink" title="frontend-maven-plugin"></a>frontend-maven-plugin</h2><p><code>webpack</code><br><code>npm</code></p>
<p>npm 打包插件</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript Note]]></title>
      <url>http://xiaozhuang.github.io/2016/11/07/js-note/</url>
      <content type="html"><![CDATA[<p>web前端现在处于一个什么样的位置？<br>node侵占后台，ionic react侵占移动端，angular vue让前端分层，webGL攻入VR，unity支持js，nw.js侵入客户端。jquery bootstrap人人都会。<br><a id="more"></a></p>
<h1 id="Chrome调试"><a href="#Chrome调试" class="headerlink" title="Chrome调试"></a>Chrome调试</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li>F8    继续</li>
<li>F10    跳过</li>
<li>F11    跳入</li>
</ul>
<h2 id="关闭Chrome安全策略跨域"><a href="#关闭Chrome安全策略跨域" class="headerlink" title="关闭Chrome安全策略跨域"></a>关闭Chrome安全策略跨域</h2><p><code>关闭CORS</code></p>
<p>45版本 只需要 –disable-web-security<br>48,53版本需要 额外添加 –user-data-dir</p>
<p>快捷方式后添加参数，重启浏览器</p>
<h1 id="Dom"><a href="#Dom" class="headerlink" title="Dom"></a>Dom</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置元素属性</span></div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"INPUT"</span>)[<span class="number">0</span>].setAttribute(<span class="string">"type"</span>, <span class="string">"button"</span>)</div><div class="line"><span class="comment">// 或</span></div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"INPUT"</span>)[<span class="number">0</span>].type = <span class="string">'button'</span></div></pre></td></tr></table></figure>
<h1 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h1><h2 id="转小写"><a href="#转小写" class="headerlink" title="转小写"></a>转小写</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"Hello World!"</span></div><div class="line">str.toLowerCase();</div></pre></td></tr></table></figure>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a= <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="comment">//删除元素</span></div><div class="line"><span class="comment">//arrayObject.splice(index,howmany,item1,.....,itemX)</span></div><div class="line"><span class="comment">//item1, ..., itemX	可选。向数组添加的新项目。</span></div><div class="line">arr.splice(<span class="number">0</span>,<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">//数组拷贝</span></div><div class="line"><span class="keyword">var</span> arr2 = arr.slice();</div><div class="line"></div><div class="line"><span class="comment">// 数组和并</span></div><div class="line"><span class="keyword">var</span> arr1 = [&#123;<span class="attr">name</span>:<span class="string">"wang"</span>&#125;];</div><div class="line"><span class="keyword">var</span> arr2 = [&#123;<span class="attr">name</span>:<span class="string">"sunday"</span>&#125;];</div><div class="line"><span class="keyword">var</span> arr3 = arr1.concat(arr2);</div><div class="line"><span class="built_in">console</span>.log(arr3);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 把数组中的所有元素放入一个字符串</span></div><div class="line"><span class="keyword">var</span> arr3_join = arr3.join(<span class="string">','</span>);</div><div class="line"></div><div class="line"><span class="comment">//向数组的末尾添加一个或多个元素，并返回新的长度</span></div><div class="line"><span class="keyword">var</span> push_r = arr.push(<span class="number">4</span>);</div><div class="line"><span class="comment">// 删除并返回数组的最后一个元素</span></div><div class="line"><span class="keyword">var</span> pop_r = arr.pop();</div></pre></td></tr></table></figure>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 排序</span></div><div class="line">workOrderList.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">if</span> (a.originateDate &lt; b.originateDate) &#123;</div><div class="line">	  <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.originateDate &gt; b.originateDate) &#123;</div><div class="line">	  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">	  <span class="keyword">return</span> <span class="number">0</span></div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 倒序</span></div><div class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.sortFlag)&#123;</div><div class="line">	workOrderList.reverse();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> url = <span class="string">"http://10.10.60.49:8080/app/entities/supportingplatformbuild201611/create?_masterpage=workreport/form_master"</span>;</div><div class="line"><span class="comment">//正则表达式使用\转义</span></div><div class="line"><span class="keyword">var</span> match_arr = url.match(<span class="regexp">/^.*\/entities\/[^/]+\//</span>);</div><div class="line"><span class="built_in">console</span>.log(match_arr[<span class="number">0</span>]);</div><div class="line"></div><div class="line"><span class="comment">//捕获</span></div><div class="line"><span class="keyword">var</span> re = <span class="regexp">/quick\s(brown).+?(jumps)/ig</span>;</div><div class="line"><span class="keyword">var</span> result = re.exec(<span class="string">'The Quick Brown Fox Jumps Over The Lazy Dog'</span>);</div><div class="line"><span class="built_in">console</span>.log(result[<span class="number">0</span>]);</div><div class="line"><span class="built_in">console</span>.log(result[<span class="number">1</span>]);</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://10.10.60.49:8080/app/entities/supportingplatformbuild201611/" target="_blank" rel="external">http://10.10.60.49:8080/app/entities/supportingplatformbuild201611/</a><br>Quick Brown Fox Jumps<br>Brown</p>
</blockquote>
<h1 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h1><p>只能替换目标字符串中第一个匹配的字符串<br>stringObject.replace(regexp/substr,replacement)</p>
<p>replaceAll</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">str.replace(<span class="regexp">/word/g</span>,<span class="string">"Excel"</span>) ;</div><div class="line"></div><div class="line"><span class="comment">//g	执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）</span></div><div class="line"><span class="comment">// m	执行多行匹配</span></div><div class="line"><span class="built_in">String</span>.prototype.replaceAll  = <span class="function"><span class="keyword">function</span>(<span class="params">s1,s2</span>)</span>&#123;     </div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(s1,<span class="string">"gm"</span>),s2);     </div><div class="line">&#125;；</div></pre></td></tr></table></figure>
<h1 id="获取当前浏览器的地址"><a href="#获取当前浏览器的地址" class="headerlink" title="获取当前浏览器的地址"></a>获取当前浏览器的地址</h1><ul>
<li>document表示的是一个文档对象，window表示的是一个窗口对象，一个窗口下可以有多个文档对象。所以一个窗口下只有一个window.location.href，但是可能有多个document.URL、document.location.href</li>
<li>window.location.href和document.location.href可以被赋值，然后跳转到其它页面，document.URL只能读不能写<br>-document.location.href和document.location.replace都可以实现从A页面切换到B页面，区别是：<br>用document.location.href切换后，可以退回到原页面。<br>而用document.location.replace()切换后，不可以通过“后退”退回到原页面。</li>
</ul>
<h1 id="js字符串编码"><a href="#js字符串编码" class="headerlink" title="js字符串编码"></a>js字符串编码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//encodeURI(),把字符串作为 URI 进行编码;</span></div><div class="line"><span class="comment">//decodeURI()</span></div><div class="line"><span class="built_in">encodeURI</span>(URIstring)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// encodeURIComponent(),把字符串作为 URI 组件进行编码</span></div><div class="line"><span class="comment">// decodeURIComponent()</span></div><div class="line"><span class="built_in">encodeURIComponent</span>(URIstring)；</div><div class="line"></div><div class="line"><span class="comment">//总结</span></div><div class="line"><span class="comment">//encodeURI() 用于编码整个URI,因此URI中的合法字符都不会被编码转换。</span></div><div class="line"><span class="comment">//encodeURIComponent方法在编码单个URIComponent（指请求参 数）应当是最常用的，它可以讲参数中的中文、特殊字符进行转义，而不会影响整个URL。</span></div></pre></td></tr></table></figure>
<h1 id="指示对象自身属性中是否具有指定的属性"><a href="#指示对象自身属性中是否具有指定的属性" class="headerlink" title="指示对象自身属性中是否具有指定的属性"></a>指示对象自身属性中是否具有指定的属性</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">obj.hasOwnProperty(prop)；</div></pre></td></tr></table></figure>
<h1 id="Json与对象转换"><a href="#Json与对象转换" class="headerlink" title="Json与对象转换"></a>Json与对象转换</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">id</span>:<span class="string">"7"</span>,<span class="attr">name</span>:<span class="string">"sunday"</span>&#125;;</div><div class="line"><span class="comment">//object转josn</span></div><div class="line"><span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(obj);</div><div class="line"><span class="built_in">console</span>.log(str);</div><div class="line"><span class="comment">//josn转object</span></div><div class="line"><span class="keyword">var</span> obj2 = <span class="built_in">JSON</span>.parse(str);</div><div class="line"><span class="built_in">console</span>.log(obj2);</div></pre></td></tr></table></figure>
<h1 id="定时执行"><a href="#定时执行" class="headerlink" title="定时执行"></a>定时执行</h1><p>延迟执行</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="string">'2 seconds!'</span>);</div><div class="line">&#125;,<span class="number">1000</span>);</div><div class="line"></div><div class="line"><span class="comment">//取消定时</span></div><div class="line"><span class="keyword">var</span> timeout = setTimeout(<span class="string">"alert('5 seconds!')"</span>,<span class="number">5000</span>);</div><div class="line">clearTimeout(timeout);</div></pre></td></tr></table></figure>
<p>定时循环执行</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 	定时循环执行</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">3</span>;</div><div class="line"><span class="keyword">var</span> intervalID = <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(i);</div><div class="line">	i-- ;</div><div class="line">	<span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</div><div class="line">		clearTimeout(intervalID);</div><div class="line">	&#125;</div><div class="line">&#125;,<span class="number">1000</span>);</div></pre></td></tr></table></figure>
<h1 id="近似值"><a href="#近似值" class="headerlink" title="近似值"></a>近似值</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 四舍五入</span></div><div class="line"><span class="built_in">Math</span>.round(x)</div><div class="line"></div><div class="line"><span class="comment">// 进一法</span></div><div class="line"><span class="built_in">Math</span>.ceil(x)</div><div class="line"></div><div class="line"><span class="comment">// 去尾法</span></div><div class="line"><span class="built_in">Math</span>.floor(x);</div></pre></td></tr></table></figure>
<h1 id="Img-onerror"><a href="#Img-onerror" class="headerlink" title="Img onerror"></a>Img onerror</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/logo.png"</span> <span class="attr">onerror</span>=<span class="string">"javascript:this.src='images/logoError.png';"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h1 id="打开下载链接"><a href="#打开下载链接" class="headerlink" title="打开下载链接"></a>打开下载链接</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.open(url);</div></pre></td></tr></table></figure>
<h1 id="页面适应窗口"><a href="#页面适应窗口" class="headerlink" title="页面适应窗口"></a>页面适应窗口</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    autoHeight();</div><div class="line">&#125;);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoHeight</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    contentHei = $(<span class="built_in">window</span>).height();</div><div class="line">    $(<span class="string">'.page-sidebar'</span>).height(contentHei);</div><div class="line">    $(<span class="string">'.page-content'</span>).height(contentHei<span class="number">-20</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="scene"><a href="#scene" class="headerlink" title="scene"></a>scene</h1><p>图片加载文成时，设定图片宽高</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">onload</span>=<span class="string">"this.height = this.height;this.width = this.width;"</span> <span class="attr">src</span>=<span class="string">"IMG_1884.JPG"</span> <span class="attr">title</span>=<span class="string">"5646582724.png"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h1 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//阻止事件冒泡</span></div><div class="line">e.stopPropagation();</div><div class="line"><span class="comment">//取消默认行为</span></div><div class="line">e.preventDefault();</div></pre></td></tr></table></figure>
<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>函数外部无法读取函数内的局部变量。<br>定义在一个函数内部的函数。<br>在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>
<h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p><code>doT.js</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 异常终止执行</span></div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"数据映射转换异常!"</span>)</div></pre></td></tr></table></figure>
<h2 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 导出一个模块</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</div></pre></td></tr></table></figure>
<h2 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES6</span></div><div class="line"><span class="keyword">var</span> name1 =<span class="string">"Mike"</span>;</div><div class="line"><span class="keyword">var</span> age1=<span class="number">20</span>;</div><div class="line"><span class="keyword">var</span> message1=<span class="string">`hello,<span class="subst">$&#123;name1&#125;</span>,your age is <span class="subst">$&#123;age1&#125;</span>`</span>;<span class="comment">//同理，这里的两个点是键盘上数字键1左边的按键，而不是单引号哦</span></div><div class="line">alert(message1);</div></pre></td></tr></table></figure>
<h2 id="Shallow-Copy"><a href="#Shallow-Copy" class="headerlink" title="Shallow Copy"></a>Shallow Copy</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Array.concat</span></div><div class="line"><span class="keyword">var</span> alpha = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>],</div><div class="line">numeric = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> alphaNumeric = alpha.concat(numeric);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Array.slice</span></div><div class="line"><span class="keyword">var</span> animals = [<span class="string">'ant'</span>, <span class="string">'bison'</span>, <span class="string">'camel'</span>, <span class="string">'duck'</span>, <span class="string">'elephant'</span>];</div><div class="line">​</div><div class="line"><span class="built_in">console</span>.log(animals.slice());</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Object.assign(target, ...source)</span></div><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</div><div class="line"><span class="keyword">var</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</div></pre></td></tr></table></figure>
<h2 id="Deep-Copy"><a href="#Deep-Copy" class="headerlink" title="Deep Copy"></a>Deep Copy</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// JSON.parse(JSON.stringify(object_array))</span></div><div class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">a</span>:&#123;<span class="attr">b</span>:<span class="number">10</span>&#125;&#125;;</div><div class="line"><span class="keyword">let</span> obj2_string = <span class="built_in">JSON</span>.stringify(obj1);</div><div class="line">​</div><div class="line"><span class="keyword">let</span> obj2 = <span class="built_in">JSON</span>.parse(obj2_string);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Jquery的extend</span></div><div class="line"></div><div class="line"><span class="comment">// Shallow copy</span></div><div class="line"><span class="keyword">var</span> objectIsNew = jQuery.extend(&#123;&#125;, objectIsOld);</div><div class="line"><span class="comment">// Deep copy</span></div><div class="line"><span class="keyword">var</span> objectIsNew = jQuery.extend(<span class="literal">true</span>, &#123;&#125;, objectIsOld);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Lodash</span></div><div class="line"><span class="keyword">var</span> objects = [&#123; <span class="string">'a'</span>: <span class="number">1</span> &#125;, &#123; <span class="string">'b'</span>: <span class="number">2</span> &#125;];</div><div class="line"><span class="keyword">var</span> deep = _.cloneDeep(objects);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL性能优化]]></title>
      <url>http://xiaozhuang.github.io/2016/11/06/mysql_optimization/</url>
      <content type="html"><![CDATA[<p>《性能优化之MySQL优化》课程学习笔记<br><a href="http://www.imooc.com/learn/194/" target="_blank" rel="external">http://www.imooc.com/learn/194/</a><br><a id="more"></a></p>
<h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><p>版本:MySQL5.5<br>实例数据库:sakila database(<a href="http://dev.mysql.com/doc/index-other.html" target="_blank" rel="external">http://dev.mysql.com/doc/index-other.html</a>)</p>
<h1 id="优化目的"><a href="#优化目的" class="headerlink" title="优化目的"></a>优化目的</h1><h2 id="避免出现页面错误"><a href="#避免出现页面错误" class="headerlink" title="避免出现页面错误"></a>避免出现页面错误</h2><ul>
<li>数据库连接超时</li>
<li>慢查询导致无法加载</li>
<li>阻塞造成数据无法提交</li>
</ul>
<h2 id="增加数据库稳定性"><a href="#增加数据库稳定性" class="headerlink" title="增加数据库稳定性"></a>增加数据库稳定性</h2><ul>
<li>很多数据库问题由于低效查询引起</li>
</ul>
<h2 id="优化用户体验"><a href="#优化用户体验" class="headerlink" title="优化用户体验"></a>优化用户体验</h2><ul>
<li>页面访问速度</li>
</ul>
<h1 id="优化途径"><a href="#优化途径" class="headerlink" title="优化途径"></a>优化途径</h1><p>成本：低  –&gt;  高<br>效果：高  –&gt;  低<br>SQL及索引 -&gt; 数据库表结构 -&gt; 系统配置 -&gt; 硬件</p>
<p>系统配置：linux打开文件数配置<br>硬件：CPU、内存、IO</p>
<h1 id="SQL及索引"><a href="#SQL及索引" class="headerlink" title="SQL及索引"></a>SQL及索引</h1><h2 id="发现有问题SQL"><a href="#发现有问题SQL" class="headerlink" title="发现有问题SQL"></a>发现有问题SQL</h2><h3 id="开启慢查询日志"><a href="#开启慢查询日志" class="headerlink" title="开启慢查询日志"></a>开启慢查询日志</h3><p>通过sql开启的慢查询日志，立即生效，重启后不再有效</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 查询日志配置</span></div><div class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%log%'</span></div><div class="line"><span class="comment">-- 慢查询日志是否开启</span></div><div class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'slow_query_log'</span></div><div class="line"><span class="comment">-- 慢查询界定时间</span></div><div class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'long_query_time'</span></div><div class="line"></div><div class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log_file=<span class="string">'e:\\mysql-5.7.11-winx64\\log\\mysql-slow.log'</span></div><div class="line"><span class="comment">-- set global slow_query_log_file='/usr/home/mysql/sql_log/mysql-slow.log'</span></div><div class="line"></div><div class="line"><span class="comment">-- 记录未使用索引的查询</span></div><div class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_queries_not_using_indexes=<span class="keyword">on</span></div><div class="line"></div><div class="line"><span class="comment">-- 1s</span></div><div class="line"><span class="comment">-- 设置long_query_time后，查询获取的long_query_time没变；断开当前mysql回话，重新连接，查询获取的long_query_time，显示设置后值</span></div><div class="line"><span class="keyword">set</span> <span class="keyword">global</span> long_query_time=<span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment">-- 开启慢查询日志</span></div><div class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log=<span class="keyword">on</span></div><div class="line"></div><div class="line"><span class="comment">-- 测试慢查询日志记录</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">sleep</span>(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">-- linux命令，查看日志：tail -50 /usr/home/mysql/sql_log/mysql-slow.log</span></div></pre></td></tr></table></figure>
<h3 id="日志内容"><a href="#日志内容" class="headerlink" title="日志内容"></a>日志内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">执行时间</div><div class="line"># Time: 2016-11-07T13:57:37.774253Z</div><div class="line">执行SQL的主机信息</div><div class="line"># User@Host: root[root] @ localhost [127.0.0.1]  Id:     3</div><div class="line">SQL执行信息</div><div class="line"># Query_time: 0.000000  Lock_time: 0.000000 Rows_sent: 12  Rows_examined: 108</div><div class="line">SQL内容</div><div class="line">use sakila;</div><div class="line">时间戳记录的执行时间</div><div class="line">SET timestamp=1478527057;</div></pre></td></tr></table></figure>
<h3 id="慢查询日志分析工具"><a href="#慢查询日志分析工具" class="headerlink" title="慢查询日志分析工具"></a>慢查询日志分析工具</h3><h4 id="mysqldumpslow"><a href="#mysqldumpslow" class="headerlink" title="mysqldumpslow"></a>mysqldumpslow</h4><p>官方提供，默认安装，统计信息较少</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./mysqldumpslow -t 10 /usr/<span class="built_in">local</span>/mysql-5.7.11-glibc2.5-i686/data/localhost-slow.log</div></pre></td></tr></table></figure>
<p>mysqldumpslow -h 查看帮助<br>-s 排序<br>-t 数量</p>
<h4 id="pt-query-digest"><a href="#pt-query-digest" class="headerlink" title="pt-query-digest"></a>pt-query-digest</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pt-query-digest /usr/<span class="built_in">local</span>/mysql-5.7.11-glibc2.5-i686/data/localhost-slow.log | more</div></pre></td></tr></table></figure>
<h3 id="通过慢查询日志发现有问题的SQL"><a href="#通过慢查询日志发现有问题的SQL" class="headerlink" title="通过慢查询日志发现有问题的SQL"></a>通过慢查询日志发现有问题的SQL</h3><h4 id="查询次数多且占用时间长的SQL"><a href="#查询次数多且占用时间长的SQL" class="headerlink" title="查询次数多且占用时间长的SQL"></a>查询次数多且占用时间长的SQL</h4><p>通常是pt-query-digest分析的前几个SQL</p>
<h4 id="IO大的SQL"><a href="#IO大的SQL" class="headerlink" title="IO大的SQL"></a>IO大的SQL</h4><p>pt-query-digest分析中Row examine项</p>
<h4 id="未命中索引的SQL"><a href="#未命中索引的SQL" class="headerlink" title="未命中索引的SQL"></a>未命中索引的SQL</h4><p>pt-query-digest分析中Row examine和Rows Send的对比</p>
<h1 id="分析SQL和优化"><a href="#分析SQL和优化" class="headerlink" title="分析SQL和优化"></a>分析SQL和优化</h1><p>使用explain，查询SQL的执行计划<br>数据库中，先进行执行计划分析，再进行查询<br>执行计划从侧面反映SQL执行效率</p>
<p>explain返回各列含义：</p>
<ul>
<li>table关于哪个表</li>
<li>type连接使用何种类型，最好到最差的连接类型<br>  const(主键、唯一索引)<br>  eq_ref(主键、唯一索引范围查找)<br>  ref(索引查找)<br>  range(有限制的索引扫描)<br>  index(全索引扫描，按索引次序扫描表)<br>  all(全表扫描)</li>
<li>possible_keys:可能应用的索引</li>
<li>key:实际使用的索引</li>
<li>key_len:使用索引的长度；不损失精确性的情况下，长度越短越好</li>
<li>ref：显示索引的哪一列被使用了，常数最好</li>
<li>rows：表扫描的行数</li>
<li>Extra：<br>  Using filesort：查询需要优化；用到了文件排序，order by从句常见<br>  Using temporary：查询需要优化；对结果排序时用到了临时表，通常发生在对不同列集进行order by上<br>  Using index: 使用覆盖索引<br>  Using where：MySQL服务器在存储引擎检索行后再进行过滤<br>  Using index condition: </li>
</ul>
<p>在日常生活中，我们通过地图软件查询出行方案时，起点和终点之间存在无限种出行方案，甚至可以南辕北辙绕地球一圈后达到终点，地图软件无法穷举所有的出行方案来供用户选择。<br>同理在MySQL解析SQL并生成执行计划时，不会穷举所有可能执行计划，针对多表关联或嵌套子查询等复杂SQL,MySQL在生成一定数量执行计划后便会停止，<br>并在已生成的执行计划中基于成本考虑挑选”相对较优”的执行计划来执行，因此很有可能使用的执行计划不是“最优执行计划”</p>
<h1 id="SQL语句优化"><a href="#SQL语句优化" class="headerlink" title="SQL语句优化"></a>SQL语句优化</h1><h2 id="优化Count-和-Max"><a href="#优化Count-和-Max" class="headerlink" title="优化Count() 和 Max()"></a>优化Count() 和 Max()</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(<span class="string">`payment_date`</span>) <span class="keyword">FROM</span> <span class="string">`payment`</span></div><div class="line"></div><div class="line"><span class="comment">--  在payment_date列，创建索引;</span></div><div class="line"><span class="comment">-- 创建索引后，能够进通过所以查询到结果</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_paydate <span class="keyword">ON</span> payment(<span class="string">`payment_date`</span>)</div><div class="line"></div><div class="line"><span class="comment">-- 查询年份为2006的电影；</span></div><div class="line"><span class="comment">-- `year` = '2016'进行计数，否则返回NULL,count函数不对NULL进行计数</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="string">`year`</span> = <span class="string">'2016'</span> <span class="keyword">OR</span> <span class="literal">NULL</span>) <span class="keyword">FROM</span> t</div></pre></td></tr></table></figure>
<h2 id="子查询优化"><a href="#子查询优化" class="headerlink" title="子查询优化"></a>子查询优化</h2><p>子查询优化为连接查询(join)</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="string">`id`</span>,<span class="string">`year`</span> <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> t_id <span class="keyword">FROM</span> t1)</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> t.<span class="string">`id`</span>,t.<span class="string">`year`</span> <span class="keyword">FROM</span> t <span class="keyword">JOIN</span> t1 <span class="keyword">ON</span> t1.t_id = t.<span class="string">`id`</span></div><div class="line"><span class="comment">-- 存在一对多关系时，查询结果可能存在重复行，使用DISTINCT函数去重</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> t.<span class="string">`id`</span>,t.<span class="string">`year`</span> <span class="keyword">FROM</span> t <span class="keyword">JOIN</span> t1 <span class="keyword">ON</span> t1.t_id = t.<span class="string">`id`</span></div></pre></td></tr></table></figure>
<h2 id="优化limit"><a href="#优化limit" class="headerlink" title="优化limit"></a>优化limit</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- type：All，Extra：Using filesort</span></div><div class="line"><span class="comment">-- 扫描1000行，使用文件排序</span></div><div class="line"><span class="keyword">SELECT</span> <span class="string">`film_id`</span>,<span class="string">`description`</span> <span class="keyword">FROM</span> <span class="string">`film`</span></div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`title`</span> <span class="keyword">LIMIT</span> <span class="number">50</span>,<span class="number">5</span></div><div class="line"></div><div class="line"><span class="comment">-- 使用有索引的列或主键进行order by</span></div><div class="line"><span class="comment">-- type：index</span></div><div class="line"><span class="comment">-- 扫描55行，随之查询靠后，扫描行数变多，效率降低</span></div><div class="line"><span class="keyword">SELECT</span> <span class="string">`film_id`</span>,<span class="string">`description`</span> <span class="keyword">FROM</span> <span class="string">`film`</span></div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`film_id`</span> <span class="keyword">LIMIT</span> <span class="number">50</span>,<span class="number">5</span></div><div class="line"></div><div class="line"><span class="comment">-- 使用主键过滤，避免数据量大时扫描过多的记录</span></div><div class="line"><span class="comment">-- 优化后，扫描行数仅为5行，效率固定</span></div><div class="line"><span class="comment">-- 依赖主键连续</span></div><div class="line"><span class="comment">-- 如果主键不连续，可以添加附加列(如：index_id)，保证附加列连续，并为附加列添加索引</span></div><div class="line"><span class="keyword">SELECT</span> <span class="string">`film_id`</span>,<span class="string">`description`</span></div><div class="line"><span class="keyword">FROM</span> <span class="string">`film`</span></div><div class="line"><span class="keyword">WHERE</span> <span class="string">`film_id`</span> &gt; <span class="number">50</span> <span class="keyword">AND</span> <span class="string">`film_id`</span> &lt;= <span class="number">55</span></div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`film_id`</span> <span class="keyword">LIMIT</span> <span class="number">1</span>,<span class="number">5</span></div></pre></td></tr></table></figure>
<h1 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h1><p>通常为where、group by、order by、on从句中使用列添加索引<br>有时会在select从句中添加索引</p>
<p>索引包含查询中所有列，称为覆盖索引，查询通过索引的获取数据，不用查询表<br>对使用频率高，包含列较少的查询，可使用覆盖索引进行优化</p>
<p>索引字段，越小越好（数据库中，数据以页为单位存储，一页中存储的数据越多，一次IO获取的数据量越大，IO效率越好）</p>
<h2 id="联合索引优化"><a href="#联合索引优化" class="headerlink" title="联合索引优化"></a>联合索引优化</h2><p>联合索引，离散度高的列，放在联合索引的前面</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 离散度判断</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> <span class="string">`customer_id`</span>),<span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> <span class="string">`staff_id`</span>)</div><div class="line"><span class="keyword">FROM</span> <span class="string">`payment`</span></div></pre></td></tr></table></figure>
<h2 id="重复及冗余索引"><a href="#重复及冗余索引" class="headerlink" title="重复及冗余索引"></a>重复及冗余索引</h2><p>查询分析时需要分析使用哪一索引进行查询，索引越多，分析越慢</p>
<p>重复索引：相同列以相同顺序建立的同类型的索引；如primary key和Id列上唯一索引，主键已经是唯一索引。<br>冗余索引：多个索引的前缀相同或联合索引中包含了主键索引；Innodb特性：每个索引都会附加主键，如果联合索引添加了主键，则冗余。</p>
<h3 id="使用工具分析重复和冗余索引"><a href="#使用工具分析重复和冗余索引" class="headerlink" title="使用工具分析重复和冗余索引"></a>使用工具分析重复和冗余索引</h3><p>pt-duplicate-key-checker<br>安装pt-query-digest之后，可以使用</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pt-duplicate-key-checker -uroot -p <span class="string">'123456'</span> -h 127.0.0.1</div><div class="line"></div><div class="line">pt-duplicate-key-checker -uroot -p <span class="string">'123456'</span> -h 127.0.0.1 --database=sakilapt</div></pre></td></tr></table></figure>
<h3 id="删除不用的索引"><a href="#删除不用的索引" class="headerlink" title="删除不用的索引"></a>删除不用的索引</h3><p>通过慢查询日志配合pt-index-usage工具进行索引使用情况的分析</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pt-index-usage -uroot -p <span class="string">'123456'</span> --host 127.0.0.1 /usr/<span class="built_in">local</span>/mysql-5.7.11-glibc2.5-i686/data/localhost-slow.log</div></pre></td></tr></table></figure>
<h1 id="表结构优化"><a href="#表结构优化" class="headerlink" title="表结构优化"></a>表结构优化</h1><p>选择合适的数据类型</p>
<ul>
<li>选择可以存下数据的最小的数据类型</li>
<li>使用简单的数据类型（int比varchar类型简单）</li>
<li>尽可能的使用not null定义字段，并设定默认值（Innodb存储特性，对非not null字段需要额外存储）</li>
<li>尽少使用text类型，非用不可最好分表，通过附加表的方式，提高主表查询效率</li>
</ul>
<h2 id="使用int存储时间"><a href="#使用int存储时间" class="headerlink" title="使用int存储时间"></a>使用int存储时间</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 日期转int</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">UNIX_TIMESTAMP</span>(<span class="string">'2014-06-01 13:12:00'</span>)</div><div class="line"></div><div class="line"><span class="comment">-- int转日期</span></div><div class="line"><span class="keyword">SELECT</span> FROM_UNIXTIME(<span class="string">'1401599520'</span>)</div></pre></td></tr></table></figure>
<h2 id="ip地址存储"><a href="#ip地址存储" class="headerlink" title="ip地址存储"></a>ip地址存储</h2><p>使用bigint存储IP地址，节省空间，查询高效<br>varchar：15字节<br>bigint：7字节</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">INET_ATON</span>(<span class="string">'10.10.60.149'</span>)</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">INET_NTOA</span>(<span class="string">'168443029'</span>)</div></pre></td></tr></table></figure>
<h1 id="范式化"><a href="#范式化" class="headerlink" title="范式化"></a>范式化</h1><p>目前范式化一般指第三范式<br>要求数据表中不存在非关键字段对任意候选关键字段的传递函数依赖</p>
<p>如：<br>    商品名称 -&gt; 分类 -&gt; 分类描述</p>
<p>不满足第三范式，存在的问题：<br>    1.数据冗余<br>    2.插入异常(添加没有商品分类)<br>    3.更新异常(更新分类，更新多列)<br>    4.删除异常(删除全部商品，同时删除了分类)</p>
<p>解决方法：<br>拆分表，产品、分类、关系</p>
<h1 id="反范式化"><a href="#反范式化" class="headerlink" title="反范式化"></a>反范式化</h1><p>反范式化指为提高查询效率，把原本符合第三范式的表适当的增加冗余，已达到优化查询效率的目的。<br>反范式化是一种以空间换取时间的操作。</p>
<h1 id="表垂直拆分"><a href="#表垂直拆分" class="headerlink" title="表垂直拆分"></a>表垂直拆分</h1><p>垂直拆分：把原来一个有很多列的表拆分成多个表，解决表的宽度问题。</p>
<p>垂直拆分原则：</p>
<ul>
<li>不常用的字段单独一个表</li>
<li>大字段单独一个表</li>
<li>经常一起使用的字段放到一起</li>
</ul>
<h1 id="水平拆分"><a href="#水平拆分" class="headerlink" title="水平拆分"></a>水平拆分</h1><p>水平拆分解决单表数据量过大的问题，水平拆分的表每一个表的结构都完全一致。</p>
<p>常用方法：<br>    对id进行hash运算，不同的hashID存到不同的表中。</p>
<p>挑战：<br>    跨分区表进行数据查询<br>    统计及后台报表操作（前台业务使用拆分表，后台业务使用汇总表查询）</p>
<h1 id="系统配置优化"><a href="#系统配置优化" class="headerlink" title="系统配置优化"></a>系统配置优化</h1><h2 id="网络方面配置"><a href="#网络方面配置" class="headerlink" title="网络方面配置"></a>网络方面配置</h2><p>/etc/sysctl.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#增加tcp支持的队列数</div><div class="line">net.ipv4.tcp_max_syn_backlog = 65535</div><div class="line">#减少断开连接时，资源回收</div><div class="line">net.ipv4.tcp_max_tw_buckets = 8000</div><div class="line">net.ipv4.tcp_tw_reuse = 1</div><div class="line">net.ipv4.tcp_fin_timeout = 10</div></pre></td></tr></table></figure>
<h2 id="修改打开文件数限制"><a href="#修改打开文件数限制" class="headerlink" title="修改打开文件数限制"></a>修改打开文件数限制</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#查看目录打开文件数</span></div><div class="line"><span class="built_in">ulimit</span> -a</div></pre></td></tr></table></figure>
<p>修改/etc/security/limits.conf<br>添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* soft nofile 65535 </div><div class="line">* hard nofile 65535</div></pre></td></tr></table></figure>
<p>注：<br>soft nofile：单个用户可用的最大进程数量(软限制)<br>hard nofile：单个用户可用的最大进程数量(硬限制)</p>
<h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><p>关闭iptables、selinux等防火墙软件，使用硬件防火墙代替</p>
<h1 id="MySQL配置优化"><a href="#MySQL配置优化" class="headerlink" title="MySQL配置优化"></a>MySQL配置优化</h1><p>MySQL查找配置文件的顺序<br>如果在多个位置存在配置文件，后面的会覆盖前面的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/mysql/bin/mysqld --verbose --<span class="built_in">help</span> | grep -A 1 <span class="string">'Default options'</span></div></pre></td></tr></table></figure>
<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#innodb缓冲池大小，推荐配置总内存75%</div><div class="line">innodb_buffer_pool_size=128M</div><div class="line"></div><div class="line">#5.5新增配置，innodb缓冲池个数</div><div class="line">innodb_buffer_pool_instances=4</div><div class="line"></div><div class="line">#innodb log缓冲大小</div><div class="line">innodb_log_buffer_size=4M</div><div class="line"></div><div class="line">#数据库多长时间刷新到磁盘</div><div class="line">#1:每次提交刷新到磁盘,保证事务部丢失；</div><div class="line">#2:每次提交刷新到缓冲区，每一秒钟，把缓冲区刷新到磁盘</div><div class="line">#0:每次提交不刷新，每一秒钟刷新到磁盘</div><div class="line">#为了更好IO性能，推荐2</div><div class="line">innodb_flush_logs_at_trx_commit=2</div></pre></td></tr></table></figure>
<h1 id="Fragments"><a href="#Fragments" class="headerlink" title="Fragments"></a>Fragments</h1><h2 id="MySQL-4种int类型"><a href="#MySQL-4种int类型" class="headerlink" title="MySQL 4种int类型"></a>MySQL 4种int类型</h2><ul>
<li>bigint    从 -2^63 (-9223372036854775808) 到 2^63-1 (9223372036854775807) 的整型数据（所有数字）。存储大小为 8 个字节。</li>
<li>int    从-2^31 (-2,147,483,648) 到 2^31 – 1 (2,147,483,647) 的整型数据（所有数字）。存储大小为 4 个字节</li>
<li>smallint    从 -2^15 (-32,768) 到 2^15 – 1 (32,767) 的整型数据。存储大小为 2 个字节。</li>
<li>tinyint    带符号的范围是-128到127。无符号的范围是0到255。存储大小为 1 字节。</li>
</ul>
<h2 id="向日期添加指定的时间间隔"><a href="#向日期添加指定的时间间隔" class="headerlink" title="向日期添加指定的时间间隔"></a>向日期添加指定的时间间隔</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="keyword">now</span>(), <span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">day</span>); <span class="comment">--加1天</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="keyword">now</span>(), <span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">hour</span>); <span class="comment">--加1小时</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="keyword">now</span>(), <span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">minute</span>); <span class="comment">--加1分钟</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="keyword">now</span>(), <span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">second</span>); <span class="comment">--加1秒</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="keyword">now</span>(), <span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">microsecond</span>); <span class="comment">--加1毫秒</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="keyword">now</span>(), <span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">week</span>); <span class="comment">--加1周</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="keyword">now</span>(), <span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">month</span>); <span class="comment">--加1月</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="keyword">now</span>(), <span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">quarter</span>); <span class="comment">--加1季</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="keyword">now</span>(), <span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">year</span>); <span class="comment">--加1年</span></div><div class="line"></div><div class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="keyword">now</span>(), <span class="built_in">interval</span> <span class="number">-1</span> <span class="keyword">year</span>); <span class="comment">--减1年</span></div></pre></td></tr></table></figure>
<h2 id="同一张表，两个TIMESTAMP字段，表创建报错"><a href="#同一张表，两个TIMESTAMP字段，表创建报错" class="headerlink" title="同一张表，两个TIMESTAMP字段，表创建报错"></a>同一张表，两个TIMESTAMP字段，表创建报错</h2><p>MySQL5.6可以创建多个timestamps字段（未验证）<br><a href="http://stackoverflow.com/questions/4851672/one-mysql-table-with-multiple-timestamp-columns" target="_blank" rel="external">http://stackoverflow.com/questions/4851672/one-mysql-table-with-multiple-timestamp-columns</a><br>With MySQL 5.6.5 multiple timestamps can be independently controlled in one table so the rules for this have changed.</p>
<p>MySQL5.7.11，无法创建两个timestamps字段<br>In addition, you can initialize or update any TIMESTAMP column to the current date and time by assigning it a NULL value, unless it has been defined with the NULL attribute to permit NULL values.</p>
<h1 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h1><p>数据库事务具备ACID特征</p>
<ul>
<li>原子性</li>
<li>一致性</li>
<li>隔离性</li>
<li>持久性</li>
</ul>
<h1 id="Innodb中的事务隔离级别和锁"><a href="#Innodb中的事务隔离级别和锁" class="headerlink" title="Innodb中的事务隔离级别和锁"></a>Innodb中的事务隔离级别和锁</h1><p>InnoDB存储引擎既支持行级锁（row-level locking），也支持表级锁，但默认情况下是采用行级锁。</p>
<blockquote>
<p>数据库为了维护这些性质，尤其是一致性和隔离性，一般使用加锁这种方式。</p>
</blockquote>
<h2 id="两段锁"><a href="#两段锁" class="headerlink" title="两段锁"></a>两段锁</h2><p>数据库遵循的是两段锁协议，将事务分成两个阶段，<code>加锁阶段</code>和<code>解锁阶段</code>（所以叫两段锁）。<br>加锁阶段：在该阶段可以进行加锁操作。<br>在对任何数据进行读操作之前要申请并获得S锁（共享锁，其它事务可以继续加共享锁，但不能加排它锁）;<br>在进行写操作之前要申请并获得X锁（排它锁，其它事务不能再获得任何锁）。<br>加锁不成功，则事务进入等待状态，直到加锁成功才继续执行。<br>解锁阶段：当事务释放了一个封锁以后，事务进入解锁阶段，在该阶段只能进行解锁操作不能再进行加锁操作。</p>
<table>
<thead>
<tr>
<th>事务</th>
<th>加锁/解锁处理</th>
</tr>
</thead>
<tbody>
<tr>
<td>begin;</td>
<td></td>
</tr>
<tr>
<td>insert into test …..</td>
<td>加insert对应的锁</td>
</tr>
<tr>
<td>update test set…</td>
<td>加update对应的锁</td>
</tr>
<tr>
<td>delete from test ….</td>
<td>加delete对应的锁</td>
</tr>
<tr>
<td>commit;</td>
<td></td>
</tr>
</tbody>
</table>
<p>两段锁协议可以保证事务的并发调度是串行化的。</p>
<h2 id="事务的四种隔离级别"><a href="#事务的四种隔离级别" class="headerlink" title="事务的四种隔离级别"></a>事务的四种隔离级别</h2><p>效保证并发读取数据的正确性，提出的事务隔离级别。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">-- 查看当前会话隔离级别</span></div><div class="line"><span class="keyword">select</span> @@tx_isolation;</div><div class="line"></div><div class="line"><span class="comment">-- 查看系统当前隔离级别</span></div><div class="line"><span class="keyword">select</span> @@global.tx_isolation;</div><div class="line"></div><div class="line"><span class="comment">-- 设置当前会话隔离级别</span></div><div class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> isolatin <span class="keyword">level</span> repeatable <span class="keyword">read</span>;</div><div class="line"><span class="comment">-- 设置系统当前隔离级别</span></div><div class="line"><span class="keyword">set</span> <span class="keyword">global</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> repeatable <span class="keyword">read</span>;</div></pre></td></tr></table></figure>
<h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>SELECT … LOCK IN SHARE MODE</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">parent</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'Jones'</span> <span class="keyword">LOCK</span> <span class="keyword">IN</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span>;</div></pre></td></tr></table></figure>
<p>SELECT … FOR UPDATE</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> counter_field <span class="keyword">FROM</span> child_codes <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</div><div class="line"><span class="keyword">UPDATE</span> child_codes <span class="keyword">SET</span> counter_field = counter_field + <span class="number">1</span>;</div></pre></td></tr></table></figure>
<h1 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h1><h2 id="tinyint"><a href="#tinyint" class="headerlink" title="tinyint"></a>tinyint</h2><p>tinyint存储只是用一个字节,就是8位,只能存储2^8个数字,也就是256个数字,<br>在mysql实现中,有符号是-128-127,无符号是0-255</p>
<p>tinyint后面的括号带的数字,以后称之为M,<br>和存贮的值没有任何关系,只是在某些情况下和显示的宽度有关系</p>
<p>M其实没用,tinyint默认是4,其余的也有默认值,以后程序开发中,<br>涉及整形数字的M时,可以不必纠结,直接忽略,最后使用数据库默认的M值即可</p>
<h1 id="ICP"><a href="#ICP" class="headerlink" title="ICP"></a>ICP</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span> @@optimizer_switch = <span class="string">"index_condition_pushdown=on"</span></div><div class="line"></div><div class="line"><span class="keyword">set</span> @@optimizer_switch = <span class="string">"index_condition_pushdown=off"</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL5.7 Note]]></title>
      <url>http://xiaozhuang.github.io/2016/09/17/MySQL5-7-note/</url>
      <content type="html"><![CDATA[<p>MySQL5.7安装及新特性<br><a id="more"></a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="windows版"><a href="#windows版" class="headerlink" title="windows版"></a>windows版</h2><p>系统：win7x64安装<br>MySQL：5.7.15</p>
<h3 id="解压mysql-5-7-15-winx64-zip"><a href="#解压mysql-5-7-15-winx64-zip" class="headerlink" title="解压mysql-5.7.15-winx64.zip"></a>解压mysql-5.7.15-winx64.zip</h3><h3 id="复制my-default-ini命名为my-ini，创建保存数据data文件夹"><a href="#复制my-default-ini命名为my-ini，创建保存数据data文件夹" class="headerlink" title="复制my-default.ini命名为my.ini，创建保存数据data文件夹"></a>复制my-default.ini命名为my.ini，创建保存数据data文件夹</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#修改配置</span></div><div class="line">[client]</div><div class="line">default-character-set=utf8</div><div class="line"></div><div class="line">[mysqld]</div><div class="line">basedir = <span class="string">"E:\mysql-5.7.15-winx64"</span></div><div class="line">datadir = <span class="string">"E:\mysql-5.7.15-winx64\data"</span></div><div class="line">port = 3308</div><div class="line">server_id = 3308</div></pre></td></tr></table></figure>
<h3 id="管理员运行cmd，进入mysql下bin目录，初试化数据"><a href="#管理员运行cmd，进入mysql下bin目录，初试化数据" class="headerlink" title="管理员运行cmd，进入mysql下bin目录，初试化数据"></a>管理员运行cmd，进入mysql下bin目录，初试化数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqld --initialize-insecure</div></pre></td></tr></table></figure>
<h3 id="安装MySQL为windows服务"><a href="#安装MySQL为windows服务" class="headerlink" title="安装MySQL为windows服务"></a>安装MySQL为windows服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mysqld install</div><div class="line">mysqld --install &lt;server_name&gt;</div><div class="line">mysqld --install MySQL5.7.11-3307</div><div class="line"></div><div class="line"><span class="comment"># 一台机器，安装多个MySQL</span></div><div class="line">mysqld --install MySQL5.6.26:3306-SSD  --defaults-file=<span class="string">"C:\Program Files\mysql-5.6.26-winx64\3306\my.ini"</span></div><div class="line">mysqld --install MySQL5.6.26:3307-SSD  --defaults-file=<span class="string">"C:\Program Files\mysql-5.6.26-winx64\3307\my.ini"</span></div><div class="line"></div><div class="line"><span class="comment">#卸载mysql的windows服务命令：</span></div><div class="line">mysqld --remove</div><div class="line">mysqld --remove &lt;server_name&gt;</div><div class="line">mysqld --remove MySQL5.7.11-3307</div></pre></td></tr></table></figure>
<h3 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net start &lt;server_name&gt;</div></pre></td></tr></table></figure>
<h3 id="将mysql添加到系统环境变量"><a href="#将mysql添加到系统环境变量" class="headerlink" title="将mysql添加到系统环境变量"></a>将mysql添加到系统环境变量</h3><p>添加path环境变量添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">;%MYSQL_HOME%\bin</div></pre></td></tr></table></figure>
<p>添加系统环境变量MYSQL_HOME，指向mysql根目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">E:\mysql-5.7.15-winx64</div></pre></td></tr></table></figure>
<p>注：<br>与Linux版MySQL5.7不同，windows版MySQL5.7不会初试化随机密码<br>windows版MySQL5.7安装完成后，密码为空</p>
<h2 id="Linux版"><a href="#Linux版" class="headerlink" title="Linux版"></a>Linux版</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#解压</span></div><div class="line">tar -xzvf mysql-5.7.16-linux-glibc2.5-x86_64.tar.gz</div><div class="line"></div><div class="line"><span class="comment">#移动到usr/local</span></div><div class="line">mv mysql-5.7.16-linux-glibc2.5-x86_64 /usr/<span class="built_in">local</span>/mysql-5.7.11-glibc2.5-i686</div><div class="line"></div><div class="line"><span class="comment">#创建软链接后，可以使用/usr/local/mysql/support-files/mysql.server 启动</span></div><div class="line">ln -s mysql-5.7.11-glibc2.5-i686 mysql</div><div class="line"></div><div class="line"><span class="comment">#创建mysql用户</span></div><div class="line">useradd -s /sbin/nologin mysql</div><div class="line">chown -R mysql:mysql /usr/<span class="built_in">local</span>/mysql-5.7.11-glibc2.5-i686</div><div class="line">usermod -s /bin/bash mysql</div><div class="line"></div><div class="line"><span class="comment">#安装MySQL依赖库libaio</span></div><div class="line">yum install libaio</div><div class="line"></div><div class="line"><span class="comment">#MySQL5.7使用mysqld初试化，初试化完成后，输出中包含随机生成的root用户密码</span></div><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql/</div><div class="line">bin/mysqld --initialize --user=mysql --basedir=/usr/<span class="built_in">local</span>/mysql --datadir=/usr/<span class="built_in">local</span>/mysql/date</div><div class="line"></div><div class="line"><span class="comment">#启动</span></div><div class="line">nohup bin/mysqld_safe --defaults-file=./my.cnf &gt; /dev/null 2&gt;&amp;1 &amp;</div><div class="line"><span class="comment">#或</span></div><div class="line">/usr/<span class="built_in">local</span>/mysql/support-files/mysql.server start</div><div class="line"></div><div class="line"><span class="comment">#解决mysql.server start启动后mysql -uroot -p 连接报错：</span></div><div class="line"><span class="comment">#ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2)</span></div><div class="line">ln -s /var/lib/mysql/mysql.sock   /tmp/mysql.sock</div><div class="line"></div><div class="line"><span class="comment">#查询配置文件加载顺序</span></div><div class="line"><span class="comment">#/usr/local/mysql/bin/mysqld --verbose --help | grep -A 1 'Default options'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#重置密码：SQL</span></div><div class="line"><span class="comment">#set password for 'root'@'localhost'=password('123456');</span></div><div class="line"></div><div class="line"><span class="comment"># 允许远程连接：--SQL</span></div><div class="line">use mysql;</div><div class="line">update user <span class="built_in">set</span> Host=<span class="string">'%'</span> <span class="built_in">where</span> User =<span class="string">'root'</span> <span class="built_in">limit</span> 1;</div><div class="line">flush privileges;</div><div class="line"><span class="comment">#或--SQL</span></div><div class="line">use mysql;</div><div class="line">Grant all on *.* to <span class="string">'root'</span>@<span class="string">'%'</span> identified by <span class="string">'root用户的密码'</span> with grant option;</div><div class="line">flush privileges;</div><div class="line"></div><div class="line"><span class="comment"># 打开3306</span></div><div class="line">/sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT</div><div class="line">/etc/rc.d/init.d/iptables save</div><div class="line">/etc/init.d/iptables status</div></pre></td></tr></table></figure>
<p>注：<br>    CentOS版MySQL</p>
<h3 id="命令行登录"><a href="#命令行登录" class="headerlink" title="命令行登录"></a>命令行登录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div><div class="line"><span class="comment">#或</span></div><div class="line">mysql -uroot -p</div><div class="line"><span class="comment">#或</span></div><div class="line">mysql --user=root --password=123456</div></pre></td></tr></table></figure>
<h1 id="MySQL5-7新特性"><a href="#MySQL5-7新特性" class="headerlink" title="MySQL5.7新特性"></a>MySQL5.7新特性</h1><h2 id="功能增强"><a href="#功能增强" class="headerlink" title="功能增强"></a>功能增强</h2><ul>
<li>数据库初试化方式变更</li>
<li>表增加计算列</li>
<li>引入JSON列类型及相关函数</li>
</ul>
<h2 id="支持计算列"><a href="#支持计算列" class="headerlink" title="支持计算列"></a>支持计算列</h2><p>通过触发器实现计算列</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 插入触发器</span></div><div class="line">DELIMITER $$</div><div class="line"><span class="keyword">CREATE</span></div><div class="line">    <span class="keyword">TRIGGER</span> <span class="string">`sakila`</span>.<span class="string">`inst_t`</span> <span class="keyword">BEFORE</span> <span class="keyword">INSERT</span></div><div class="line">    <span class="keyword">ON</span> <span class="string">`sakila`</span>.<span class="string">`t4`</span></div><div class="line">    <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">BEGIN</span></div><div class="line">    <span class="keyword">SET</span> new.c3 = new.c1 + new.c2;</div><div class="line">    <span class="keyword">END</span>$$</div><div class="line"></div><div class="line">DELIMITER ;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">--更新触发器</span></div><div class="line">DELIMITER $$</div><div class="line"><span class="keyword">CREATE</span></div><div class="line">    <span class="keyword">TRIGGER</span> <span class="string">`sakila`</span>.<span class="string">`upd_t4`</span> <span class="keyword">BEFORE</span> <span class="keyword">UPDATE</span></div><div class="line">    <span class="keyword">ON</span> <span class="string">`sakila`</span>.<span class="string">`t4`</span></div><div class="line">    <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">BEGIN</span></div><div class="line">    <span class="keyword">SET</span> new.c3 = new.c2 + new.c1;</div><div class="line">    <span class="keyword">END</span>$$</div><div class="line"></div><div class="line">DELIMITER ;</div></pre></td></tr></table></figure>
<p>通过视图实现计算列</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span></div><div class="line">    <span class="keyword">VIEW</span> <span class="string">`sakila`</span>.<span class="string">`vw_t4`</span> </div><div class="line">    <span class="keyword">AS</span></div><div class="line">(<span class="keyword">SELECT</span> c1,c2,c1+c2 <span class="keyword">AS</span> c3 <span class="keyword">FROM</span> t4);</div></pre></td></tr></table></figure>
<p>触发器和视图会影响效率</p>
<p>MySQL5.7计算列</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sakila`</span>.<span class="string">`t4`</span>(		<span class="comment">/* 未指定表名 */</span>  </div><div class="line">  <span class="string">`id`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`c1`</span> <span class="built_in">INT</span>,</div><div class="line">  <span class="string">`c2`</span> <span class="built_in">INT</span>,</div><div class="line">  <span class="string">`c3`</span> <span class="built_in">INT</span> <span class="keyword">AS</span> (c1 + c2),</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><ul>
<li>master 创建主从复制用户</li>
<li>master 备份数据</li>
<li>slaver 恢复数据，并制定日志和日志点</li>
</ul>
<h2 id="创建复制用户"><a href="#创建复制用户" class="headerlink" title="创建复制用户"></a>创建复制用户</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 查现有用户</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">user</span>,host <span class="keyword">from</span> mysql.user;</div><div class="line"><span class="comment">-- 创建主从复制用户</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'dba'</span>@<span class="string">'192.168.117.%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'123456'</span>;</div><div class="line"><span class="keyword">grant</span> <span class="keyword">replication</span> <span class="keyword">slave</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'dba'</span>@<span class="string">'192.168.117.%'</span>;</div></pre></td></tr></table></figure>
<h2 id="主数据备份"><a href="#主数据备份" class="headerlink" title="主数据备份"></a>主数据备份</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#数据备份</span></div><div class="line">mysqldump --single-transaction --master-data=2 --triggers --routines --all-databases -uroot -p &gt; all.sql</div><div class="line"><span class="comment"># 拷贝到从服务器</span></div><div class="line">scp all.sql root@192.168.117.133:/tmp</div></pre></td></tr></table></figure>
<p>数据备份报错：mysqldump: Error: Binlogging on server not active<br>my.conf配置文件中添加，重启mysql</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">server_id = 128</div><div class="line">log_bin=mysql-bin</div></pre></td></tr></table></figure>
<h2 id="从恢复数据并开启同步"><a href="#从恢复数据并开启同步" class="headerlink" title="从恢复数据并开启同步"></a>从恢复数据并开启同步</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 恢复数据</span></div><div class="line">mysql -uroot -p &lt; all.sql</div><div class="line"><span class="comment">#从备份文件中获取日志文件和日志点信息</span></div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 设定主节点</span></div><div class="line"><span class="keyword">change</span> <span class="keyword">master</span> <span class="keyword">to</span> master_host=<span class="string">'192.168.117.128'</span>, master_user=<span class="string">'dba'</span>, master_password=<span class="string">'123456'</span>, master_log_file=<span class="string">'mysql-bin.000001'</span>, master_log_pos=<span class="number">154</span>;</div><div class="line"></div><div class="line"><span class="comment">-- 查看同步配置信息和状态</span></div><div class="line"><span class="keyword">show</span> <span class="keyword">slave</span> <span class="keyword">status</span>\G</div></pre></td></tr></table></figure>
<blockquote>
<p>未开启同步时状态<br>Slave_IO_Running: No<br>Slave_SQL_Running: No</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 开启主从同步</span></div><div class="line"><span class="keyword">start</span> <span class="keyword">slave</span>;</div><div class="line"><span class="comment">-- 停止主从同步</span></div><div class="line"><span class="comment">-- stop slave;</span></div></pre></td></tr></table></figure>
<p>同步状态信息报错<br>Last_IO_Error: Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work.<br>因虚拟机拷贝mysql/data/auto.cnf中server-uuid一样</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 移除auto.cnf，重启mysql会重新生成auto.cnf文件</span></div><div class="line">mv auto.cnf auto.cnf.bak</div><div class="line"><span class="comment"># 重启mysql后，主从同步正常</span></div></pre></td></tr></table></figure>
<p>同步状态中Slave_IO_Running，Slave_SQL_Running同时为yes，表示同步正常</p>
<h2 id="MySQL5-7主从管理视图"><a href="#MySQL5-7主从管理视图" class="headerlink" title="MySQL5.7主从管理视图"></a>MySQL5.7主从管理视图</h2><p>performance_schema 数据库中</p>
<p>复制链路延迟配置：<br>replication_applier_configuration</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">replication_applier_configuration       </div><div class="line">replication_applier_status              </div><div class="line">replication_applier_status_by_coordinator </div><div class="line">replication_applier_status_by_worker    </div><div class="line">replication_connection_configuration    </div><div class="line">replication_connection_status           </div><div class="line">replication_group_member_stats          </div><div class="line">replication_group_members</div></pre></td></tr></table></figure>
<h1 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h1><h2 id="MySQL-Window服务启动失败1053"><a href="#MySQL-Window服务启动失败1053" class="headerlink" title="MySQL Window服务启动失败1053"></a>MySQL Window服务启动失败1053</h2><p>1053错误是服务应答超时</p>
<p>服务列表，双击服务，打开服务属性窗口<br>停止服务，重新启动p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git Note]]></title>
      <url>http://xiaozhuang.github.io/2016/08/21/git-note/</url>
      <content type="html"><![CDATA[<p>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br><a id="more"></a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>配置用户名和邮箱</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"Your Name"</span></div><div class="line">git config --global user.email <span class="string">"email@example.com"</span></div><div class="line"></div><div class="line">git config --global push.default current</div><div class="line"><span class="comment"># 查看当前仓库配置</span></div><div class="line">git config -l</div></pre></td></tr></table></figure>
<p>注意git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来</p>
<p>通过git init命令把这个目录变成Git可以管理的仓库</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#初试化版本库</span></div><div class="line">git init</div><div class="line"></div><div class="line"><span class="comment">#添加文件到版本库</span></div><div class="line">git add readme.txt</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#提交文件到仓库</span></div><div class="line"><span class="comment">#添加需要提交的文件</span></div><div class="line">git add readme.txt file2.txt</div><div class="line">git commit -m <span class="string">"wrote a readme file"</span></div></pre></td></tr></table></figure>
<h2 id="查看版本库当前状态"><a href="#查看版本库当前状态" class="headerlink" title="查看版本库当前状态"></a>查看版本库当前状态</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git status</div><div class="line"></div><div class="line"><span class="comment">#查看变化内容</span></div><div class="line">git diff</div><div class="line">git diff filename</div></pre></td></tr></table></figure>
<h2 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span></div><div class="line">git <span class="built_in">log</span> --pretty=oneline --abbrev-commit</div><div class="line"></div><div class="line"><span class="comment"># 查看指定目录、文件日志</span></div><div class="line">git <span class="built_in">log</span> &lt;file&gt;</div><div class="line"></div><div class="line"><span class="comment"># 查看分支日志</span></div><div class="line">git <span class="built_in">log</span> &lt;branch-name&gt;</div></pre></td></tr></table></figure>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>当丢弃本地未push到远程的提交时，使用git reset<br>当想对远程提交进行回滚时，使用<code>git revert</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#回退上一个版本</span></div><div class="line">git reset --hard HEAD^</div><div class="line"></div><div class="line"><span class="comment">#上上个版本</span></div><div class="line">git reset --hard HEAD^^</div><div class="line"></div><div class="line"><span class="comment">#往上100个版本</span></div><div class="line">git reset --hard HEAD~100</div><div class="line"></div><div class="line"><span class="comment">#会到指定版本，指定版本的前几位就可以</span></div><div class="line">git reset --hard 83ad53ca16e</div><div class="line"></div><div class="line"><span class="comment"># --soft Does not touch the index file or the working tree at all (but resets the head to &lt;commit&gt;, just like all modes do). This leaves all your changed files "Changes to be committed", as git status would put it.</span></div><div class="line"><span class="comment"># --mixed Resets the index but not the working tree (i.e., the changed files are preserved but not marked for commit) and reports what has not been updated. This is the default action.</span></div><div class="line"><span class="comment"># --hard Resets the index and working tree. Any changes to tracked files in the working tree since &lt;commit&gt; are discarded.</span></div><div class="line">git reset --soft --hard 83ad53ca16e</div><div class="line">git reset --mixed --hard 83ad53ca16e</div><div class="line">git reset --hard --hard 83ad53ca16e</div><div class="line"></div><div class="line"><span class="comment"># 回退到远程分支对映版本</span></div><div class="line">git reset --hard origin/dev</div><div class="line"></div><div class="line"><span class="comment"># 查看远程分支创建人</span></div><div class="line">git <span class="keyword">for</span>-each-ref --format=<span class="string">'%09 %(authorname) %09 %(refname)'</span> | sort </div><div class="line">git <span class="keyword">for</span>-each-ref --format=<span class="string">'%09 %(authorname) %(committerdate) %09 %(refname)'</span> | sort</div><div class="line"></div><div class="line"><span class="comment">#命令执行记录和版本id</span></div><div class="line">git reflog</div><div class="line"></div><div class="line"><span class="comment"># Revert commit 撤销  一个提交  的同时会创建一个新的提交。这是一个安全的方法，因为它不会重写提交历史。</span></div><div class="line">git revert --hard 83ad53ca16e</div><div class="line"></div><div class="line"><span class="comment"># Revert mergec</span></div><div class="line"><span class="comment"># commit d875c3f063e046e407eeca3404d875dff75b2fc3</span></div><div class="line"><span class="comment"># Merge: ee4e380 4141e45</span></div><div class="line"><span class="comment"># Author: wangdianzhuang &lt;wangdianzhuang@jd.com&gt;</span></div><div class="line"><span class="comment"># Date:   Mon Dec 11 20:03:04 2017 +0800</span></div><div class="line"><span class="comment"># Merge branch 'master' of git.jd.com:wangdianzhuang/git-test into dev</span></div><div class="line"></div><div class="line"><span class="comment"># -m 1，撤销到 ee4e380 所代表的commit,撤销该commit造成的修改</span></div><div class="line">git revert -m 1 --hard d875c3f063e046e407eeca3404d875dff75b2fc3</div></pre></td></tr></table></figure>
<h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><p>工作区（Working Directory）：git版本控制的目录。</p>
<p>版本库（Repository）：git版本控制目录下的git文件夹。<br>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，<br>还有Git为我们自动创建的第一个分支master，<br>以及指向master的一个指针叫HEAD</p>
<p>把文件往Git版本库里，分两步执行：</p>
<ul>
<li>用git add把文件添加进去，实际上就是把文件修改添加到暂存区</li>
<li>用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#将文件移出暂存区（add 反向操作）</span></div><div class="line">git reset head &lt;file&gt;</div></pre></td></tr></table></figure>
<h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><p><code>为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看工作区和版本库中最新版本区别</span></div><div class="line">git diff HEAD -- readme.txt</div></pre></td></tr></table></figure>
<h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 丢弃工作区的修改,回到最近一次git commit或git add时的状态,其实是用版本库里的版本替换工作区的版本</span></div><div class="line">git checkout -- readme.txt</div></pre></td></tr></table></figure>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。<br>每台机器的版本库其实都是一样的，并没有主次之分。</p>
<h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@github.com:xiaozhuang/note.git</div><div class="line"></div><div class="line"><span class="comment"># 添加多个远程仓库,远程仓库名称不同</span></div><div class="line">git remote add self git@git.jd.com:wangdianzhuang/note.git</div><div class="line"></div><div class="line"><span class="comment"># 修改远程仓库</span></div><div class="line">git remote <span class="built_in">set</span>-url origin http://git.jd.com/waybill-team/wes2.git</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 移除远程仓库</span></div><div class="line">git remote rm origin</div><div class="line"></div><div class="line"><span class="comment"># git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span></div><div class="line">git push origin master:master</div><div class="line"></div><div class="line"><span class="comment"># 本地仓库推送至远程仓库，远程库的名字是origin</span></div><div class="line"><span class="comment"># -u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起</span></div><div class="line">git push -u origin master</div><div class="line"></div><div class="line">git push origin master</div><div class="line"></div><div class="line"><span class="comment">#获取远程分支更新</span></div><div class="line"><span class="comment"># git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span></div><div class="line"><span class="comment"># 远程分支devgit与当前分支合并</span></div><div class="line">git pull origin devgit</div><div class="line"> </div><div class="line"><span class="comment"># 本地分支与远程分支关联</span></div><div class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/devtest devtest</div></pre></td></tr></table></figure>
<h3 id="Updates-were-rejected-because-the-remote-contains-work-that-you-do"><a href="#Updates-were-rejected-because-the-remote-contains-work-that-you-do" class="headerlink" title="Updates were rejected because the remote contains work that you do"></a>Updates were rejected because the remote contains work that you do</h3><p>执行命令git push -u origin master</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#原因：远程仓库比本地仓库新</span></div><div class="line">git pull origin master --allow-unrelated-histories</div><div class="line"><span class="comment"># 再执行</span></div><div class="line">git push -u origin master</div><div class="line"></div><div class="line"><span class="comment">#推送分支至远程仓库</span></div><div class="line"><span class="comment">#The remote branch is automatically created when you push it to the remote server</span></div><div class="line"><span class="comment">#git push &lt;remote-name&gt; &lt;branch-name&gt;</span></div><div class="line"><span class="comment">#git push &lt;remote-name&gt; &lt;local-branch-name&gt;:&lt;remote-branch-name&gt;</span></div><div class="line">git push -u origin dev</div></pre></td></tr></table></figure>
<h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p>
<p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p>
<h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><p> gh-pages分支是GitHub Page 的默认分支</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#查看分支</span></div><div class="line">git branch</div><div class="line"><span class="comment"># 查看远程分支</span></div><div class="line">git branch -r</div><div class="line"><span class="comment"># 查看全部分支</span></div><div class="line">git branch -a</div><div class="line"></div><div class="line"><span class="comment">#创建并切换至新分支</span></div><div class="line"><span class="comment">#相当于git branch dev  &amp;&amp;　git checkout dev</span></div><div class="line">git checkout -b dev</div><div class="line"></div><div class="line"><span class="comment"># 分支重命名</span></div><div class="line">git branch -m &lt;oldname&gt; &lt;newname&gt;</div><div class="line"><span class="comment"># rename the current branch</span></div><div class="line">git branch -m &lt;newname&gt;</div><div class="line"></div><div class="line"><span class="comment">#提交内容到新分支</span></div><div class="line">git add readme.txt </div><div class="line"><span class="comment"># 提交</span></div><div class="line">git commit -m <span class="string">"branch test"</span></div><div class="line"><span class="comment"># 提交并添加多行提交信息</span></div><div class="line">git commit</div><div class="line"></div><div class="line"><span class="comment"># 修改注释</span></div><div class="line">git commit --amend</div><div class="line"><span class="comment">#切换回master分支</span></div><div class="line">git checkout master</div><div class="line">git checkout - <span class="comment">#切换至上一个分支</span></div><div class="line"></div><div class="line"><span class="comment">#把dev分支的工作成果合并到master分支</span></div><div class="line"><span class="comment">#git merge命令用于合并指定分支到当前分支。</span></div><div class="line">git merge dev</div><div class="line"><span class="comment"># 解决冲突</span></div><div class="line"></div><div class="line"><span class="comment">#删除分支</span></div><div class="line">git branch -d dev</div><div class="line"></div><div class="line"><span class="comment">#删除远程分支(推送空分支到远程分支)</span></div><div class="line">git push origin :&lt;branchName&gt;</div><div class="line"></div><div class="line"><span class="comment"># 直接删除远程分支</span></div><div class="line">git push origin --delete &lt;branchName&gt;</div></pre></td></tr></table></figure>
<h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge feature1</div></pre></td></tr></table></figure>
<blockquote>
<p>Auto-merging readme.txt<br>CONFLICT (content): Merge conflict in readme.txt<br>Automatic merge failed; fix conflicts and then commit the result.</p>
</blockquote>
<p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改如下后保存</p>
<p>再提交：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git add readme.txt </div><div class="line">git commit -m <span class="string">"conflict fixed"</span></div></pre></td></tr></table></figure>
<p>查看分支合并图</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</div><div class="line">git <span class="built_in">log</span> --graph</div></pre></td></tr></table></figure>
<p>撤销merge</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard HEAD</div></pre></td></tr></table></figure>
<h1 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h1><h2 id="禁用Fast-forward模式"><a href="#禁用Fast-forward模式" class="headerlink" title="禁用Fast forward模式"></a>禁用Fast forward模式</h2><p>禁用Fast forward模式，Git就会在merge时生成一个新的commit<br>合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge dev --no-ff -m <span class="string">"merge with no-ff"</span></div></pre></td></tr></table></figure>
<h2 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h2><p>master分支应该是非常稳定的，也就是仅用来发布新版本。<br>干活都在dev分支上，也就是说，dev分支是不稳定的<br>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了</p>
<h1 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h1><p>bug分支命名<code>bugfix-xx</code><br>每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。</p>
<p>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交</p>
<p>内容未提交无法切换分支</p>
<p>Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#存储工作现场</span></div><div class="line">git stash</div><div class="line"></div><div class="line"><span class="comment">#切换分支，修复bug</span></div><div class="line"><span class="comment">#...</span></div><div class="line"></div><div class="line"><span class="comment">#查看恢复stash内容</span></div><div class="line">git stash list</div><div class="line"></div><div class="line"><span class="comment">#恢复stash内容</span></div><div class="line">git stash apply	<span class="comment">#恢复后，stash内容并不删除</span></div><div class="line">git stash drop <span class="comment">#删除stash内容</span></div><div class="line"><span class="comment">#或</span></div><div class="line">git stash pop <span class="comment">#恢复stash内容，同时把stash内容删除</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash</span></div><div class="line">git stash apply stash@&#123;0&#125;</div></pre></td></tr></table></figure>
<h1 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h1><p>分支命名<code>feature-xxx</code><br>每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p>
<h1 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h1><p>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#查看远程库的信息</span></div><div class="line">git remote</div><div class="line"></div><div class="line"><span class="comment">#查看远程仓库地址</span></div><div class="line">git remote -v</div><div class="line"></div><div class="line"><span class="comment">#推送分支，分支上的所有本地提交推送到远程库</span></div><div class="line">git push origin master</div><div class="line"><span class="comment">#强制推送到远程</span></div><div class="line">git push -f origin master</div><div class="line"></div><div class="line"><span class="comment">#检出远程分支</span></div><div class="line">git checkout -b dev origin/dev</div></pre></td></tr></table></figure>
<ul>
<li>master分支是主分支，因此要时刻与远程同步；</li>
<li>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li>
<li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li>
<li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li>
</ul>
<h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><p>Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动）</p>
<p>tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起</p>
<h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">git tag v1.0</div><div class="line"></div><div class="line"><span class="comment">#查看所有标签</span></div><div class="line">git tag</div><div class="line"></div><div class="line"><span class="comment">#在历史提交记录中添加标签</span></div><div class="line"><span class="comment"># 查看提交记录</span></div><div class="line">git <span class="built_in">log</span> --pretty=oneline --abbrev-commit</div><div class="line"><span class="comment"># 添加标签</span></div><div class="line">git tag v0.9 a1e85af</div><div class="line"></div><div class="line"><span class="comment">#创建带说明的标签</span></div><div class="line">git tag -a v0.1 -m <span class="string">"version 0.1 released"</span> 3628164</div><div class="line"></div><div class="line"><span class="comment">#查看标签信息</span></div><div class="line">git show v0.9</div><div class="line"></div><div class="line"><span class="comment">#删除标签</span></div><div class="line">git tag -d v0.1</div><div class="line"></div><div class="line"><span class="comment">#推送某个标签到远程</span></div><div class="line">git push origin v1.0</div><div class="line"><span class="comment">#一次性推送全部尚未推送到远程的本地标签</span></div><div class="line">git push origin --tags</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#删除远程标签</span></div><div class="line"><span class="comment">#先从本地删除</span></div><div class="line">git tag -d v0.9</div><div class="line"><span class="comment">#删除远程tag(推送空tab到远程tag)</span></div><div class="line">git push origin :refs/tags/v0.9</div><div class="line"></div><div class="line"><span class="comment">#删除远程tag</span></div><div class="line">git push origin --delete tag &lt;tagname&gt;</div><div class="line"></div><div class="line">git checkout -b newbranch v1.0</div></pre></td></tr></table></figure>
<h1 id="使用GitHub"><a href="#使用GitHub" class="headerlink" title="使用GitHub"></a>使用GitHub</h1><p>在GitHub上，可以任意Fork开源仓库；<br>自己拥有Fork后的仓库的读写权限；<br>可以推送pull request给官方仓库来贡献代码。</p>
<h1 id="自定义Git"><a href="#自定义Git" class="headerlink" title="自定义Git"></a>自定义Git</h1><h2 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h2><p>Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Windows:</span></div><div class="line">Thumbs.db</div><div class="line">ehthumbs.db</div><div class="line">Desktop.ini</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#检测某文件如何被忽略</span></div><div class="line">git check-ignore -v App.class</div></pre></td></tr></table></figure>
<h1 id="从其他分支检出指定文件和并至当前分支"><a href="#从其他分支检出指定文件和并至当前分支" class="headerlink" title="从其他分支检出指定文件和并至当前分支"></a>从其他分支检出指定文件和并至当前分支</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git checkout master</div><div class="line">git checkout dev file4.txt</div><div class="line">git checkout dev file5.txt file6.txt</div></pre></td></tr></table></figure>
<h1 id="创建SSH-Key"><a href="#创建SSH-Key" class="headerlink" title="创建SSH Key"></a>创建SSH Key</h1><p><code>生成公钥</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></div><div class="line"></div><div class="line"><span class="comment"># 在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，</span></div><div class="line"><span class="comment"># id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人</span></div><div class="line"></div><div class="line"><span class="comment">#登陆GitHub，打开“Account settings”，“SSH Keys”页面：</span></div><div class="line"><span class="comment">#点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容</span></div></pre></td></tr></table></figure>
<blockquote>
<p>执行ssh-keygen命令时<code>不要</code>输入密码</p>
</blockquote>
<h1 id="idea-使用私钥方式访问"><a href="#idea-使用私钥方式访问" class="headerlink" title="idea 使用私钥方式访问"></a>idea 使用私钥方式访问</h1><p>远程仓库使用git协议，而不是http</p>
<h1 id="不同项目使用不同git账号"><a href="#不同项目使用不同git账号" class="headerlink" title="不同项目使用不同git账号"></a>不同项目使用不同git账号</h1><p>~/.ssh/目录下不存在config文件，则新建一个，内容写上（不同中央仓库使用不同账号和不同私钥）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># 该配置用于工作</div><div class="line"># Host 服务器别名</div><div class="line">Host 192.168.2.36</div><div class="line"># HostName 服务器ip地址或机器名</div><div class="line">HostName 192.168.2.36</div><div class="line"># User连接服务器的用户名</div><div class="line">User huanghs</div><div class="line"># IdentityFile 密匙文件的具体路径</div><div class="line">IdentityFile C:/Users/P/.ssh/id_rsa</div><div class="line"></div><div class="line"></div><div class="line"># 该配置用于个人 github 上</div><div class="line"># Host 服务器别名</div><div class="line">Host github.com</div><div class="line"># HostName 服务器ip地址或机器名</div><div class="line">HostName github.com</div><div class="line"># User连接服务器的用户名</div><div class="line">User hasonHuang</div><div class="line"># IdentityFile 密匙文件的具体路径</div><div class="line">IdentityFile C:/Users/P/.ssh/id_rsa_hason</div></pre></td></tr></table></figure>
<p>验证</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@Host</div></pre></td></tr></table></figure>
<p>设置当前项目用户名和邮箱：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config user.name <span class="string">"newname"</span></div><div class="line">git config user.email <span class="string">"newemail"</span></div></pre></td></tr></table></figure>
<ul>
<li><a href="http://blog.csdn.net/a258831020/article/details/50373060" title="Git使用多个帐号" target="_blank" rel="external">Git使用多个帐号</a>
</li>
</ul>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" title="Git教程-廖雪峰的官方网站" target="_blank" rel="external">Git教程-廖雪峰的官方网站</a>
</li>
</ul>
<h1 id="Git-记住账号、密码，不用每次pull和push都输入密码"><a href="#Git-记住账号、密码，不用每次pull和push都输入密码" class="headerlink" title="Git 记住账号、密码，不用每次pull和push都输入密码"></a>Git 记住账号、密码，不用每次pull和push都输入密码</h1><p>命令行输入：git config –global credential.helper store<br>表示凭证方式为存储<br>然后进行一次pull操作，输入账号密码之后，以后就不会再要求输入密码了</p>
<p>如果你连这次密码都不想输入的话，那么可以这么干：<br>打开git-bash<br>cd ~/<br>vim .git-credentials<br>输入 <a href="http://{username}:{password}@source.jd.com" target="_blank" rel="external">http://{username}:{password}@source.jd.com</a><br>然后退出保存就可以了</p>
<h1 id="恢复删除的stash"><a href="#恢复删除的stash" class="headerlink" title="恢复删除的stash"></a>恢复删除的stash</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看已删除stash</span></div><div class="line">git fsck --lost-found</div><div class="line"></div><div class="line"><span class="comment"># 使用git show 查看dangling commit的id</span></div><div class="line">git show 8dd73fa8d14880182f11e24dc10bca570b6127d7</div><div class="line"></div><div class="line"><span class="comment"># 执行git merge进行恢复</span></div><div class="line">git merge 8dd73fa8d14880182f11e24dc10bca570b6127d7</div></pre></td></tr></table></figure>
<h1 id="使用Beyond-Compare作为比较-amp-合并工具"><a href="#使用Beyond-Compare作为比较-amp-合并工具" class="headerlink" title="使用Beyond Compare作为比较&amp;合并工具"></a>使用Beyond Compare作为比较&amp;合并工具</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Open the file <code>c:\users\username\.gitconfig</code> in a text editor.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[diff]</div><div class="line">	tool = bc4</div><div class="line">[difftool &quot;bc4&quot;]</div><div class="line">	cmd = \&quot;d:/program files (x86)/beyond compare 4/bcomp.exe\&quot; \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot;</div><div class="line">[merge]</div><div class="line">	tool = bc4</div><div class="line">[mergetool &quot;bc4&quot;]</div><div class="line">	cmd = \&quot;d:/program files (x86)/beyond compare 4/bcomp.exe\&quot; \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot; \&quot;$BASE\&quot; \&quot;$MERGED\&quot;</div><div class="line">	trustExitCode = true</div><div class="line">[mergetool]</div><div class="line">	keepBackup = false</div></pre></td></tr></table></figure>
<blockquote>
<p>keepBackup = false<br>执行合并后，带有冲突标记的原始文件默认保存为带有 .orig 扩展名的文件；设置不保留原始冲突文件</p>
</blockquote>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 比较文件</span></div><div class="line">git difftool &lt;filename&gt;</div><div class="line"><span class="comment"># 解决冲突</span></div><div class="line">git mergetool &lt;filename&gt;</div></pre></td></tr></table></figure>
<h2 id="Beyond-Compare解决冲突"><a href="#Beyond-Compare解决冲突" class="headerlink" title="Beyond Compare解决冲突"></a>Beyond Compare解决冲突</h2><img src="/2016/08/21/git-note/182190-20161031184505205-1842561751.png" alt="182190-20161031184505205-1842561751.png" title="">
<p>由上图可以看出，左边是当前分支的版本，右边的是需要合并的分支的版本，中间的是相同部分的版本，处理冲突的策略大概有以下几种：</p>
<ul>
<li>当前分支版本替换合并分支版本，点击绿色的箭头。</li>
<li>合并分支版本替换当前分支版本，点击粉色的箭头。</li>
<li>同时需要两个版本的内容，点击绿色或粉色的箭头，然后把另外的分支的内容拷贝到下方的文本编辑框。</li>
<li>最后，点击红色的感叹号，表示已解决冲突</li>
</ul>
<a href="http://www.cnblogs.com/Erik_Xu/p/5655525.html" title="使用Beyond Compare作为差异比较工具" target="_blank" rel="external">使用Beyond Compare作为差异比较工具</a>
<h1 id="分支策略-1"><a href="#分支策略-1" class="headerlink" title="分支策略"></a>分支策略</h1><h2 id="fetct-And-rebase"><a href="#fetct-And-rebase" class="headerlink" title="fetct And rebase"></a>fetct And rebase</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git fetch</div><div class="line">git rebase</div><div class="line"><span class="comment"># 解决冲突</span></div><div class="line">git add files</div><div class="line">git rebase --<span class="built_in">continue</span></div></pre></td></tr></table></figure>
<a href="https://segmentfault.com/q/1010000000430041" title="参考文档" target="_blank" rel="external">参考文档</a>
<a href="http://www.tuicool.com/articles/NzeQZz3" title="参考文档" target="_blank" rel="external">参考文档</a>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 衍合远程分支</span></div><div class="line"><span class="comment"># 切换至目标分支，获取远程更新</span></div><div class="line"><span class="comment"># git fetch取回所有分支（branch）的更新</span></div><div class="line">git fetch origin dev</div><div class="line"><span class="comment"># 执行rebase</span></div><div class="line">git rebase origin/dev</div><div class="line"><span class="comment"># 解决冲突</span></div><div class="line">git add files</div><div class="line">git rebase --<span class="built_in">continue</span></div><div class="line"><span class="comment"># 中止rebase</span></div><div class="line">git rebase --abort</div></pre></td></tr></table></figure>
<h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># dev分支，获取更新</span></div><div class="line">git pull</div><div class="line"><span class="comment"># dev分支衍合进my-dev分支</span></div><div class="line"><span class="comment"># dev分支更新会衍合至my-dev</span></div><div class="line">git rebase dev my-dev</div><div class="line"><span class="comment"># 切换至dev分支，合并my-dev更新</span></div><div class="line">git merge my-dev</div><div class="line">git rebase --<span class="built_in">continue</span></div></pre></td></tr></table></figure>
<h1 id="分支管理策略-1"><a href="#分支管理策略-1" class="headerlink" title="分支管理策略"></a>分支管理策略</h1><ul>
<li>从dev创建<code>本地</code>需求分支feature-xxx</li>
<li>合并需求分支，到dev-test进行测试</li>
<li>测试通过后，更新dev分支，衍合dev更新到需求分支，合并需求分支到dev分支</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 从dev创建需求分支</span></div><div class="line">git checkout dev</div><div class="line">git checkout -b feature-xxx</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 合并需求分支到dev-test</span></div><div class="line"><span class="comment"># 1.更新dev-test</span></div><div class="line">git checkout dev-test</div><div class="line">git pull dev-test</div><div class="line"><span class="comment"># 2.合并需求分支到dev-test</span></div><div class="line">git merge feature-xxx</div><div class="line"><span class="comment"># 3.推送至远程</span></div><div class="line">git push</div><div class="line"><span class="comment"># 3.1推送失败，衍合远程更新，再推送</span></div><div class="line">git fetch origin dev-test</div><div class="line">git rebase origin/dev-test</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 测试通过，合并feature-xxx到dev</span></div><div class="line"><span class="comment"># 1.更新dev</span></div><div class="line">git checkout dev</div><div class="line">git pull dev</div><div class="line"><span class="comment"># 2.衍合dev更新到feature-xxx</span></div><div class="line">git rebase dev feature-xxx</div><div class="line"><span class="comment"># 3.合并feature-xxx到dev</span></div><div class="line">git checkout dev</div><div class="line">git merge feature-xxx</div><div class="line"><span class="comment"># 4.推送至远程</span></div><div class="line">git push</div><div class="line"><span class="comment"># 4.1推送失败，衍合远程更新，再推送</span></div><div class="line">git fetch origin dev</div><div class="line">git rebase origin/dev</div></pre></td></tr></table></figure>
<h2 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h2><h3 id="生成补丁"><a href="#生成补丁" class="headerlink" title="生成补丁"></a>生成补丁</h3><h3 id="应用补丁"><a href="#应用补丁" class="headerlink" title="应用补丁"></a>应用补丁</h3><h1 id="Toos"><a href="#Toos" class="headerlink" title="Toos"></a>Toos</h1><h2 id="Combining-multiple-commits-into-one-using-git-rebase"><a href="#Combining-multiple-commits-into-one-using-git-rebase" class="headerlink" title="Combining multiple commits into one using git rebase"></a>Combining multiple commits into one using git rebase</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span> --oneline</div><div class="line"><span class="comment"># git rebase -i &lt;变动的commit的SHA-1&gt;</span></div><div class="line">git rebase -i 0d6402c</div><div class="line"><span class="comment"># </span></div><div class="line">git rebase -i HEAD~4</div><div class="line"><span class="comment"># 修改提交策略</span></div><div class="line">pick fc62e55 added file_size</div><div class="line">pick 9824bf4 fixed little thing</div><div class="line">pick 21d80a5 added number to <span class="built_in">log</span></div><div class="line">pick 76b9da6 added the apply <span class="built_in">command</span></div><div class="line"><span class="comment">#  p, pick = use commit 使用提交</span></div><div class="line"><span class="comment">#  r, reword = use commit, but edit the commit message </span></div><div class="line"><span class="comment">#  e, edit = use commit, but stop for amending 使用提交，但是暂停以便进行修正</span></div><div class="line"><span class="comment">#  s, squash = use commit, but meld into previous commit 使用提交，但是把它与前一提交合并</span></div><div class="line"><span class="comment">#  f, fixup = like "squash", but discard this commit's log message 与 squash 相同，只是不会保留这行 commit 的提交 message 信息</span></div><div class="line"><span class="comment">#  x, exec = run command (the rest of the line) using shell</span></div><div class="line"><span class="comment">#  以对这些行上下移动从而对提交进行重排序</span></div><div class="line">pick   fc62e55 added file_size</div><div class="line">squash 9824bf4 fixed little thing</div><div class="line">squash 21d80a5 added number to <span class="built_in">log</span></div><div class="line">squash 76b9da6 added the apply <span class="built_in">command</span></div><div class="line"></div><div class="line"><span class="comment"># 终止</span></div><div class="line">git rebase --abort</div></pre></td></tr></table></figure>
<h2 id="fatal-Cannot-update-paths-and-switch-to-branch-‘develop’-at-the-same-time"><a href="#fatal-Cannot-update-paths-and-switch-to-branch-‘develop’-at-the-same-time" class="headerlink" title="fatal: Cannot update paths and switch to branch ‘develop’ at the same time."></a>fatal: Cannot update paths and switch to branch ‘develop’ at the same time.</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看不到远程分支</span></div><div class="line">git branch -a</div><div class="line">git fetch</div><div class="line"></div><div class="line">git fetch origin_waybill</div><div class="line"></div><div class="line"><span class="comment"># 指定fetch远程仓库</span></div><div class="line">git fetch uat_origin</div></pre></td></tr></table></figure>
<h2 id="Overwrite-master-with-branch"><a href="#Overwrite-master-with-branch" class="headerlink" title="Overwrite master with branch"></a>Overwrite master with branch</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># rewrite local master branch.</span></div><div class="line"><span class="comment"># Reset &lt;branchname&gt; to &lt;startpoint&gt;</span></div><div class="line">git branch -f master dev_branch</div><div class="line"><span class="comment"># rewrite remote branch</span></div><div class="line">git push remote +dev_branch:master</div></pre></td></tr></table></figure>
<h2 id="保护分支"><a href="#保护分支" class="headerlink" title="保护分支"></a>保护分支</h2><p>登录 gitlab，进入项目页面，单击修改图标，选择“Protected Branches”</p>
<h1 id="gitlib"><a href="#gitlib" class="headerlink" title="gitlib"></a>gitlib</h1><h2 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h2><p>same project: #44<br>same group: project#44<br>different group: group/project#44</p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java RegEx]]></title>
      <url>http://xiaozhuang.github.io/2016/07/21/Java-RegEx/</url>
      <content type="html"><![CDATA[<p>自java1.4.0以后，java就内建了正则表达式包， java.utile.regex,它的API毫不复杂（可以称得上简单），提供了强大而有创意的功能。<br>对Unicode的支持很棒，文档清晰，运行速度也很快。<br>它能够用来匹配CharSequence对象，所以使用起来非常方便。<br><a id="more"></a></p>
<h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数据检测</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CHECK_UPLOAD_REGEX = <span class="string">"^\\&#123;.*\"success\"\\:true.*&#125;$"</span>;</div><div class="line"><span class="comment">//数据</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String response_data = <span class="string">"&#123;\"success\":true,\"fileid\":[\"2\"],\"filePath\":\"2016/07/19/17/5006828089.jpg\"&#125;"</span>;</div><div class="line"><span class="keyword">if</span>(Pattern.matches(CHECK_UPLOAD_REGEX,response_data))&#123;</div><div class="line">	<span class="comment">//matched</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//java.lang.String.matches(String)</span></div><div class="line">String waybillCode = <span class="string">"VA45625447114"</span>;</div><div class="line"><span class="keyword">if</span>(waybillCode.matches(<span class="string">"^\\w*\\d+$"</span>))&#123;</div><div class="line">    System.out.println(<span class="string">"matched"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//文本替换</span></div><div class="line"><span class="comment">//不使用正则，普通替换</span></div><div class="line">String url = <span class="string">"editUrl=\"~/entities/Temp4/edit\""</span>;</div><div class="line">String replace = url.replace(<span class="string">"~/entities/Temp4"</span>, <span class="string">"~/entities/temp1"</span>);</div><div class="line">System.out.println(replace);</div><div class="line"></div><div class="line"><span class="comment">//点号可以匹配行结束符</span></div><div class="line">String CABLE_AREA_REGEX = <span class="string">"(?s)&lt;!-- cable --&gt;.*?&lt;!-- /cable --&gt;"</span>;</div><div class="line"><span class="comment">// 多行</span></div><div class="line">sequence.replaceAll(<span class="string">"(?m)^\\s+"</span>,<span class="string">""</span>);</div><div class="line"><span class="comment">//使用正则，不区分大小写替换</span></div><div class="line">String replaceAll = url.replaceAll(<span class="string">"(?i)~/entities/temp4"</span>, <span class="string">"~/entities/temp1"</span>);</div><div class="line">System.out.println(replaceAll);</div></pre></td></tr></table></figure>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//捕获文件路径正则</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CAPTURE_FILEPATH_REGEX = <span class="string">"\"filePath\":(\"[^\"]*\")"</span>;</div><div class="line"><span class="comment">//数据</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String response_data = <span class="string">"&#123;\"success\":true,\"fileid\":[\"2\"],\"filePath\":\"2016/07/19/17/5006828089.jpg\"&#125;"</span>;</div><div class="line"><span class="comment">//定义并编译正则</span></div><div class="line">Pattern capture_filepath_regex_compile = Pattern.compile(CAPTURE_FILEPATH_REGEX);</div><div class="line"><span class="comment">//进行数据匹配</span></div><div class="line">Matcher capture_filepath_regex_matcher = capture_filepath_regex_compile.matcher(response_data);</div><div class="line"><span class="comment">// matches() 尝试将整个区域与模式匹配</span></div><div class="line"><span class="keyword">if</span>(capture_filepath_regex_matcher.find())&#123;</div><div class="line">    <span class="comment">//返回由以前匹配操作所匹配的输入子序列</span></div><div class="line">    String matchedText = capture_filepath_regex_matcher.group();</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> matchedFrom = capture_filepath_regex_matcher.start();</div><div class="line">    <span class="keyword">int</span> matchedTo = capture_filepath_regex_matcher.end();</div><div class="line">    System.out.println(<span class="string">"matched [ "</span> + matchedText + <span class="string">" ] from "</span>+ matchedFrom + <span class="string">" to "</span>+ matchedTo + <span class="string">"."</span>);</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="comment">//捕获组是从 1 开始从左到右的索引。组零表示整个模式，因此表达式 m.group(0) 等效于 m.group()</span></div><div class="line">    <span class="comment">// 不包含捕获型括号时，m.group(1) = m.group()</span></div><div class="line">    String filePath = capture_filepath_regex_matcher.group(<span class="number">1</span>);</div><div class="line">    System.out.println(filePath);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>matched [“filePath”:”2016/07/19/17/5006828089.jpg”] from 31 to 72.<br>“2016/07/19/17/5006828089.jpg”</p>
</blockquote>
<h1 id="java-util-regex使用"><a href="#java-util-regex使用" class="headerlink" title="java.util.regex使用"></a>java.util.regex使用</h1><p>java.util.regex.Pattern 是编译好的正则表达式<br>java.util.regex.Matcher 对应单独的实例，表示正则表达式应用到某个具体的目标字符串上,用来进行实际的匹配尝试（使用find），以及查询结果（使用group、start和end方法）</p>
<h2 id="Matcher对象"><a href="#Matcher对象" class="headerlink" title="Matcher对象"></a>Matcher对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//每组捕获型括号对应的信息，通过group(num)、start(num)、end(num)方法获取</span></div><div class="line"><span class="comment">//匹配的输入子序列</span></div><div class="line">String java.util.regex.MatchResult.group()</div><div class="line"><span class="comment">//编号num的捕获型括号匹配的内容,group(0) 等于group()</span></div><div class="line">String java.util.regex.MatchResult.group(<span class="keyword">int</span> num)</div><div class="line"></div><div class="line"><span class="comment">//匹配的初始索引</span></div><div class="line"><span class="keyword">int</span> java.util.regex.MatchResult.start()</div><div class="line"><span class="comment">//编号num的捕获型括号起点，start(0) 等于start()</span></div><div class="line"><span class="keyword">int</span> java.util.regex.MatchResult.start(<span class="keyword">int</span> num)</div><div class="line"></div><div class="line"><span class="comment">//匹配的结束索引</span></div><div class="line"><span class="keyword">int</span> java.util.regex.MatchResult.end()</div><div class="line"><span class="comment">//编号num的捕获型括号终点，end(0) 等于end()</span></div><div class="line"><span class="keyword">int</span> java.util.regex.MatchResult.end(<span class="keyword">int</span> num)</div><div class="line"></div><div class="line"><span class="comment">//获取当前使用的pattern</span></div><div class="line">Pattern java.util.regex.Matcher.pattern()</div><div class="line"><span class="comment">//更改pattern</span></div><div class="line">Matcher java.util.regex.Matcher.usePattern(Pattern)</div><div class="line"></div><div class="line"><span class="comment">//尝试匹配，每次都在上次尝试之后尝试新的匹配</span></div><div class="line"><span class="keyword">boolean</span> java.util.regex.Matcher.find()</div><div class="line"><span class="comment">// 重置此匹配器(检索范围为整个目标字符)，然后从距离开头offset个字符的位置开始查找</span></div><div class="line"><span class="keyword">boolean</span> java.util.regex.Matcher.find(<span class="keyword">int</span> offset)</div><div class="line"></div><div class="line"><span class="comment">// pattern捕获型括号数目</span></div><div class="line"><span class="keyword">int</span> java.util.regex.Matcher.groupCount()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 正在表达式能否`完全`匹配当前检索范围的那段文本</span></div><div class="line"><span class="keyword">boolean</span> java.util.regex.Matcher.matches()</div><div class="line"></div><div class="line"><span class="comment">// 从当前目标字符串开头开始，能否在当前检索范围内找到匹配</span></div><div class="line">java.util.regex.Matcher.lookingAt()</div><div class="line"></div><div class="line"><span class="comment">//返回此匹配器的匹配状态</span></div><div class="line"><span class="comment">//包含group、start、end、groupCount方法</span></div><div class="line">MatchResult MatchResult java.util.regex.Matcher.toMatchResult()</div></pre></td></tr></table></figure>
<h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">String regex = <span class="string">"(\\w)132"</span>;</div><div class="line">String text = <span class="string">"wangdz13230321524sunday132545"</span>;</div><div class="line">System.out.println(<span class="string">"text:"</span>+text);</div><div class="line"><span class="comment">//定义并编译正则</span></div><div class="line">Pattern pattern = Pattern.compile(regex);</div><div class="line"><span class="comment">//进行数据匹配</span></div><div class="line">Matcher matcher = pattern.matcher(text);</div><div class="line"></div><div class="line"></div><div class="line">String replaceAll = matcher.replaceAll(<span class="string">"$1182"</span>);</div><div class="line">System.out.println(<span class="string">"replaceAll:"</span>+replaceAll);</div><div class="line"></div><div class="line"></div><div class="line">String replaceFirst = matcher.replaceFirst(<span class="string">"$1182"</span>);</div><div class="line">System.out.println(<span class="string">"replaceFirst:"</span>+replaceFirst);</div></pre></td></tr></table></figure>
<blockquote>
<p>text:wangdz13230321524sunday132545<br>replaceAll:wangdz18230321524sunday182545<br>replaceFirst:wangdz18230321524sunday132545</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//替换目标字符串中与正则匹配的全部子串，放回替换之后的副本</span></div><div class="line">String java.util.regex.Matcher.replaceAll(String replacement)</div><div class="line"></div><div class="line">String.replaceAll(regex, replacement)</div><div class="line">等于 Pattern.compile(regex).matcher(text).replaceAll(replacement)</div><div class="line"></div><div class="line"><span class="comment">//仅对第一次匹配（如果存在）进行替换，String也提供了replaceFirst方法</span></div><div class="line">String java.util.regex.Matcher.replaceFirst(String replacement)</div></pre></td></tr></table></figure>
<h2 id="replacement-参数"><a href="#replacement-参数" class="headerlink" title="replacement 参数"></a>replacement 参数</h2><p>replacement参数在插入到匹配结果之前，会进行特殊处理</p>
<p>$1、$2之类会替换为对应编号的捕获型括号匹配的文本（$0 表示所有匹配的文本）<br>如果<code>只有3组</code>捕获型括号，则$25被视为$2然后是’5’<br>如果有12组捕获型括号，如果希望使用<code>第一组</code>捕获型括号，然后是’2’，应该这样’$1\2’</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对replacement中的特殊字符添加转义，避免特殊处理</span></div><div class="line">String java.util.regex.Matcher.quoteReplacement(String replacement)</div></pre></td></tr></table></figure>
<h2 id="高级查找-替换"><a href="#高级查找-替换" class="headerlink" title="高级查找-替换"></a>高级查找-替换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">String text = <span class="string">"--&gt;one+test&lt;&lt;--"</span>;</div><div class="line">String regex = <span class="string">"\\w+"</span>;</div><div class="line">StringBuffer result = <span class="keyword">new</span> StringBuffer();</div><div class="line"></div><div class="line">Pattern compile = Pattern.compile(regex);</div><div class="line">Matcher matcher = compile.matcher(text);</div><div class="line"></div><div class="line"><span class="keyword">while</span>(matcher.find())&#123;</div><div class="line">    matcher.appendReplacement(result, <span class="string">"XXX"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">matcher.appendTail(result);</div><div class="line"></div><div class="line">System.out.println(<span class="string">"result:"</span>+result);</div></pre></td></tr></table></figure>
<blockquote>
<p>result:–&gt;XXX+XXX&lt;&lt;–</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//正则表达式应用成功后（通常是find）马上调用appendReplacement，会把两个字符串添加到StringBuffer</span></div><div class="line"><span class="comment">//第一个，目标字符串匹配之前的文本</span></div><div class="line"><span class="comment">//第二个，特殊处理的replacement字符串</span></div><div class="line">Matcher java.util.regex.Matcher.appendReplacement(StringBuffer sb, String replacement)</div><div class="line"></div><div class="line"><span class="comment">//匹配停止后，将剩下的文本附加到StringBuffer</span></div><div class="line">StringBuffer java.util.regex.Matcher.appendTail(StringBuffer sb)</div></pre></td></tr></table></figure>
<h2 id="原地查找-替换"><a href="#原地查找-替换" class="headerlink" title="原地查找-替换"></a>原地查找-替换</h2><p>Matcher使用于任何实现了CharSequence接口的类，能够对目标文本实时地、原地（in place）的修改。</p>
<p>StringBuffer和StringBuilder是两种常见的实现了CharSequence接口的类</p>
<p>等长替换</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">StringBuilder text = <span class="keyword">new</span> StringBuilder(<span class="string">"It's SO very RUDE to shout!"</span>);  </div><div class="line"><span class="comment">//\p&#123;Lu&#125;大写字母</span></div><div class="line"><span class="comment">//\p&#123;Lt&#125;单词开头的字母</span></div><div class="line">Matcher matcher = Pattern.compile(<span class="string">"\\b[\\p&#123;Lu&#125;\\p&#123;Lt&#125;]+\\b"</span>).matcher(text);</div><div class="line"><span class="keyword">while</span>(matcher.find())&#123;</div><div class="line">    text.replace(matcher.start(), matcher.end(), matcher.group().toLowerCase());</div><div class="line">&#125;</div><div class="line">System.out.println(text);</div></pre></td></tr></table></figure>
<h2 id="长度变化的替换"><a href="#长度变化的替换" class="headerlink" title="长度变化的替换"></a>长度变化的替换</h2><p>长度变化的替换，需要调整“匹配指针”（在目标字符串中进行下一次find的开始位置）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">StringBuilder text = <span class="keyword">new</span> StringBuilder(<span class="string">"It's SO very RUDE to shout!"</span>);</div><div class="line"></div><div class="line">Matcher matcher = Pattern.compile(<span class="string">"\\b[\\p&#123;Lu&#125;\\p&#123;Lt&#125;]+\\b"</span>).matcher(text);</div><div class="line"><span class="keyword">int</span> matchPointer = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">//java.util.regex.Matcher.find(int start)</span></div><div class="line"><span class="comment">//重置此匹配器，然后尝试查找匹配该模式、从指定索引开始的输入序列的下一个子序列。</span></div><div class="line"><span class="keyword">while</span> (matcher.find(matchPointer)) &#123;</div><div class="line">    String replaceString = <span class="string">"&lt;b&gt;"</span> + matcher.group().toLowerCase() + <span class="string">"&lt;/b&gt;"</span>;</div><div class="line">    text.replace(matcher.start(), matcher.end(), replaceString);</div><div class="line">    <span class="comment">//调整匹配指针位置</span></div><div class="line">    matchPointer = matcher.start() + replaceString.length();</div><div class="line">&#125;</div><div class="line"></div><div class="line">System.out.println(text);</div></pre></td></tr></table></figure>
<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>Java的正则流派，java.util.regex使用传统型NFA</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>作用 </th>
</tr>
</thead>
<tbody>
<tr>
<td>(?: … )</td>
<td>非捕获型括号</td>
</tr>
<tr>
<td>?+ 、*+ 、++ 、 {m,n}+</td>
<td>占有优先量词</td>
</tr>
<tr>
<td>\b</td>
<td>单词分解符</td>
</tr>
</tbody>
</table>
<h3 id="字符缩略表示法"><a href="#字符缩略表示法" class="headerlink" title="字符缩略表示法"></a>字符缩略表示法</h3><p>\a    报警。ASCII中<bel>字符，八进制编码007<br>\b    退格。ASCII中<bs>字符，八进制编码010（许多流派中，\b只有在字符组内部才表示这样的意义，否则代表单词分解符）<br>\e    Escape字符。ASCII中<esc>字符，八进制编码033<br>\f    进纸符。ASCII中<ff>字符，八进制编码014<br>\n    换行符。Unix和DOS/Windows中，ASCII中<lf>字符，八进制编码012。MacOS中，对应ASCII中<cr>字符，十进制编码015。java中，不论什么平台，都对应ASCII中<code>&lt;LF&gt;</code>字符。<br>\r    回车。Unix和DOS/Windows中，ASCII的<cr>字符。MacOS中，对应ASCII中<lf>字符。java中，不论什么平台，都对应ASCII的<code>&lt;CR&gt;</code>字符<br>\t    水平制表符。ASCII中<ht>字符，八进制编码011<br>\v    垂直制表符。ASCII中<vt>字符，八进制编码013</vt></ht></lf></cr></cr></lf></ff></esc></bs></bel></p>
<h1 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 3 or more</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String LAS_WAYBILL_STATE_REGEX = <span class="string">"\\d&#123;3,&#125;$"</span>;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> RegEX </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaSE]]></title>
      <url>http://xiaozhuang.github.io/2016/07/21/javase/</url>
      <content type="html"><![CDATA[<p>JavaSE<br><a id="more"></a></p>
<h1 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h1><p>jdk8安装，自动添加环境变量<br>C:\ProgramData\Oracle\Java\javapath;<br>其中java命令指向jre下java.exe</p>
<h1 id="面向对象三大特征"><a href="#面向对象三大特征" class="headerlink" title="面向对象三大特征"></a>面向对象三大特征</h1><p>封装：封装就是将数据或函数等集合在一个单元中</p>
<ul>
<li>隐藏实现细节,仅对外公开接口</li>
<li>保证数据的安全,将变化隔离</li>
</ul>
<p>继承：当两个类具有相同的特征（属性）和行为（方法）时，可以将相同的部分抽取出来放到一个类中作为父类，其它类继承这个父类。</p>
<p>多态：指允许不同类的对象对同一消息做出响应。</p>
<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="float-与-double"><a href="#float-与-double" class="headerlink" title="float 与 double"></a>float 与 double</h2><p>float是单精度浮点数，内存分配4个字节，占32位，有效小数位6-7位<br>double是双精度浮点数，内存分配8个字节，占64位，有效小数位15位</p>
<h2 id="int-和-Integer区别"><a href="#int-和-Integer区别" class="headerlink" title="int 和 Integer区别"></a>int 和 Integer区别</h2><p>int 默认值为 0<br>Integer 默认值为null</p>
<h2 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// long转int</span></div><div class="line">Long num  = <span class="number">100L</span>;</div><div class="line">num.intValue();</div><div class="line"></div><div class="line"><span class="comment">// Integer 转 String</span></div><div class="line">Integer.toString(number)</div></pre></td></tr></table></figure>
<h2 id="HashCode"><a href="#HashCode" class="headerlink" title="HashCode"></a>HashCode</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java.lang.String.hashCode()</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> h = hash;</div><div class="line">    <span class="keyword">int</span> len = count;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">int</span> off = offset;</div><div class="line">        <span class="keyword">char</span> val[] = value;</div><div class="line"></div><div class="line">        <span class="comment">//每个字符</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">            h = <span class="number">31</span>*h + val[off++];</div><div class="line">        &#125;</div><div class="line">        hash = h;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> h;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="近似数"><a href="#近似数" class="headerlink" title="近似数"></a>近似数</h2><p><code>jdk1.0</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//java.lang.Math</span></div><div class="line"><span class="keyword">double</span> quarter = <span class="number">0.25</span>;</div><div class="line"><span class="keyword">double</span> half = <span class="number">0.5</span>;</div><div class="line"><span class="keyword">double</span> three_fourths = <span class="number">0.75</span>;</div><div class="line"><span class="comment">//四舍五入; 正数的round是四舍五入，负数的round则可理解为“五舍六入；</span></div><div class="line"><span class="comment">//即 round函数是取最接近整数，如果遇到一样近，则取最大值。</span></div><div class="line">Math.round(quarter);<span class="comment">//0</span></div><div class="line">Math.round(half);<span class="comment">//1</span></div><div class="line">Math.round(three_fourths);<span class="comment">//1</span></div><div class="line"><span class="comment">//进一法</span></div><div class="line">Math.ceil(quarter);<span class="comment">//1.0</span></div><div class="line"><span class="comment">// 去尾法</span></div><div class="line">Math.floor(three_fourths);<span class="comment">//0.0</span></div><div class="line"><span class="comment">// 绝对值</span></div><div class="line">Math.abs(<span class="keyword">long</span> a)</div></pre></td></tr></table></figure>
<h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><p>伪随机数：真正意义上的随机数（或者随机事件）在某次产生过程中是按照实验过程中表现的分布概率随机产生的，其结果是不可预测的，是不可见的。而计算机中的随机函数是按照一定算法模拟产生的，其结果是确定的，是可见的。我们可以这样认为这个可预见的结果其出现的概率是100%。所以用计算机随机函数所产生的“随机数”并不随机，是伪随机数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">        Random rand = <span class="keyword">new</span> Random();</div><div class="line"><span class="comment">//      nextInt()  返回下一个伪随机数</span></div><div class="line"><span class="comment">//      nextBoolean()  生成一个随机的boolean值，生成true和false的值几率相等</span></div><div class="line"><span class="comment">//      nextDouble()  生成一个随机的double值，数值介于[0,1.0)之间</span></div><div class="line"><span class="comment">//      nextInt(int n)  生成一个随机的int值，该值介于[0,n)的区间</span></div><div class="line"><span class="comment">//      nextFloat()  伪随机地生成并返回一个从 0.0f（包括）到 1.0f（包括）范围内均匀选择（大致）的 float 值</span></div><div class="line"><span class="comment">//      double nextGaussian()返回下一个伪随机数，它是取自此随机数生成器序列的、呈高斯（“正态”）分布的 double 值，其平均值是 0.0，标准差是 1.0</span></div><div class="line">        </div><div class="line">        </div><div class="line"><span class="comment">//      Random(long seed)使用单个 long 种子创建一个新的随机数生成器。该种子是伪随机数生成器的内部状态的初始值</span></div><div class="line"><span class="comment">//      setSeed(long seed)该方法的作用是重新设置Random对象中的种子数。设置完种子数以后的Random对象和相同种子数使用new关键字创建出的Random对象相同。</span></div></pre></td></tr></table></figure>
<h2 id="获取当前执行的方法"><a href="#获取当前执行的方法" class="headerlink" title="获取当前执行的方法"></a>获取当前执行的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Thread.currentThread().getStackTrace()[<span class="number">1</span>].getMethodName();</div></pre></td></tr></table></figure>
<h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><p>Java类是单继承的，接口可以多继承。</p>
<h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><p><code>模板</code><br><code>替换</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">final</span> String MOBILE_RETURN_CODE_PREFIX = <span class="string">"WW"</span>;</div><div class="line">        </div><div class="line">StringBuffer billCode = <span class="keyword">new</span> StringBuffer();</div><div class="line">billCode.append(MOBILE_RETURN_CODE_PREFIX);</div><div class="line"></div><div class="line">billCode.append(String.format(<span class="string">"%010d"</span>, <span class="number">10000L</span>));<span class="comment">//字符串格式化10位数字，前端补零</span></div><div class="line"></div><div class="line">System.out.println(billCode.toString());</div><div class="line"></div><div class="line">String ROLE_1_CONTENT = <span class="string">"运单[&#123;0&#125;]客户申请取消，请拦截！确认拦截成功后，请及时审核拦截申请！"</span>;</div><div class="line">String content = MessageFormat.format(ROLE_1_CONTENT, <span class="string">"VC40898997812"</span>);</div><div class="line">System.out.println(content);</div></pre></td></tr></table></figure>
<h2 id="String-format-String-format-Object…-args"><a href="#String-format-String-format-Object…-args" class="headerlink" title="String.format(String format,Object… args)"></a>String.format(String format,Object… args)</h2><p>使用指定的格式字符串和参数返回一个格式化字符串<br><code>jdk1.5+</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String sqlTp = <span class="string">"SELECT * FROM `uam_user`WHERE `USER_ID` IN ('%s')"</span>;</div><div class="line">String sql1 = String.format(sqlTp,<span class="string">"user1"</span>);</div><div class="line"><span class="comment">//结果：SELECT * FROM `uam_user`WHERE `USER_ID` IN ('user1')</span></div><div class="line">String sql2 = String.format(sqlTp,<span class="string">"'user1,user2'"</span>.replace(<span class="string">","</span>, <span class="string">"','"</span>));</div><div class="line"><span class="comment">//结果：SELECT * FROM `uam_user`WHERE `USER_ID` IN ('user1','user2')</span></div></pre></td></tr></table></figure>
<blockquote>
<p>String的format性能真的没有字符串拼接性能好，而且是差太多<br><a href="http://irfen.me/java-string-format-performance/" title="java-string-format-performance" target="_blank" rel="external">java-string-format-performance</a></p>
</blockquote>
<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取与系统有关的路径分隔符k</span></div><div class="line">File.separator</div></pre></td></tr></table></figure>
<h2 id="获取classpath路径"><a href="#获取classpath路径" class="headerlink" title="获取classpath路径"></a>获取classpath路径</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法1：</span></div><div class="line"><span class="comment">// 相对路径为相对App3所在包路径；</span></div><div class="line"><span class="comment">// 绝对路径为相对classpath路径</span></div><div class="line"><span class="comment">// 若路径指定的文件或文件夹不存在，则返回空</span></div><div class="line"><span class="comment">// jar包中Class使用相对路径获取资源java.lang.NullPointerException</span></div><div class="line">String path = App3.class.getResource(<span class="string">"/"</span>).getPath();</div><div class="line">String path2 = App3.class.getResource(<span class="string">"./"</span>).getPath();</div><div class="line"></div><div class="line"><span class="comment">// 方法2：</span></div><div class="line"><span class="comment">// 获取App3加载路径根，即classpath路径</span></div><div class="line"><span class="comment">// 若App3在jar包中，则返回jar包路径</span></div><div class="line">String path3 = App3.class.getProtectionDomain().getCodeSource().getLocation().getPath();</div></pre></td></tr></table></figure>
<h2 id="创建临时文件"><a href="#创建临时文件" class="headerlink" title="创建临时文件"></a>创建临时文件</h2><p>windows临时文件位置：<br>C:\Users\xxx\AppData\Local\Temp</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在默认临时文件目录中创建一个空文件，使用给定前缀和后缀生成其名称</span></div><div class="line"><span class="comment">// 文件名为，前缀 + 随机序列 + 后缀</span></div><div class="line">File.createTempFile(String prefix, String suffix) </div><div class="line"></div><div class="line"><span class="comment">// 在指定目录中创建一个新的空文件，使用给定的前缀和后缀字符串生成其名称。</span></div><div class="line">File.createTempFile(String prefix, String suffix, File directory)</div></pre></td></tr></table></figure>
<h2 id="写文件-img2base64"><a href="#写文件-img2base64" class="headerlink" title="写文件 img2base64"></a>写文件 img2base64</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// import org.apache.commons.codec.binary.Base64;</span></div><div class="line"><span class="comment">// import org.apache.commons.io.IOUtils;</span></div><div class="line"></div><div class="line"> <span class="comment">//图片转base64，不包含header</span></div><div class="line">URL url = App.class.getResource(<span class="string">"/github5.png"</span>);</div><div class="line"><span class="keyword">byte</span>[] imageBytes = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    imageBytes = IOUtils.toByteArray(url);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">byte</span>[] base64EncodedByteArray = Base64.encodeBase64(imageBytes);</div><div class="line">System.out.println(<span class="keyword">new</span> String(base64EncodedByteArray));</div><div class="line"></div><div class="line"><span class="comment">//base64转图片，base64不包含header</span></div><div class="line"><span class="keyword">try</span> (FileOutputStream imageOutFile = <span class="keyword">new</span> FileOutputStream(App.class.getResource(<span class="string">"/"</span>).getPath() + <span class="string">"github52.jpeg"</span>))&#123;</div><div class="line">    imageOutFile.write(Base64.decodeBase64(base64EncodedByteArray));</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="文件保存"><a href="#文件保存" class="headerlink" title="文件保存"></a>文件保存</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"/Users/pankaj/source.txt"</span>);</div><div class="line">    </div><div class="line">    OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"/Users/pankaj/new_source.txt"</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">    <span class="keyword">int</span> bytesRead;</div><div class="line">    <span class="comment">//read from is to buffer</span></div><div class="line">    <span class="keyword">while</span>((bytesRead = is.read(buffer)) !=-<span class="number">1</span>)&#123;</div><div class="line">        os.write(buffer, <span class="number">0</span>, bytesRead);</div><div class="line">    &#125;</div><div class="line">    is.close();</div><div class="line">    <span class="comment">//flush OutputStream to write any buffered data to file</span></div><div class="line">    os.flush();</div><div class="line">    os.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="递归文件目录"><a href="#递归文件目录" class="headerlink" title="递归文件目录"></a>递归文件目录</h2><p><code>递归</code><br><code>所以文件</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//路径</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String OUTPUT_ROOT_PATH = System.getProperty(<span class="string">"user.dir"</span>)</div><div class="line">            + File.separator + <span class="string">"sqlscripts"</span>;</div><div class="line"></div><div class="line">File scriptDir = <span class="keyword">new</span> File(OUTPUT_ROOT_PATH);</div><div class="line"><span class="keyword">if</span>(!scriptDir.exists())&#123;</div><div class="line">    scriptDir.mkdirs();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 指定路径、文件过滤器、目录过滤器</span></div><div class="line">Collection&lt;File&gt; listFiles = FileUtils.listFiles(<span class="keyword">new</span> File(OUTPUT_ROOT_PATH), <span class="keyword">new</span> SuffixFileFilter(<span class="string">"xml"</span>),TrueFileFilter.INSTANCE);</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- pom --&gt;</span></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="对象操作"><a href="#对象操作" class="headerlink" title="对象操作"></a>对象操作</h1><h2 id="Map深拷贝"><a href="#Map深拷贝" class="headerlink" title="Map深拷贝"></a>Map深拷贝</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, Object&gt; dataClone = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(data);</div></pre></td></tr></table></figure>
<h2 id="对象深拷贝"><a href="#对象深拷贝" class="headerlink" title="对象深拷贝"></a>对象深拷贝</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// org.apache.commons.lang3.SerializationUtils</span></div><div class="line"><span class="comment">// 对象需实现Serializable接口</span></div><div class="line">Foo foo = <span class="keyword">new</span> Foo();</div><div class="line">foo.setId(<span class="number">1</span>);</div><div class="line">Foo clone = SerializationUtils.clone(foo);</div></pre></td></tr></table></figure>
<h2 id="同名属性拷贝"><a href="#同名属性拷贝" class="headerlink" title="同名属性拷贝"></a>同名属性拷贝</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">Bar orig = <span class="keyword">new</span> Bar();</div><div class="line">orig.setId(<span class="number">111</span>);</div><div class="line">orig.setName(<span class="string">"sunday"</span>);</div><div class="line"></div><div class="line">Foo dest = <span class="keyword">new</span> Foo();</div><div class="line"><span class="comment">//方式1 commons-beanutils</span></div><div class="line"><span class="comment">//org.apache.commons.beanutils.BeanUtils</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    BeanUtils.copyProperties(dest, orig);</div><div class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div><div class="line">System.out.println(dest);</div><div class="line"></div><div class="line"><span class="comment">//方式2 cglib</span></div><div class="line"><span class="comment">//net.sf.cglib.beans.BeanCopier</span></div><div class="line">Foo foo = <span class="keyword">new</span> Foo();</div><div class="line">BeanCopier bc = BeanCopier.create(Bar.class, Foo.class, <span class="keyword">false</span>);</div><div class="line">bc.copy(orig, foo, <span class="keyword">null</span>);</div><div class="line">System.out.println(foo);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// object to map</span></div><div class="line">ObjectMapper oMapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line"></div><div class="line">Student obj = <span class="keyword">new</span> Student();</div><div class="line">obj.setName(<span class="string">"mkyong"</span>);</div><div class="line">obj.setAge(<span class="number">34</span>);</div><div class="line">obj.setSkills(Arrays.asList(<span class="string">"java"</span>,<span class="string">"node"</span>));</div><div class="line"><span class="comment">// object -&gt; Map</span></div><div class="line">Map&lt;String, Object&gt; map = oMapper.convertValue(obj, Map.class);</div></pre></td></tr></table></figure>
<h2 id="使用参数创建List"><a href="#使用参数创建List" class="headerlink" title="使用参数创建List"></a>使用参数创建List</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; asList = Arrays.asList(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);</div></pre></td></tr></table></figure>
<h1 id="数组移除元素java-lang-UnsupportedOperationException"><a href="#数组移除元素java-lang-UnsupportedOperationException" class="headerlink" title="数组移除元素java.lang.UnsupportedOperationException"></a>数组移除元素java.lang.UnsupportedOperationException</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// List&lt;String&gt; list = new ArrayList&lt;&gt;();</span></div><div class="line"><span class="comment">// list.add("a");</span></div><div class="line"><span class="comment">// list.add("b");</span></div><div class="line"><span class="comment">// list.add("c");  </span></div><div class="line">List&lt;String&gt; items = Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</div><div class="line">LinkedList&lt;String&gt; itemDatas = <span class="keyword">new</span> LinkedList&lt;&gt;(items);</div><div class="line"></div><div class="line">Iterator&lt;String&gt; iterator = itemDatas.iterator();</div><div class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">    String itemData = iterator.next();</div><div class="line">    <span class="keyword">if</span> (<span class="string">"b"</span>.equals(itemData)) &#123;</div><div class="line">        iterator.remove();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Arrays.asList()返回固定大小的集合，不支持remove</p>
</blockquote>
<h2 id="List2Array"><a href="#List2Array" class="headerlink" title="List2Array"></a>List2Array</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> List&lt;Advisor&gt; advisors = <span class="keyword">new</span> LinkedList&lt;Advisor&gt;();</div><div class="line"></div><div class="line">advisors.toArray(<span class="keyword">new</span> Advisor[<span class="keyword">this</span>.advisors.size()]);</div></pre></td></tr></table></figure>
<h2 id="获取本机ip"><a href="#获取本机ip" class="headerlink" title="获取本机ip"></a>获取本机ip</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*返回本地主机。*/</span> </div><div class="line">InetAddress addr = InetAddress.getLocalHost(); </div><div class="line"><span class="comment">/* 返回 IP 地址字符串（以文本表现形式）*/</span> </div><div class="line">String ip; = addr.getHostAddress();</div></pre></td></tr></table></figure>
<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//爬楼梯问题</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(to &lt; <span class="number">1</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();<span class="comment">//参数非法异常</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(<span class="number">1</span> == to)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">2</span> == to)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> up(to - <span class="number">1</span>) + up(to -<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 断言异常：java.lang.AssertionError</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 主键重复异常： org.springframework.dao.DuplicateKeyException</span></div></pre></td></tr></table></figure>
<p>try-with-resources</p>
<ul>
<li>实现 AutoCloseable 接口的资源可以使用try-with-resources自动关闭</li>
<li>资源关闭顺序与申请顺序相反</li>
<li>try块中异常，切关闭资源时再次异常，关闭资源的异常将是 Suppressed（被屏蔽的）; </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Throwable.getSuppressed 获取 try被屏蔽的异常</span></div><div class="line"><span class="keyword">try</span> (StreamResources streamResources = <span class="keyword">new</span> StreamResources();StreamResourcesSecond streamResourcesSecond = <span class="keyword">new</span> StreamResourcesSecond();)&#123;</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    <span class="comment">// try 块中异常，且资源关闭异常</span></div><div class="line">    System.out.println(e.getMessage());</div><div class="line">    </div><div class="line">    <span class="comment">// 获取资源关闭过程中异常</span></div><div class="line">    Throwable[] suppressed = e.getSuppressed();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a href="https://stackoverflow.com/questions/7849416/what-is-a-suppressed-exception" title="What is a suppressed exception" target="_blank" rel="external">What is a suppressed exception</a>
<h2 id="常用异常类型"><a href="#常用异常类型" class="headerlink" title="常用异常类型"></a>常用异常类型</h2><table>
<thead>
<tr>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>IllegalArgumentException</td>
<td>非法参数异常</td>
</tr>
</tbody>
</table>
<p>优先使用业界或者团队已定义过的异常。</p>
<h2 id="异常使用"><a href="#异常使用" class="headerlink" title="异常使用"></a>异常使用</h2><p>对外提供的<code>开放接口</code>使用<code>错误码</code>；<br>内部<code>跨应用</code>远程调用优先考虑使用Result对象封装<code>错误码</code>、错误描述信息（如果使用抛出异常，一旦调用方没有捕获，就会产生运行时错误，导致程序中断）；<br><code>应用内部</code>推荐直接抛出异常对象；</p>
<h2 id="非受检异常分类"><a href="#非受检异常分类" class="headerlink" title="非受检异常分类"></a>非受检异常分类</h2><ul>
<li>可预测异常: NPE、IndexOutOfBoundsException（不应该被产生或者抛出）</li>
<li>需捕获异常：RpcTimeoutException（需捕获处理）</li>
<li>可透传异常：NoSuchRequestHandlingMethodException（Spring框架会处理）</li>
</ul>
<h2 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h2><p>finally代码块的职责是 清理资源、释放连接、关闭管道流等，不要在finallly代码块中使用return语句；</p>
<h2 id="防御式编程"><a href="#防御式编程" class="headerlink" title="防御式编程"></a>防御式编程</h2><p>方法返回值可以返回null，并说明什么情况下返回null值；</p>
<h2 id="addSuppressed"><a href="#addSuppressed" class="headerlink" title="addSuppressed"></a>addSuppressed</h2><p><code>被抑制的异常</code></p>
<!-- 如果finally语句块也抛出了异常，那么这个异常会往上传递，而之前try语句块中的那个异常就丢失了 -->
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    input = <span class="keyword">new</span> FileInputStream(filename);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">    readException = ex;</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="keyword">if</span>(input != <span class="keyword">null</span>)&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            input.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException ex2) &#123;</div><div class="line">            <span class="keyword">if</span>(readException != <span class="keyword">null</span>)&#123;</div><div class="line">                readException.addSuppressed(ex2);    <span class="comment">//注意这里</span></div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                readException = ex2;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(readException != <span class="keyword">null</span>)&#123;</div><div class="line">        <span class="keyword">throw</span> readException;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><p>严禁捕获异常后什么都不做或打印一行日志了事。</p>
<h2 id="日志代理"><a href="#日志代理" class="headerlink" title="日志代理"></a>日志代理</h2><p>logging proxy是一个子类的对象，可窃取方法调用，并进行日志记录，然后调用超类中的方法</p>
<h2 id="打印堆栈"><a href="#打印堆栈" class="headerlink" title="打印堆栈"></a>打印堆栈</h2><p>代码中任意位置插入下面语句可获得堆栈跟踪</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Thread.dumpStack()</div></pre></td></tr></table></figure>
<h2 id="处理非捕获异常"><a href="#处理非捕获异常" class="headerlink" title="处理非捕获异常"></a>处理非捕获异常</h2><p>调用静态的Thread.setDefaultUncaughtExceptionHandler方法改变非捕获异常处理器</p>
<h2 id="观察类加载过程"><a href="#观察类加载过程" class="headerlink" title="观察类加载过程"></a>观察类加载过程</h2><p>-verbose标志启动java虚拟机</p>
<h2 id="使用jconsole显示虚拟机性能统计"><a href="#使用jconsole显示虚拟机性能统计" class="headerlink" title="使用jconsole显示虚拟机性能统计"></a>使用jconsole显示虚拟机性能统计</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jconsole processID</div></pre></td></tr></table></figure>
<h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><p>ERROR级别表示 一旦出现就需要人为介入。</p>
<p>DEBUG、INFO级别日志，必须使用<code>条件输出</code>，或者使用<code>占位符</code>方式打印。</p>
<p>因为日志字符串拼接操作会耗费系统资源。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span>(log.isDebugEnable())&#123;</div><div class="line">    log.debug(<span class="string">"memberId:"</span>+member.getMemberId());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="logger定义"><a href="#logger定义" class="headerlink" title="logger定义"></a>logger定义</h2><p>logger被定义为static变量，因为logger与当前类绑定，避免每次都new一个新对象。</p>
<h1 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h1><h2 id="日期转换"><a href="#日期转换" class="headerlink" title="日期转换"></a>日期转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// String -&gt; Date</span></div><div class="line">SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">format.parse(datetime);</div><div class="line"></div><div class="line"><span class="comment">// Date -&gt; String</span></div><div class="line">format.format(date);</div></pre></td></tr></table></figure>
<h1 id="日志-1"><a href="#日志-1" class="headerlink" title="日志"></a>日志</h1><p>log4j规定了默认的几个级别：trace&lt;debug&lt;info&lt;warn&lt;error&lt;fatal</p>
<h1 id="log4j-换行"><a href="#log4j-换行" class="headerlink" title="log4j 换行"></a>log4j 换行</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String lineSeparator = System.getProperty(<span class="string">"line.separator"</span>);</div><div class="line">LOGGER.info(<span class="string">"Person's name is  &#123;&#125; .&#123;&#125;"</span>, person.getName(), lineSeparator);</div></pre></td></tr></table></figure>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>@Description</p>
<p>{@link com.jd.etms.waybill.common.constant.OrderRelationTypeEnum}</p>
<p>@see com.jd.ql.trace.wcm.service.MqSendService</p>
<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="接口过时"><a href="#接口过时" class="headerlink" title="接口过时"></a>接口过时</h2><p>@Deprecated</p>
<h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(Object obj) <span class="keyword">throws</span> Exception &#123;</div><div class="line">    ByteArrayOutputStream baos = <span class="keyword">null</span>;</div><div class="line">    ObjectOutputStream oos = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        baos = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">        oos = <span class="keyword">new</span> ObjectOutputStream(baos);</div><div class="line">        oos.writeObject(obj);</div><div class="line">        oos.flush();</div><div class="line">        <span class="keyword">byte</span>[] bytes = baos.toByteArray();</div><div class="line">        <span class="keyword">return</span> bytes;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        logger.error(<span class="string">"serialize-error:"</span>, e);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span>(oos != <span class="keyword">null</span>)&#123;</div><div class="line">            oos.close();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(baos != <span class="keyword">null</span>)&#123;</div><div class="line">            baos.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">unserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    ByteArrayInputStream bais = <span class="keyword">null</span>;</div><div class="line">    ObjectInputStream ois = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        bais = <span class="keyword">new</span> ByteArrayInputStream(bytes);</div><div class="line">        ois = <span class="keyword">new</span> ObjectInputStream(bais);</div><div class="line">        <span class="keyword">return</span> ois.readObject();</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        logger.error(<span class="string">"unserialize-error:"</span>, e);</div><div class="line">    &#125; <span class="keyword">finally</span>&#123;</div><div class="line">        <span class="keyword">if</span>(ois != <span class="keyword">null</span>)&#123;</div><div class="line">            ois.close();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(bais != <span class="keyword">null</span>)&#123;</div><div class="line">            bais.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="SerialVersionUid"><a href="#SerialVersionUid" class="headerlink" title="SerialVersionUid"></a>SerialVersionUid</h1><p>用一个称为 serialVersionUID 的版本号与每个可序列化类相关联，该序列号在反序列化过程中用于验证序列化对象的发送者和接收者是否为该对象加载了与序列化兼容的类</p>
<p>强烈建议 所有可序列化类都显式声明 serialVersionUID 值</p>
<p>两种方式：<br> private static final long serialVersionUID = 1L;<br> private static final long serialVersionUID = -2805284943658356093L;</p>
<p>一般采用第一种就行了，简单。<br>第二种能够保证每次更改类结构后改变版本号，但还是要手工去生成</p>
<h1 id="java异常处理"><a href="#java异常处理" class="headerlink" title="java异常处理"></a>java异常处理</h1><p>printStackTrace的堆栈跟踪功能显示出程序运行到当前类的执行流程，但只提供了一些最基本的信息，<br>未能说明实际导致错误的原因，同时也不易解读。</p>
<p>printStackTrace 可以出现在开发和测试阶段，不应该出现在运行阶段</p>
<p>调用printStackTrace算不上已经“处理好了异常”</p>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h2 id="for循环优化"><a href="#for循环优化" class="headerlink" title="for循环优化"></a>for循环优化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Vector vect = <span class="keyword">new</span> Vector(<span class="number">1000</span>);</div><div class="line"><span class="keyword">for</span>( inti=<span class="number">0</span>; i &lt; vect.size(); i++)&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//优化，减少1000次size()的系统调用开销</span></div><div class="line"><span class="keyword">int</span> size = vect.size();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; size; i++)&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 检查循环内效率不高的地方</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;<span class="number">100000</span>;i++)&#123;</div><div class="line">    <span class="keyword">if</span> (i%<span class="number">10</span> == <span class="number">9</span>) &#123;</div><div class="line">    <span class="comment">// 每十次执行一次</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(inti =<span class="number">0</span>,j =<span class="number">10</span>; i&lt;<span class="number">100000</span>; i++,j--)&#123;　</div><div class="line">    <span class="keyword">if</span>(j == <span class="number">0</span>)&#123;</div><div class="line">        <span class="comment">// 每十次执行一次</span></div><div class="line">        j = <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数组复制"><a href="#数组复制" class="headerlink" title="数组复制"></a>数组复制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> size = <span class="number">1000</span>;</div><div class="line">String[] strArray1 = <span class="keyword">new</span> String[size];</div><div class="line">String[] strArray2 = <span class="keyword">new</span> String[size];</div><div class="line"><span class="keyword">for</span>(inti=<span class="number">0</span>;i&lt;size;i++)&#123; <span class="comment">// 赋值</span></div><div class="line">    strArray1 = (<span class="keyword">new</span> String(<span class="string">"Array: "</span> + i));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//优先使用API</span></div><div class="line">System.arraycopy(strArray1,<span class="number">0</span>,strArray2,<span class="number">0</span>,size); <span class="comment">// 复制</span></div></pre></td></tr></table></figure>
<h2 id="减少I-O操作"><a href="#减少I-O操作" class="headerlink" title="减少I/O操作"></a>减少I/O操作</h2><p>用BufferedReader 代替Reader，用BufferedWriter代替Writer来进行处理I/O操作</p>
<p>同样可以用BufferedInputStream代替InputStream都可以获得性能的提高</p>
<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><h2 id="load-xml-conf"><a href="#load-xml-conf" class="headerlink" title="load xml conf"></a>load xml conf</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="comment">//生成完成输出图案</span></div><div class="line">Properties donePattern = <span class="keyword">new</span> Properties();</div><div class="line"></div><div class="line"><span class="keyword">try</span> (InputStream doneResourceAsStream = <span class="keyword">this</span>.getClass().getClassLoader()</div><div class="line">                     .getResourceAsStream(<span class="string">"done.xml"</span>))&#123;</div><div class="line">    donePattern.loadFromXML(doneResourceAsStream);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comment</span>&gt;</span>执行完成控制台图案<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"done_logo"</span>&gt;</span></div><div class="line">        &lt;![CDATA[</div><div class="line">          _____   ____  _   _ ______</div><div class="line">         |  __ \ / __ \| \ | |  ____|</div><div class="line">         | |  | | |  | |  \| | |__</div><div class="line">         | |  | | |  | | . ` |  __|</div><div class="line">         | |__| | |__| | |\  | |____</div><div class="line">         |_____/ \____/|_| \_|______|</div><div class="line">        ]]&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="String2Date"><a href="#String2Date" class="headerlink" title="String2Date"></a>String2Date</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Date operateTime = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).parse(<span class="string">"2019-1-5 10:16:42"</span>);</div><div class="line">operateTime = <span class="keyword">new</span> Date(operateTime.getTime() + RandomUtils.nextLong(<span class="number">1</span>, <span class="number">86400000</span> * <span class="number">5</span>));</div><div class="line">System.out.println(JSON.toJSONString(operateTime, SerializerFeature.WriteDateUseDateFormat));</div></pre></td></tr></table></figure>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; sorted_keys = <span class="keyword">new</span> ArrayList&lt;String&gt;(params.keySet());</div><div class="line"><span class="comment">//自然升序排序</span></div><div class="line">Collections.sort(sorted_keys);</div><div class="line"><span class="comment">//自然降序排序</span></div><div class="line">Collections.sort(sorted_keys, Collections.reverseOrder());</div><div class="line"></div><div class="line"><span class="comment">// 逆序视图（Guava）</span></div><div class="line">Lists.reverse(List)</div></pre></td></tr></table></figure>
<h2 id="shutdown-hook"><a href="#shutdown-hook" class="headerlink" title="shutdown hook"></a>shutdown hook</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将hook线程添加到运行时环境中去</span></div><div class="line">Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        applicationContext.close();</div><div class="line">        System.out.println(<span class="string">"shutdown hook run..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;));</div></pre></td></tr></table></figure>
<h2 id="javaSE-运行"><a href="#javaSE-运行" class="headerlink" title="javaSE 运行"></a>javaSE 运行</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@echo off</div><div class="line">set TITLE=日志堆栈输出验证</div><div class="line">echo "--------------------------------"</div><div class="line">echo "日志堆栈输出验证"</div><div class="line">echo "--------------------------------"</div><div class="line">rem 解决以管理员运行，不能定位到当前目录问题</div><div class="line">cd /d %~dp0</div><div class="line">rem 保存当前目录</div><div class="line">set SERVICE_PATH="%cd%"</div><div class="line">rem 设置JAVA_HOME变量</div><div class="line">set JAVA_HOME=%SERVICE_PATH%\jdk1.7.0_79</div><div class="line">rem %JAVA_HOME%\bin\java -Dfile.encoding=UTF-8 -jar %SERVICE_PATH%\link_webservice.jar</div><div class="line">%JAVA_HOME%\bin\java -server -Xmx512m -Dfile.encoding=UTF-8 -classpath "./classes;./libs/*" com.sunday.log4j2_learn.ExctptionApp</div><div class="line">pause</div></pre></td></tr></table></figure>
<h2 id="3DES加密"><a href="#3DES加密" class="headerlink" title="3DES加密"></a>3DES加密</h2><p>对称加密</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.security.Security;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.crypto.Cipher;</div><div class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</div><div class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 3DES加密</div><div class="line"> * 主要依靠唯一密钥来确保数据加密解密的安全</div><div class="line"> * <span class="doctag">@author</span> SHANHY(365384722@QQ.COM)</div><div class="line"> * <span class="doctag">@date</span> 2015-8-18</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeDES</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String Algorithm = <span class="string">"DESede"</span>; <span class="comment">// 定义 加密算法,可用 DES,DESede(即3DES),Blowfish</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 加密方法</div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> keybyte</div><div class="line">     *            加密密钥，长度为24字节</div><div class="line">     * <span class="doctag">@param</span> src</div><div class="line">     *            被加密的数据缓冲区（源）</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@author</span> SHANHY</div><div class="line">     * <span class="doctag">@date</span> 2015-8-18</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptMode(<span class="keyword">byte</span>[] keybyte, <span class="keyword">byte</span>[] src) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 生成密钥</span></div><div class="line">            SecretKey deskey = <span class="keyword">new</span> SecretKeySpec(keybyte, Algorithm);</div><div class="line"></div><div class="line">            <span class="comment">// 加密</span></div><div class="line">            Cipher c1 = Cipher.getInstance(Algorithm);</div><div class="line">            c1.init(Cipher.ENCRYPT_MODE, deskey);</div><div class="line">            <span class="keyword">return</span> c1.doFinal(src);</div><div class="line">        &#125; <span class="keyword">catch</span> (java.security.NoSuchAlgorithmException e1) &#123;</div><div class="line">            e1.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (javax.crypto.NoSuchPaddingException e2) &#123;</div><div class="line">            e2.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (java.lang.Exception e3) &#123;</div><div class="line">            e3.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 解密</div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> keybyte</div><div class="line">     *            加密密钥，长度为24字节</div><div class="line">     * <span class="doctag">@param</span> src</div><div class="line">     *            加密后的缓冲区</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@author</span> SHANHY</div><div class="line">     * <span class="doctag">@date</span> 2015-8-18</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decryptMode(<span class="keyword">byte</span>[] keybyte, <span class="keyword">byte</span>[] src) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 生成密钥</span></div><div class="line">            SecretKey deskey = <span class="keyword">new</span> SecretKeySpec(keybyte, Algorithm);</div><div class="line"></div><div class="line">            <span class="comment">// 解密</span></div><div class="line">            Cipher c1 = Cipher.getInstance(Algorithm);</div><div class="line">            c1.init(Cipher.DECRYPT_MODE, deskey);</div><div class="line">            <span class="keyword">return</span> c1.doFinal(src);</div><div class="line">        &#125; <span class="keyword">catch</span> (java.security.NoSuchAlgorithmException e1) &#123;</div><div class="line">            e1.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (javax.crypto.NoSuchPaddingException e2) &#123;</div><div class="line">            e2.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (java.lang.Exception e3) &#123;</div><div class="line">            e3.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 转换成十六进制字符串</div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> b</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@author</span> SHANHY</div><div class="line">     * <span class="doctag">@date</span> 2015-8-18</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">byte2hex</span><span class="params">(<span class="keyword">byte</span>[] b)</span> </span>&#123;</div><div class="line">        String hs = <span class="string">""</span>;</div><div class="line">        String stmp = <span class="string">""</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; b.length; n++) &#123;</div><div class="line">            stmp = (java.lang.Integer.toHexString(b[n] &amp; <span class="number">0XFF</span>));</div><div class="line">            <span class="keyword">if</span> (stmp.length() == <span class="number">1</span>)</div><div class="line">                hs = hs + <span class="string">"0"</span> + stmp;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                hs = hs + stmp;</div><div class="line">            <span class="keyword">if</span> (n &lt; b.length - <span class="number">1</span>)</div><div class="line">                hs = hs + <span class="string">":"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> hs.toUpperCase();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 测试</div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> args</div><div class="line">     * <span class="doctag">@author</span> SHANHY</div><div class="line">     * <span class="doctag">@date</span> 2015-8-18</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 添加新安全算法,如果用JCE就要把它添加进去</span></div><div class="line">        Security.addProvider(<span class="keyword">new</span> com.sun.crypto.provider.SunJCE());</div><div class="line"></div><div class="line">        <span class="comment">// 24字节的密钥</span></div><div class="line">        <span class="comment">// 3DES的密钥必须是24位的byte数组</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] keyBytes = &#123; <span class="number">0x11</span>, <span class="number">0x22</span>, <span class="number">0x4F</span>, <span class="number">0x58</span>, (<span class="keyword">byte</span>) <span class="number">0x88</span>, <span class="number">0x10</span>, <span class="number">0x40</span>, <span class="number">0x38</span>, <span class="number">0x28</span>, <span class="number">0x25</span>, <span class="number">0x79</span>, <span class="number">0x51</span>, (<span class="keyword">byte</span>) <span class="number">0xCB</span>, (<span class="keyword">byte</span>) <span class="number">0xDD</span>, <span class="number">0x55</span>, <span class="number">0x66</span>, <span class="number">0x77</span>, <span class="number">0x29</span>, <span class="number">0x74</span>, (<span class="keyword">byte</span>) <span class="number">0x98</span>, <span class="number">0x30</span>, <span class="number">0x40</span>, <span class="number">0x36</span>, (<span class="keyword">byte</span>) <span class="number">0xE2</span> &#125;;</div><div class="line">        String szSrc = <span class="string">"This is a 3DES test. 测试"</span>;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"加密前的字符串:"</span> + szSrc);</div><div class="line"></div><div class="line">        <span class="keyword">byte</span>[] encoded = encryptMode(keyBytes, szSrc.getBytes());</div><div class="line">        System.out.println(<span class="string">"加密后的字符串:"</span> + <span class="keyword">new</span> String(encoded));</div><div class="line"></div><div class="line">        <span class="keyword">byte</span>[] srcBytes = decryptMode(keyBytes, encoded);</div><div class="line">        System.out.println(<span class="string">"解密后的字符串:"</span> + (<span class="keyword">new</span> String(srcBytes)));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="List截取"><a href="#List截取" class="headerlink" title="List截取"></a>List截取</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>);</div><div class="line">System.out.println(list.subList(<span class="number">1</span>, list.size()));</div></pre></td></tr></table></figure>
<h2 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// com.google.common.base.Preconditions#checkArgument(boolean, java.lang.Object)</span></div><div class="line">Object obj = <span class="keyword">null</span>;</div><div class="line">Preconditions.checkArgument(obj != <span class="keyword">null</span>, <span class="string">"参数obj为空！"</span>);</div></pre></td></tr></table></figure>
<h2 id="延迟重试（retry-with-delay）"><a href="#延迟重试（retry-with-delay）" class="headerlink" title="延迟重试（retry with delay）"></a>延迟重试（retry with delay）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> tryCount = <span class="number">0</span>;</div><div class="line">String data = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">boolean</span> dataIsEmpty = <span class="keyword">true</span>;</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    data = getData();</div><div class="line">    dataIsEmpty = StringUtils.isEmpty(data);</div><div class="line">    <span class="comment">//获取数据失败，延迟</span></div><div class="line">    <span class="keyword">if</span>(dataIsEmpty)&#123;</div><div class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">        ++tryCount;</div><div class="line">        System.out.println(<span class="string">"休眠。。。"</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        System.out.println(<span class="string">"成功获的数据。。。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">while</span>(dataIsEmpty &amp;&amp; tryCount &lt; retry_timeout);</div><div class="line"></div><div class="line">System.out.println(data);</div></pre></td></tr></table></figure>
<h2 id="加载多个properties文件"><a href="#加载多个properties文件" class="headerlink" title="加载多个properties文件"></a>加载多个properties文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Properties properties = <span class="keyword">new</span> Properties();</div><div class="line">properties.load(<span class="keyword">new</span> FileInputStream(<span class="string">"file1.properties"</span>));</div><div class="line"></div><div class="line">Properties properties2 = <span class="keyword">new</span> Properties();</div><div class="line">properties2.load(<span class="keyword">new</span> FileInputStream(<span class="string">"file2.properties"</span>));</div><div class="line">properties.putAll(properties2);</div></pre></td></tr></table></figure>
<h2 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Apache Commons IO FileUtils</span></div><div class="line">FileUtils.copyFile(source, dest);</div><div class="line"></div><div class="line"><span class="comment">// Java 7 or higher</span></div><div class="line">Files.copy(source.toPath(), dest.toPath());</div></pre></td></tr></table></figure>
<h2 id="创建多级目录"><a href="#创建多级目录" class="headerlink" title="创建多级目录"></a>创建多级目录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">File files = <span class="keyword">new</span> File(<span class="string">"C:\\Directory2\\Sub2\\Sub-Sub2"</span>);</div><div class="line"><span class="keyword">if</span> (!files.exists()) &#123;</div><div class="line">    <span class="keyword">if</span> (files.mkdirs()) &#123;</div><div class="line">        System.out.println(<span class="string">"Multiple directories are created!"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        System.out.println(<span class="string">"Failed to create multiple directories!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="注解-1"><a href="#注解-1" class="headerlink" title="注解"></a>注解</h1><h2 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h2><h3 id="作用于Java代码的注解"><a href="#作用于Java代码的注解" class="headerlink" title="作用于Java代码的注解"></a>作用于Java代码的注解</h3><ul>
<li>@Override 检查某个方法<code>是否是复写的方法</code>，如果这个方法在父类或者实现的接口中未找到，编译会出错。</li>
<li>@Deprecated 标记某个<code>方法或者类被废弃</code>，如果使用该类或者方法，编译过程会报警告</li>
<li>@SuppressWarnings 通知编译器忽略关于被标注的参数的警告</li>
<li>@SafeVarargs 忽略关于调用含有泛型参数的方法或者构造器的警告，1.7新增注解</li>
<li>@FunctionalInterface 表明某一个声明的接口将被用作功能性接口，1.8新增注解 </li>
</ul>
<p>元注解（Meta Annotation） </p>
<ul>
<li><p>@Retention 指明被标注的注解在什么时候使用（也就是注解什么时候会被保留） </p>
<ul>
<li><code>仅在源代码中保留</code>，在编译过程中丢弃（RetentionPolicy.SOURCE）</li>
<li>注解<code>在编译过程中保存到class文件</code>，在class文件被加载时候忽略（RetentionPolicy.CLASS）</li>
<li>注解在class文件加载时候被读取，也就是<code>运行中注解可用</code>，可以通过反射获取注解信息（RetentionPolicy.RUNTIME）</li>
</ul>
</li>
<li><p>@Documented 指明在生成Javadoc时候，被标注的注解将被写入Javadoc文档中</p>
</li>
<li><p>@Target 指明被标注的注解的作用范围 </p>
<ul>
<li>ElementType.TYPE:用于描述类、接口(包括注解类型) 或enum声明</li>
<li>ElementType.FIELD:用于描述域</li>
<li>ElementType.METHOD:用于描述方法</li>
<li>ElementType.PARAMETER:用于描述参数</li>
<li>ElementType.CONSTRUCTOR:用于描述构造器</li>
<li>ElementType.LOCAL_VARIABLE:用于描述局部变量</li>
<li>ElementType.ANNOTATION_TYPE:用于描述注解</li>
<li>ElementType.PACKAGE:用于描述包</li>
</ul>
</li>
<li><p>@Inherited  指明被标注的注解是被继承的，也就是说如果一个@Inherited修饰的annotation类型被用于一个类，则这个annotation也会作用于改类的子类。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE) <span class="comment">//on class level</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TesterInfo &#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Priority &#123;</div><div class="line">       LOW, MEDIUM, HIGH</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">Priority <span class="title">priority</span><span class="params">()</span> <span class="keyword">default</span> Priority.MEDIUM</span>;</div><div class="line"></div><div class="line">    String[] tags() <span class="keyword">default</span> <span class="string">""</span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">createdBy</span><span class="params">()</span> <span class="keyword">default</span> "Mkyong"</span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">lastModified</span><span class="params">()</span> <span class="keyword">default</span> "03/01/2014"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@TesterInfo</span>(</div><div class="line">    priority = Priority.HIGH,</div><div class="line">    createdBy = <span class="string">"mkyong.com"</span>,</div><div class="line">    tags = &#123;<span class="string">"sales"</span>,<span class="string">"test"</span> &#125;</div><div class="line">)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestExample</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Class&lt;TestExample&gt; obj = TestExample.class;</div><div class="line"><span class="keyword">if</span> (obj.isAnnotationPresent(TesterInfo.class)) &#123;</div><div class="line">    Annotation annotation = obj.getAnnotation(TesterInfo.class);</div><div class="line">    TesterInfo testerInfo = (TesterInfo) annotation;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (Method method : obj.getDeclaredMethods()) &#123;</div><div class="line">    <span class="keyword">if</span> (method.isAnnotationPresent(Test.class)) &#123;</div><div class="line">        Annotation annotation = method.getAnnotation(Test.class);</div><div class="line">        Test test = (Test) annotation;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用的Class文件来自哪个jar包"><a href="#使用的Class文件来自哪个jar包" class="headerlink" title="使用的Class文件来自哪个jar包"></a>使用的Class文件来自哪个jar包</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">URL location = Logger.class.getProtectionDomain().getCodeSource().getLocation();</div><div class="line">System.out.println(location);</div></pre></td></tr></table></figure>
<h2 id="查看编译版本"><a href="#查看编译版本" class="headerlink" title="查看编译版本"></a>查看编译版本</h2><p>javap -verbose MyClass | findstr “major”</p>
<p>jdk版本和major version对应关系<br>J2SE 8 = 52,<br>J2SE 7 = 51,<br>J2SE 6.0 = 50,<br>J2SE 5.0 = 49,<br>JDK 1.4 = 48,<br>JDK 1.3 = 47,<br>JDK 1.2 = 46,<br>JDK 1.1 = 45</p>
<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="静态方法泛型"><a href="#静态方法泛型" class="headerlink" title="静态方法泛型"></a>静态方法泛型</h2><p>静态方法操作的应用数据类型不确定，可以将泛型定义在方法上 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;W&gt; <span class="function"><span class="keyword">void</span> <span class="title">staticMethod</span><span class="params">(W w)</span></span>&#123;  </div><div class="line">    System.out.println(<span class="string">"staticMethod :"</span>+ w);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Tools-1"><a href="#Tools-1" class="headerlink" title="Tools"></a>Tools</h1><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p><code>fastjson</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//序列化 和 反序列化</span></div><div class="line"></div><div class="line"><span class="comment">//打开AutoType功能 在1.2.25之后的版本，autotype功能是受限的</span></div><div class="line"><span class="comment">//打开autotype功能</span></div><div class="line"><span class="comment">//1. -Dfastjson.parser.autoTypeSupport=true</span></div><div class="line"><span class="comment">//2. ParserConfig.getGlobalInstance().setAutoTypeSupport(true); </span></div><div class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="keyword">true</span>);</div><div class="line"></div><div class="line"><span class="comment">//添加autotype白名单</span></div><div class="line"><span class="comment">//1. ParserConfig.getGlobalInstance().addAccept("com.taobao.pac.client.sdk.dataobject."); </span></div><div class="line"><span class="comment">//2. -Dfastjson.parser.autoTypeAccept=com.taobao.pac.client.sdk.dataobject.,com.cainiao. </span></div><div class="line"><span class="comment">//3. 在1.2.25/1.2.26版本支持通过类路径的fastjson.properties文件来配置</span></div><div class="line"><span class="comment">//   fastjson.parser.autoTypeAccept=com.taobao.pac.client.sdk.dataobject.,com.cainiao. // 如果有多个包名前缀，用逗号隔开</span></div><div class="line"></div><div class="line"></div><div class="line">ExceptionOrder exceptionOrder = <span class="keyword">new</span> ExceptionOrder();</div><div class="line">exceptionOrder.setWaybillCode(<span class="string">"69856189174"</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//Object转JSON 日期格式化</span></div><div class="line">String jsonString = JSON.toJSONString(exceptionOrder, SerializerFeature.WriteClassName);</div><div class="line">System.out.println(jsonString);</div><div class="line"></div><div class="line">Object parse = JSON.parse(jsonString);</div><div class="line">System.out.println(parse.getClass());</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Array返序列化</span></div><div class="line">List&lt;Object&gt; exceptionOrder = JSON.parseArray(argsJson, paramTypes);</div><div class="line">List&lt;String&gt; paramTypesNameList = JSON.parseArray(paramTypesName, String.class);</div></pre></td></tr></table></figure>
<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java.lang.Class#isInstance</span></div><div class="line"><span class="comment">// 判断实例是否指定类型</span></div><div class="line"><span class="keyword">if</span> (RequestParam.class.isInstance(paramAnn)) &#123;</div><div class="line">    RequestParam requestParam = (RequestParam) paramAnn;</div><div class="line">    paramName = requestParam.value();</div><div class="line">    required = requestParam.required();</div><div class="line">    defaultValue = parseDefaultValueAttribute(requestParam.defaultValue());</div><div class="line">    annotationsFound++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// With reflection</span></div><div class="line">Field firstName = clazz.getDeclaredField(<span class="string">"firstName"</span>);</div><div class="line">Field lastName = clazz.getDeclaredField(<span class="string">"lastName"</span>);</div><div class="line">Field birthDate = clazz.getDeclaredField(<span class="string">"birthDate"</span>);</div><div class="line">Field.setAccessible(<span class="keyword">new</span> AccessibleObject[] &#123; firstName, lastName, birthDate &#125;, <span class="keyword">true</span>);</div><div class="line">firstName.get(person);</div><div class="line">lastName.get(person);</div><div class="line">birthDate.get(person);</div><div class="line"></div><div class="line"><span class="comment">// Without reflection</span></div><div class="line">person.getFirstName();</div><div class="line">person.getLastName();</div><div class="line">person.getBirthDate();</div></pre></td></tr></table></figure>
<h2 id="反射性能原因"><a href="#反射性能原因" class="headerlink" title="反射性能原因"></a>反射性能原因</h2><p><code>Performance cost of reflection</code><br><code>为什么慢</code><br><code>慢在哪里</code></p>
<p><a href="https://stackoverflow.com/questions/435553/java-reflection-performance" target="_blank" rel="external">https://stackoverflow.com/questions/435553/java-reflection-performance</a></p>
<p>Because reflection involves types that are dynamically resolved, certain Java virtual machine optimizations can not be performed.<br>Consequently, reflective operations have slower performance than their non-reflective counterparts,<br>and should be avoided in sections of code which are called frequently in performance-sensitive applications.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// With reflection</span></div><div class="line">Field firstName = clazz.getDeclaredField(<span class="string">"firstName"</span>);</div><div class="line">Field lastName = clazz.getDeclaredField(<span class="string">"lastName"</span>);</div><div class="line">Field birthDate = clazz.getDeclaredField(<span class="string">"birthDate"</span>);</div><div class="line">Field.setAccessible(<span class="keyword">new</span> AccessibleObject[] &#123; firstName, lastName, birthDate &#125;, <span class="keyword">true</span>);</div><div class="line">firstName.get(person);</div><div class="line">lastName.get(person);</div><div class="line">birthDate.get(person);</div><div class="line"></div><div class="line"><span class="comment">// Without reflection</span></div><div class="line">person.getFirstName();</div><div class="line">person.getLastName();</div><div class="line">person.getBirthDate();</div></pre></td></tr></table></figure>
<p>The comments below relate to Sun’s implementation, in particular OpenJDK 6. Your mileage may vary with other Java platform implementations.<br>java.lang.Class does some caching itself, so implementing your own cache may not improve things very much. Do timing tests with and without manual caching.</p>
<h3 id="Class-forName-caching"><a href="#Class-forName-caching" class="headerlink" title="Class.forName() caching"></a>Class.forName() caching</h3><p>I’ve just run the benchmarks myself, and found that if the classes I’m looking for are ones defined by the current classloader (rather than some “core” one) then it’s about 10% faster in the slow case…</p>
<h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1><h2 id="系统核数"><a href="#系统核数" class="headerlink" title="系统核数"></a>系统核数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// docker 获取的是宿主机核数</span></div><div class="line">Runtime.getRuntime().availableProcessors()</div></pre></td></tr></table></figure>
<h2 id="耗时计算"><a href="#耗时计算" class="headerlink" title="耗时计算"></a>耗时计算</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Returns the current time in milliseconds.</span></div><div class="line">System.currentTimeMillis();</div><div class="line"></div><div class="line"><span class="comment">// Returns the current value of the running JVM's high-resolution</span></div><div class="line"><span class="comment">// time source, in nanoseconds.</span></div><div class="line">System.nanoTime();</div><div class="line"></div><div class="line"><span class="keyword">long</span> nano_startTime = System.nanoTime();</div><div class="line"><span class="keyword">long</span> millis_startTime = System.currentTimeMillis(); </div><div class="line"></div><div class="line"><span class="comment">// Perform the work whose time is to be measured </span></div><div class="line">someFunction(); </div><div class="line"></div><div class="line"><span class="comment">// Get the current system time in both </span></div><div class="line"><span class="comment">// nano and milli-seconds after </span></div><div class="line"><span class="comment">// the function returns. </span></div><div class="line"><span class="keyword">long</span> nano_endTime = System.nanoTime(); </div><div class="line"><span class="keyword">long</span> millis_endTime = System.currentTimeMillis(); </div><div class="line"></div><div class="line"><span class="comment">// Print the time taken by subtracting </span></div><div class="line"><span class="comment">// the end-time from the start-time </span></div><div class="line">System.out.println(<span class="string">"Time taken in nano seconds: "</span></div><div class="line">                   + (nano_endTime - nano_startTime)); </div><div class="line">System.out.println(<span class="string">"Time taken in milli seconds: "</span></div><div class="line">                   + (millis_endTime - millis_startTime))</div></pre></td></tr></table></figure>
<h1 id="WriteLock"><a href="#WriteLock" class="headerlink" title="WriteLock"></a>WriteLock</h1><h2 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h2><h1 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">        <span class="comment">// Netty</span></div><div class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">        <span class="comment">// 4 threads</span></div><div class="line">        EventExecutorGroup group = <span class="keyword">new</span> DefaultEventExecutorGroup(<span class="number">4</span>);</div><div class="line">        Future&lt;Integer&gt; f = group.submit(<span class="keyword">new</span> Callable&lt;Integer&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            System.out.println(<span class="string">"执行耗时操作..."</span>);</div><div class="line">            Thread.sleep(<span class="number">3000</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">        &#125;</div><div class="line">        &#125;);</div><div class="line">        f.addListener(<span class="keyword">new</span> FutureListener&lt;Object&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(Future&lt;Object&gt; objectFuture)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            System.out.println(<span class="string">"计算结果:："</span> + objectFuture.get());</div><div class="line">        &#125;</div><div class="line">        &#125;);</div><div class="line">        System.out.println(<span class="string">"主线程运算耗时:"</span> + (System.currentTimeMillis() - startTime) + <span class="string">" ms"</span>);</div><div class="line">        <span class="comment">//不让守护线程退出</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Guava</span></div><div class="line">    <span class="keyword">long</span> l = System.currentTimeMillis();</div><div class="line">    ListeningExecutorService service = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());</div><div class="line">    ListenableFuture&lt;Integer&gt; future = service.submit(<span class="keyword">new</span> Callable&lt;Integer&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            System.out.println(<span class="string">"执行耗时操作..."</span>);</div><div class="line">            Thread.sleep(<span class="number">3000</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    Futures.addCallback(future, <span class="keyword">new</span> FutureCallback&lt;Integer&gt;() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Integer result)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"计算结果:"</span> + result);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"异步处理失败,e="</span> + throwable);</div><div class="line">        &#125;</div><div class="line">    &#125;, MoreExecutors.directExecutor());</div><div class="line">    System.out.println(<span class="string">"主线程运算耗时:"</span> + (System.currentTimeMillis() - l)+<span class="string">" ms"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="JAXB"><a href="#JAXB" class="headerlink" title="JAXB"></a>JAXB</h1><h2 id="EclipseLink-MOXy的JAXB实现"><a href="#EclipseLink-MOXy的JAXB实现" class="headerlink" title="EclipseLink MOXy的JAXB实现"></a>EclipseLink MOXy的JAXB实现</h2><p>To identify the entry point, create a text file called jaxb.properties and enter the path to the JAXBContextFactory class as the value of the javax.xml.bind.context.factory context parameter, for example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javax.xml.bind.context.factory=org.eclipse.persistence.jaxb.JAXBContextFactory</div></pre></td></tr></table></figure>
<p>The jaxb.properties file must appear in the <code>same package</code> as the domain classes.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- jkd7 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.persistence<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.eclipse.persistence.moxy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- jdk8 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.eclipse.persistence/org.eclipse.persistence.moxy --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.persistence<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.eclipse.persistence.moxy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@XmlPath</span>(<span class="string">"boxSerialNoList/boxSerialNo/serialNo/text()"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getSerials</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> serials;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a href="https://www.eclipse.org/eclipselink/documentation/2.7/concepts/blocks003.htm" title="About the MOXy Solution" target="_blank" rel="external">About the MOXy Solution</a>
<a href="http://blog.bdoughan.com/2011/03/map-to-element-based-on-attribute-value.html" title="JAXB (MOXy)" target="_blank" rel="external">JAXB (MOXy)</a>
<a href="https://www.eclipse.org/eclipselink/documentation/2.6/moxy/advanced_concepts005.htm" title="Mapping Using XPath" target="_blank" rel="external">Mapping Using XPath</a>
<a href="https://www.eclipse.org/eclipselink/documentation/" title="EclipseLink" target="_blank" rel="external">EclipseLink</a>
<p>JAXBContext is thread safe and should only be created once and reused to avoid the cost of initializing the metadata multiple times.  Marshaller and Unmarshaller are not thread safe, but are lightweight to create and could be created per operation.</p>
<h1 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h1><p>反编译成字节码</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javap -c App</div></pre></td></tr></table></figure>
<h1 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h1><p>通过ServiceLoader.load加载接口实现类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ServiceLoader&lt;HelloIntterface&gt; loaders = ServiceLoader.load(HelloIntterface.class);</div><div class="line"><span class="keyword">for</span> (HelloIntterface in : loaders) &#123;</div><div class="line">    in.sayHello();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>resources/META-INF/services目录下，与接口同名文件中，配置接口实现类<br>如 META-INF/services/com.sunday.jdk7.HelloIntterface</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">com.sunday.jdk7.TextHello</div><div class="line">com.sunday.jdk7.ImageHello</div></pre></td></tr></table></figure>
<h1 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h1><p>SecurityManager负责真正的身份验证逻辑；它会委托给Authenticator进行身份验证；</p>
<p>Authenticator才是真正的身份验证者，Shiro API中核心的身份认证入口点，此处可以自<br>定义插入自己的实现；</p>
<p>Shiro 从从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager<br>要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；</p>
<h1 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h1><p>类集成，无法生成正确build方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建包含全部参数方法</span></div><div class="line"><span class="comment">// @Builder注解构造方法</span></div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="meta">@NoArgsConstructor</span></div><div class="line"><span class="meta">@AllArgsConstructor</span></div><div class="line"><span class="meta">@Builder</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlAsynTask</span> <span class="keyword">extends</span> <span class="title">AsynTask</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySqlAsynTask</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Builder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySqlAsynTask</span><span class="params">(String rfeId, Integer taskType, String taskData, Long taskId, String queueId, Integer taskExeCount, Integer status, String remark, Date createTime, Date updateTime, <span class="keyword">int</span> yn)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(rfeId, taskType, taskData);</div><div class="line">        <span class="keyword">this</span>.taskId = taskId;</div><div class="line">        <span class="keyword">this</span>.queueId = queueId;</div><div class="line">        <span class="keyword">this</span>.taskExeCount = taskExeCount;</div><div class="line">        <span class="keyword">this</span>.status = status;</div><div class="line">        <span class="keyword">this</span>.remark = remark;</div><div class="line">        <span class="keyword">this</span>.createTime = createTime;</div><div class="line">        <span class="keyword">this</span>.updateTime = updateTime;</div><div class="line">        <span class="keyword">this</span>.yn = yn;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Builder泛型"><a href="#Builder泛型" class="headerlink" title="Builder泛型"></a>Builder泛型</h2><p><code>lombok</code><br><code>builder</code><br><code>generics</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// https://interviewbubble.com/project-lombok-builder-with-generics/</span></div><div class="line">Response&lt;String&gt; response = Response.&lt;String&gt;builder().body(<span class="string">"body"</span>).build();</div></pre></td></tr></table></figure>
<h2 id="Builder克隆"><a href="#Builder克隆" class="headerlink" title="Builder克隆"></a>Builder克隆</h2><p><code>clone</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ToString</span></div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="meta">@NoArgsConstructor</span></div><div class="line"><span class="meta">@AllArgsConstructor</span></div><div class="line"><span class="meta">@Builder</span>(toBuilder = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// You can use @Builder for copy constructors: foo.toBuilder().build() makes a shallow clone.</span></div><div class="line">foo.toBuilder().build();</div></pre></td></tr></table></figure>
<h2 id="子类builder"><a href="#子类builder" class="headerlink" title="子类builder"></a>子类builder</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@AllArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String parentName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> parentAge;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String childName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> childAge;</div><div class="line">     </div><div class="line">    <span class="meta">@Builder</span>(builderMethodName = <span class="string">"childBuilder"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">(String parentName, <span class="keyword">int</span> parentAge, String childName, <span class="keyword">int</span> childAge)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(parentName, parentAge);</div><div class="line">        <span class="keyword">this</span>.childName = childName;</div><div class="line">        <span class="keyword">this</span>.childAge = childAge;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h2><p>Generates hashCode and equals implementations from the fields of your object.</p>
<h2 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h2><p>生成toString</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToStringExample</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATIC_VAR = <span class="number">10</span>;</div><div class="line">  <span class="keyword">private</span> String name;</div><div class="line">  <span class="keyword">private</span> Shape shape = <span class="keyword">new</span> Square(<span class="number">5</span>, <span class="number">10</span>);</div><div class="line">  <span class="keyword">private</span> String[] tags;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getName();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> width, height;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.width = width;</div><div class="line">      <span class="keyword">this</span>.height = height;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">"Square(super="</span> + <span class="keyword">super</span>.toString() + <span class="string">", width="</span> + <span class="keyword">this</span>.width + <span class="string">", height="</span> + <span class="keyword">this</span>.height + <span class="string">")"</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"ToStringExample("</span> + <span class="keyword">this</span>.getName() + <span class="string">", "</span> + <span class="keyword">this</span>.shape + <span class="string">", "</span> + Arrays.deepToString(<span class="keyword">this</span>.tags) + <span class="string">")"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="lombok-Invalid-byte-tag-in-constant-pool-19"><a href="#lombok-Invalid-byte-tag-in-constant-pool-19" class="headerlink" title="lombok Invalid byte tag in constant pool: 19"></a>lombok Invalid byte tag in constant pool: 19</h2><p>Tomcat 8.0.36 启动失败</p>
<p>org.apache.catalina.startup.ContextConfig.processAnnotationsJar Unable to process Jar entry [module-info.class] from Jar [file:/lombok-1.16.22.jar] for annotations<br> org.apache.tomcat.util.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 19</p>
<p> 从lombok-1.16.20开始打包中存在一个叫module-info.class的文件，一些版本的tomcat启动时，如果classpath下有这个包就会报上面的错误</p>
<p>解决方案：</p>
<ul>
<li>maven中将lombok的scope设为provider;——有效，lombok为注解增强编译，运行时不需要</li>
<li>tomcat 8.0.53有效，未发现异常</li>
</ul>
<p><a href="https://bz.apache.org/bugzilla/show_bug.cgi?id=60688" target="_blank" rel="external">https://bz.apache.org/bugzilla/show_bug.cgi?id=60688</a><br>最后在如下版本做了修复</p>
<ul>
<li>trunk for 9.0.0.M18 onwards</li>
<li>8.5.x for 8.5.12 onwards</li>
<li>8.0.x for 8.0.42 onwards</li>
<li>7.0.x for 7.0.76 onwards</li>
</ul>
<h1 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h1><h2 id="junit"><a href="#junit" class="headerlink" title="junit"></a>junit</h2><h2 id="mockito"><a href="#mockito" class="headerlink" title="mockito"></a>mockito</h2><h2 id="assertj"><a href="#assertj" class="headerlink" title="assertj"></a>assertj</h2><h1 id="Utils"><a href="#Utils" class="headerlink" title="Utils"></a>Utils</h1><h2 id="isNumber"><a href="#isNumber" class="headerlink" title="isNumber"></a>isNumber</h2><p><code>if a String is numeric in Java</code></p>
<p>With Apache Commons Lang 3.5 and above: NumberUtils.isCreatable or StringUtils.isNumeric.<br>With Apache Commons Lang 3.4 and below: NumberUtils.isNumber or StringUtils.isNumeric.</p>
<h1 id="velocity"><a href="#velocity" class="headerlink" title="velocity"></a>velocity</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方式1 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tools</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">toolbox</span> <span class="attr">scope</span>=<span class="string">"application"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tool</span> <span class="attr">key</span>=<span class="string">"jsonUtil"</span> <span class="attr">class</span>=<span class="string">"com.jd.ql.waybill.ump.util.JsonUtil"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">toolbox</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tools</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtil</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将对象转化为json数据</div><div class="line">     * <span class="doctag">@author</span> suihonghua</div><div class="line">     * <span class="doctag">@param</span> obj</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">(Object obj)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(obj == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"this argument is required; it must not be null"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> JSON.toJSONString(obj, SerializerFeature.WriteDateUseDateFormat);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 方式2，velocity 提供的工具包 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">toolbox</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tool</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>date<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>application<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>org.apache.velocity.tools.generic.DateTool<span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tool</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">toolbox</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>TODO 为什么自定义类，使用方式2不行</p>
</blockquote>
<h1 id="protostuff"><a href="#protostuff" class="headerlink" title="protostuff"></a>protostuff</h1><h1 id="MVEL"><a href="#MVEL" class="headerlink" title="MVEL"></a>MVEL</h1><h1 id="JMH"><a href="#JMH" class="headerlink" title="JMH"></a>JMH</h1><h1 id="jvm-DNS-缓存"><a href="#jvm-DNS-缓存" class="headerlink" title="jvm DNS 缓存"></a>jvm DNS 缓存</h1><p>域名解析后，IP保存JVM缓存中</p>
<p>networkaddress.cache.ttl     有效缓存时间（优先级高）<br>sun.net.inetaddr.ttl   有效缓存时间（优先级低）<br>networkaddress.cache.negative.ttl 无效缓存时间（优先级高）<br>sun.net.inetaddr.negative.ttl  无效缓存时间（优先级低）</p>
<p>通过java -D参数传入，-1 永久有效；0 不缓存；其余正值 缓存时间</p>
<p>解析成功缓存时间，默认 永远有效<br>解析失败缓存时间，默认 10秒</p>
<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="Statement-close"><a href="#Statement-close" class="headerlink" title="Statement#close()"></a>Statement#close()</h2><p>When a Statement object is closed, its current ResultSet object, if one exists, is also closed.</p>
<blockquote>
<p>Statement关闭时，ResultSet也会关闭，最佳实践：显示关闭</p>
</blockquote>
<p>In JDBC there are several kinds of resources that ideally should be closed after use.  Even though every Statement and PreparedStatement is specified to be implicitly closed when the Connection object is closed, you can’t be guaranteed when (or if) this happens, especially if it’s used with <code>connection pooling</code>. You should explicitly close your Statement and PreparedStatement objects to be sure. ResultSet objects might also be an issue, but as they are guaranteed to be closed when the corresponding Statement/PreparedStatement object is closed, you can usually disregard it.</p>
<h1 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h1><h2 id="Java集合排序算法报错分析：comparison-method-violates-its-general-contract"><a href="#Java集合排序算法报错分析：comparison-method-violates-its-general-contract" class="headerlink" title="Java集合排序算法报错分析：comparison method violates its general contract"></a>Java集合排序算法报错分析：comparison method violates its general contract</h2><p><code>compare</code></p>
<p>Jdk7以上，Comparator要满足自反性、传递性、对称性，不然Arrays.sort会报IllegalArgumentException</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">java.lang.IllegalArgumentException: Comparison method violates its general contract!</div><div class="line"> at java.util.TimSort.mergeHi(TimSort.java:<span class="number">868</span>)</div><div class="line">  at java.util.TimSort.mergeAt(TimSort.java:<span class="number">485</span>)</div><div class="line">  at java.util.TimSort.mergeCollapse(TimSort.java:<span class="number">408</span>)</div><div class="line">at java.util.TimSort.sort(TimSort.java:<span class="number">214</span>)</div><div class="line">  at java.util.TimSort.sort(TimSort.java:<span class="number">173</span>)</div><div class="line">  at java.util.Arrays.sort(Arrays.java:<span class="number">659</span>)</div><div class="line">  at java.util.Collections.sort(Collections.java:<span class="number">217</span>)</div></pre></td></tr></table></figure>
<a href="http://blog.2baxb.me/archives/993" title="图解JDK7的Comparison method violates its general contract异常" target="_blank" rel="external">图解JDK7的Comparison method violates its general contract异常</a>
<a href="https://blog.csdn.net/ghsau/article/details/42012365" title="Comparison method violates its general contract" target="_blank" rel="external">Comparison method violates its general contract</a>
<a href="https://www.oracle.com/technetwork/java/javase/compatibility-417013.html#incompatibilities" title="jdk7兼容列表" target="_blank" rel="external">jdk7兼容列表</a>
<h1 id="JavaTools"><a href="#JavaTools" class="headerlink" title="JavaTools"></a>JavaTools</h1><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//org.springframework.util.Assert</span></div><div class="line"><span class="comment">//对象非空断言</span></div><div class="line">Assert.notNull(deptId,<span class="string">"eclip店铺信息获取事业部ID失败，品牌ID："</span> + wareBrand);</div><div class="line"><span class="comment">//集合非空断言</span></div><div class="line">Assert.notEmpty(java.util.Collection, java.lang.String)</div></pre></td></tr></table></figure>
<h2 id="fastJson"><a href="#fastJson" class="headerlink" title="fastJson"></a>fastJson</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//JSON 转 Map</span></div><div class="line">String jsonStr = <span class="string">"&#123;\"idNumber\":\"1222244\"&#125;"</span>;</div><div class="line">Map&lt;String, String&gt; map = JSON.parseObject(jsonStr, <span class="keyword">new</span> TypeReference&lt;Map&lt;String, String&gt;&gt;() &#123;&#125;);</div><div class="line"></div><div class="line"><span class="comment">// obj 转 String</span></div><div class="line"><span class="comment">// PrettyFormat json格式化</span></div><div class="line"><span class="comment">// WriteDateUseDateFormat 日期转为 yyyy-MM-dd HH:mm:ss</span></div><div class="line">JSON.toJSONString(pagedDatasByKey, SerializerFeature.PrettyFormat, SerializerFeature.WriteDateUseDateFormat);</div><div class="line"></div><div class="line"><span class="comment">// toJson序列化时如果key是int型，根据json标准应该转化为string型</span></div><div class="line">JSON.toJSONString(data, SerializerFeature.WriteNonStringKeyAsString)</div><div class="line"></div><div class="line"><span class="comment">// 类型转换</span></div><div class="line"><span class="comment">// string2int</span></div><div class="line">Integer cast = TypeUtils.cast(<span class="string">"152"</span>, Integer.class, ParserConfig.getGlobalInstance());</div><div class="line"><span class="comment">// string2enum</span></div><div class="line">SwitchConfigOption open = TypeUtils.cast(<span class="string">"OPEN"</span>, SwitchConfigOption.class, ParserConfig.getGlobalInstance());</div></pre></td></tr></table></figure>
<h2 id="Map-merge"><a href="#Map-merge" class="headerlink" title="Map merge"></a>Map merge</h2><p>map合并</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HashMap&lt;String, Integer&gt; map2 = <span class="keyword">new</span> HashMap&lt;String,Integer&gt;();</div><div class="line">map2.put(<span class="string">"two"</span>, <span class="number">2</span>);</div><div class="line">HashMap&lt;String, Integer&gt; map3 = <span class="keyword">new</span> HashMap&lt;String,Integer&gt;();</div><div class="line">map3.put(<span class="string">"three"</span>, <span class="number">3</span>);</div><div class="line">map3.putAll(map2);</div></pre></td></tr></table></figure>
<h2 id="commons-lang3"><a href="#commons-lang3" class="headerlink" title="commons.lang3"></a>commons.lang3</h2><h3 id="DateUtils"><a href="#DateUtils" class="headerlink" title="DateUtils"></a>DateUtils</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1小时，毫秒数</span></div><div class="line">DateUtils.MILLIS_PER_HOUR</div><div class="line"><span class="comment">// 1天，毫秒数</span></div><div class="line">DateUtils.MILLIS_PER_DAY</div><div class="line"></div><div class="line"><span class="comment">// 日期四舍五入</span></div><div class="line">Date now = <span class="keyword">new</span> Date();</div><div class="line">Date nearestMinute = DateUtils.round(now, Calendar.MINUTE);</div><div class="line"><span class="comment">// 日期 舍弃</span></div><div class="line">Date nearestMinute = DateUtils.truncate(now, Calendar.MINUTE);</div></pre></td></tr></table></figure>
<h3 id="compare"><a href="#compare" class="headerlink" title="compare"></a>compare</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 比较工具</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">final</span> T c1, <span class="keyword">final</span> T c2)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> compare(c1, c2, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">final</span> T c1, <span class="keyword">final</span> T c2, <span class="keyword">final</span> <span class="keyword">boolean</span> nullGreater)</span></span></div></pre></td></tr></table></figure>
<h2 id="分隔字符串"><a href="#分隔字符串" class="headerlink" title="分隔字符串"></a>分隔字符串</h2><p>Splitter.on(‘,’).trimResults().omitEmptyStrings().split(topicStr);</p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring 4]]></title>
      <url>http://xiaozhuang.github.io/2016/07/21/spring4/</url>
      <content type="html"><![CDATA[<p>Spring框架是以简化java EE应用程序的开发为目标而创建的。<br><a id="more"></a></p>
<h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><h2 id="Spring配置的可选方案"><a href="#Spring配置的可选方案" class="headerlink" title="Spring配置的可选方案"></a>Spring配置的可选方案</h2><ul>
<li>XML中显示配置</li>
<li>Java中显示配置</li>
<li>隐式的bean发现机制和自动装配</li>
</ul>
<p>建议尽可能地使用自动装配的机制，显示配置越少越好。<br>推荐使用类型安全且比XML更强大的JavaConfig。<br>只有需要使用便利地XML命名空间，并且在JavaConfig中没有同样的实现时，才应该使用XML。</p>
<h2 id="自动装配bean"><a href="#自动装配bean" class="headerlink" title="自动装配bean"></a>自动装配bean</h2><p>Spring 从两个角度实现自动化装配:</p>
<ul>
<li>组件扫描（component scanning）：发现应用上下文中所创建的bean。</li>
<li>自动装配（autowiring）：自动满足bean之间的依赖。</li>
</ul>
<h2 id="组件扫描的bean命名"><a href="#组件扫描的bean命名" class="headerlink" title="组件扫描的bean命名"></a>组件扫描的bean命名</h2><p>bean的ID默认为类名将首字母变为小写</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注解指定bean名称</span></div><div class="line"><span class="meta">@Component</span>(<span class="string">"cDPlayer"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayer</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span></span>&#123;&#125;</div></pre></td></tr></table></figure>
<h2 id="设置组件扫描的基础包"><a href="#设置组件扫描的基础包" class="headerlink" title="设置组件扫描的基础包"></a>设置组件扫描的基础包</h2><p>@Configuration</p>
<h3 id="默认基础包"><a href="#默认基础包" class="headerlink" title="默认基础包"></a>默认基础包</h3><p>@ComponentScan默认以配置类所在的包作为基础包</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="String指定基础包"><a href="#String指定基础包" class="headerlink" title="String指定基础包"></a>String指定基础包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.sunday"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackages=&#123;<span class="string">"com.sunday.controller"</span>,<span class="string">"com.sunday.services"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Class指定基础包"><a href="#Class指定基础包" class="headerlink" title="Class指定基础包"></a>Class指定基础包</h3><p>这些类所在的包将作为组件扫描的基础包（推荐使用这种方式）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackageClasses=&#123;MediaPlayer.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以考虑在包中创建一个用来进行扫描的空标记接口（marker interface）</p>
<h2 id="通过java代码配置bean"><a href="#通过java代码配置bean" class="headerlink" title="通过java代码配置bean"></a>通过java代码配置bean</h2><p>在进行显示的配置时，javaConfig是更好的方案，它更为强大、类型安全且对重构友好。</p>
<h3 id="创建配置类"><a href="#创建配置类" class="headerlink" title="创建配置类"></a>创建配置类</h3><p>@Configuration注解表明类时配置类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="声明简单bean"><a href="#声明简单bean" class="headerlink" title="声明简单bean"></a>声明简单bean</h3><p>编写一个方法，该方法会创建所需类型的实例，然后给这个方法添加@bean注解。</p>
<p>@bean注解告诉Sring这个方法将会放回一个对象，该对象要注册为Spring应用上下文中的bean。<br>方法体中包含了最终<code>产生bean实例的逻辑</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> CompactDisc <span class="title">sgtPeppers</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> SgtPeppers();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//默认，bean的ID与带有@Bean注解的方法名是一样的</span></div><div class="line"><span class="comment">//通过name属性指定不同的名字</span></div><div class="line"><span class="meta">@Bean</span>(name = <span class="string">"sgtPeppers"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> CompactDisc <span class="title">sgtPeppers</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> SgtPeppers();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="借助javaConfig实现注入"><a href="#借助javaConfig实现注入" class="headerlink" title="借助javaConfig实现注入"></a>借助javaConfig实现注入</h3><p>方式1：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> CompactDisc <span class="title">sgtPeppers</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> SgtPeppers();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> MediaPlayer <span class="title">cDPlayer</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//通过调用sgtPeppers()实现注入</span></div><div class="line">	<span class="comment">//看起来CompactDisc是通过调用sgtPeppers获取的，但并非完全如此</span></div><div class="line">	<span class="comment">//sgtPeppers()是@bean注解的方法，Spring会拦截所有对它的调用，并确保直接放回该方法所创建的bean</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(sgtPeppers());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方式2：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> CompactDisc <span class="title">sgtPeppers</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> SgtPeppers();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//将需要注入的对象，作为参数添加到参数列表</span></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> MediaPlayer <span class="title">cDPlayer</span><span class="params">(CompactDisc compactDisc)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(compactDisc);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过这种方式引用其他bean通常是最佳的选择<br>它不会要求将CompactDisc生命到同一配置类中</p>
<h2 id="导入和混合配置"><a href="#导入和混合配置" class="headerlink" title="导入和混合配置"></a>导入和混合配置</h2><h3 id="JavaConfig配置导入"><a href="#JavaConfig配置导入" class="headerlink" title="JavaConfig配置导入"></a>JavaConfig配置导入</h3><p>使用<code>@Import</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@Import</span>(&#123;CDPlayerConfig.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfig</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JavaConfig混合XML配置"><a href="#JavaConfig混合XML配置" class="headerlink" title="JavaConfig混合XML配置"></a>JavaConfig混合XML配置</h3><p>使用<code>@ImportResource</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ImportResource</span>(<span class="string">"classpath:cd-config.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfig</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="XML配置混合JavaConfig配置"><a href="#XML配置混合JavaConfig配置" class="headerlink" title="XML配置混合JavaConfig配置"></a>XML配置混合JavaConfig配置</h3><p>使用JavaConfig创建bean，添加到xml配置中</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"soundsystem.CDPlayerConfig"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Conditional"><a href="#Conditional" class="headerlink" title="Conditional"></a>Conditional</h2><p><code>条件注册</code><br>@Conditional 只有在特定条件满足时才启用一些配置</p>
<p>除了自自定义Condition之外，Spring-boot还提供了很多Condition给我们用</p>
<a href="https://fangjian0423.github.io/2017/05/16/springboot-condition-annotation/" title="SpringBoot源码分析之条件注解的底层实现" target="_blank" rel="external">SpringBoot源码分析之条件注解的底层实现</a>
<p>@ConditionalOnBean（仅仅在当前上下文中存在某个对象时，才会实例化一个Bean）<br>@ConditionalOnClass（某个class位于类路径上，才会实例化一个Bean）<br>@ConditionalOnExpression（当表达式为true的时候，才会实例化一个Bean）<br>@ConditionalOnMissingBean（仅仅在当前上下文中不存在某个对象时，才会实例化一个Bean）<br>@ConditionalOnMissingClass（某个class类路径上不存在的时候，才会实例化一个Bean）<br>@ConditionalOnNotWebApplication（不是web应用）</p>
<h1 id="面向切面的Spring"><a href="#面向切面的Spring" class="headerlink" title="面向切面的Spring"></a>面向切面的Spring</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sunday.spring_boot_learn.aspect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Sunday on 2017/5/17.</div><div class="line"> */</div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpAspect</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(HttpAspect.class);</div><div class="line"></div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(public * com.sunday.spring_boot_learn.controller.PersonController.*(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//    @Before("log()")</span></div><div class="line"><span class="comment">//    public void doBefore(JoinPoint joinPoint)&#123;</span></div><div class="line"><span class="comment">//        //类名和方法名</span></div><div class="line"><span class="comment">//        logger.debug("before invoke: &#123;&#125;.&#123;&#125;() args=&#123;&#125;",</span></div><div class="line"><span class="comment">//                joinPoint.getSignature().getDeclaringTypeName(),</span></div><div class="line"><span class="comment">//                joinPoint.getSignature().getName(),</span></div><div class="line"><span class="comment">//                joinPoint.getArgs());</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//    @After("log()")</span></div><div class="line"><span class="comment">//    public void doAfter(JoinPoint joinPoint)&#123;</span></div><div class="line"><span class="comment">//        logger.debug("after invoke: &#123;&#125;.&#123;&#125;() args=&#123;&#125;",</span></div><div class="line"><span class="comment">//                joinPoint.getSignature().getDeclaringTypeName(),</span></div><div class="line"><span class="comment">//                joinPoint.getSignature().getName(),</span></div><div class="line"><span class="comment">//                joinPoint.getArgs());</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"></div><div class="line">    <span class="meta">@Around</span>(<span class="string">"log()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        logger.debug(<span class="string">"before invoke: &#123;&#125;.&#123;&#125;() args=&#123;&#125;"</span>,</div><div class="line">                joinPoint.getSignature().getDeclaringTypeName(),</div><div class="line">                joinPoint.getSignature().getName(),</div><div class="line">                joinPoint.getArgs());</div><div class="line"></div><div class="line">        Object result = joinPoint.proceed();</div><div class="line"></div><div class="line"></div><div class="line">        logger.debug(<span class="string">"after invoke: &#123;&#125;.&#123;&#125;() args=&#123;&#125;"</span>,</div><div class="line">                joinPoint.getSignature().getDeclaringTypeName(),</div><div class="line">                joinPoint.getSignature().getName(),</div><div class="line">                joinPoint.getArgs());</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@AfterReturning</span>(returning = <span class="string">"object"</span>, pointcut = <span class="string">"log()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterReturning</span><span class="params">(Object object)</span></span>&#123;</div><div class="line">        logger.debug(<span class="string">"response=&#123;&#125;"</span>, object);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="注解事务"><a href="#注解事务" class="headerlink" title="注解事务"></a>注解事务</h1><p>@Transactional 注解</p>
<ul>
<li>value             指定事务管理器</li>
<li>propagation       事务传播行为，默认值 REQUIRED</li>
<li>isolation         事务隔离度，默认值 DEFAULT</li>
<li>timeout           事务的超时时间，默认值为-1，单位是秒</li>
<li>readOnly          是否为只读事务，默认值为 false</li>
<li>rollbackFor       能够触发事务回滚的异常类型</li>
<li>noRollbackFor     指定的异常类型，不回滚事务</li>
</ul>
<h2 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h2><table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>TransactionDefinition.PROPAGATION_REQUIRED</td>
<td><code>默认值</code>，如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务</td>
</tr>
<tr>
<td>TransactionDefinition.PROPAGATION_REQUIRES_NEW</td>
<td>创建一个新的事务，如果当前存在事务，则把当前事务挂起</td>
</tr>
<tr>
<td>TransactionDefinition.PROPAGATION_SUPPORTS</td>
<td>如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行</td>
</tr>
<tr>
<td>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</td>
<td>以非事务方式运行，如果当前存在事务，则把当前事务挂起</td>
</tr>
<tr>
<td>TransactionDefinition.PROPAGATION_NEVER</td>
<td>以非事务方式运行，如果当前存在事务，则抛出异常</td>
</tr>
<tr>
<td>TransactionDefinition.PROPAGATION_MANDATORY</td>
<td>如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常</td>
</tr>
<tr>
<td>TransactionDefinition.PROPAGATION_NESTED</td>
<td>如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于REQUIRED</td>
</tr>
</tbody>
</table>
<h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>TransactionDefinition.ISOLATION_DEFAULT</td>
<td><code>默认值</code>，默认隔离级别</td>
</tr>
<tr>
<td>TransactionDefinition.ISOLATION_READ_UNCOMMITTED</td>
<td>未提交读（Read uncommitted）</td>
</tr>
<tr>
<td>TransactionDefinition.ISOLATION_READ_COMMITTED</td>
<td>已提交读（Read committed）</td>
</tr>
<tr>
<td>TransactionDefinition.ISOLATION_REPEATABLE_READ</td>
<td>可重复读（Repeatable read）</td>
</tr>
<tr>
<td>TransactionDefinition.ISOLATION_SERIALIZABLE</td>
<td>可串行化（Serializable）</td>
</tr>
</tbody>
</table>
<h2 id="事务的只读属性"><a href="#事务的只读属性" class="headerlink" title="事务的只读属性"></a>事务的只读属性</h2><p>如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以<code>提高事务处理的性能</code></p>
<p>取决于JDBC实现，并不是所有都支持的；MySQL支持，Oracle不支持</p>
<h2 id="事务的回滚规则"><a href="#事务的回滚规则" class="headerlink" title="事务的回滚规则"></a>事务的回滚规则</h2><p>默认情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常）或者 Error，则 Spring 将回滚事务；除此之外，Spring 不会回滚事务。</p>
<h2 id="注解方式的事务使用注意事项"><a href="#注解方式的事务使用注意事项" class="headerlink" title="注解方式的事务使用注意事项"></a>注解方式的事务使用注意事项</h2><p>@Transactional 只能应用到 public 方法才有效<br>若不是 public，就不会获取@Transactional 的属性配置信息，最终会造成不会用 TransactionInterceptor 来拦截该目标方法进行事务管理</p>
<h2 id="不加-Transactional"><a href="#不加-Transactional" class="headerlink" title="不加@Transactional"></a>不加@Transactional</h2><p>不管写不写transaction，事务是肯定有的。<br>只是<code>默认单条sql一个事务</code>，<br>如果我们在Service层的方法上加Transaction注解，那么事务的范围就会扩大，包含在service方法执行的所有sql</p>
<h2 id="DBCP修改默认隔离级别"><a href="#DBCP修改默认隔离级别" class="headerlink" title="DBCP修改默认隔离级别"></a>DBCP修改默认隔离级别</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- waybillSchedule数据源 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"waybillScheduleDatasource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp2.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;waybill.schedule.datasource.driverClassName&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;waybill.schedule.datasource.url&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;waybill.schedule.datasource.username&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;waybill.schedule.datasource.password&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultAutoCommit"</span> <span class="attr">value</span>=<span class="string">"$&#123;waybill.schedule.datasource.defaultAutoCommit&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"$&#123;waybill.schedule.datasource.maxActive&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;waybill.schedule.datasource.maxIdle&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;waybill.schedule.datasource.maxWait&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;waybill.schedule.datasource.initialSize&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;waybill.schedule.datasource.minIdle&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;waybill.schedule.datasource.minEvictableIdleTimeMillis&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;waybill.schedule.datasource.timeBetweenEvictionRunsMillis&#125;"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;property name="removeAbandoned" value="$&#123;waybill.schedule.datasource.removeAbandoned&#125;"/&gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!-- NONE,READ_COMMITTED,READ_UNCOMMITTED,REPEATABLE_READ,SERIALIZABLE --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultTransactionIsolation"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 修改事务默认隔离级别 rc --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">util:constant</span> <span class="attr">static-field</span>=<span class="string">"java.sql.Connection.TRANSACTION_READ_COMMITTED"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"removeAbandonedTimeout"</span> <span class="attr">value</span>=<span class="string">"$&#123;waybill.schedule.datasource.removeAbandonedTimeout&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"logAbandoned"</span> <span class="attr">value</span>=<span class="string">"$&#123;waybill.schedule.datasource.logAbandoned&#125;"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="开启注解驱动事务"><a href="#开启注解驱动事务" class="headerlink" title="开启注解驱动事务"></a>开启注解驱动事务</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 注解事务 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- order, default is Ordered.LOWEST_PRECEDENCE --&gt;</span></div><div class="line"><span class="comment">&lt;!-- proxy-target-class, default false --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 启用缓存 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- order default is Ordered.LOWEST_PRECEDENCE--&gt;</span></div><div class="line"><span class="comment">&lt;!-- proxy-target-class default false --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">cache:annotation-driven</span> <span class="attr">cache-manager</span>=<span class="string">"cacheManager"</span> <span class="attr">order</span>=<span class="string">"2147483647"</span> <span class="attr">proxy-target-class</span>=<span class="string">"false"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h1 id="Transaction-Hook"><a href="#Transaction-Hook" class="headerlink" title="Transaction Hook"></a>Transaction Hook</h1><p><code>org.springframework.transaction.support.TransactionSynchronization</code><br><code>org.springframework.cache.transaction.TransactionAwareCacheDecorator</code></p>
<p>事务提交之后才操作缓存</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (TransactionSynchronizationManager.isSynchronizationActive()) &#123;</div><div class="line">    TransactionSynchronizationManager.registerSynchronization(<span class="keyword">new</span> TransactionSynchronizationAdapter() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCommit</span><span class="params">()</span> </span>&#123;</div><div class="line">            TransactionAwareCacheDecorator.<span class="keyword">this</span>.targetCache.put(key, value);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">this</span>.targetCache.put(key, value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><h2 id="生成md5"><a href="#生成md5" class="headerlink" title="生成md5"></a>生成md5</h2><p><code>spring-core-3.0.3.RELEASE.jar</code><br>org.springframework.util.DigestUtils</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DigestUtils.md5DigestAsHex(filePath.getBytes()).toUpperCase();</div></pre></td></tr></table></figure>
<h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><p>spring mvc 3以及之前版本可能存在的一个<br>redirect引起的内存泄露问题<br>示例为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.POST)  </div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">onPost</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="comment">// ...  </span></div><div class="line">    <span class="keyword">return</span> <span class="string">"redirect:form.html?entityId="</span> + entityId;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>AbstractCachingViewResolver中viewCache缓存视图<br>redirect这个时候，使用的是整个从controller方法中返回的字符串，做为view name</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.POST)    </div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">onPost</span><span class="params">(RedirectAttributes redirectAttrs)</span> </span>&#123;    </div><div class="line">    <span class="comment">// ...  </span></div><div class="line">    redirectAttrs.addAttribute(<span class="string">"entityId"</span>, entityId)  </div><div class="line">    <span class="keyword">return</span> <span class="string">"redirect:form.html?entityId=&#123;entityId&#125;"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Sriing </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
