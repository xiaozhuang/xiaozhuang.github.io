<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title></title>
      <url>http://xiaozhuang.github.io/2017/06/19/README/</url>
      <content type="html"><![CDATA[<h1 id="note"><a href="#note" class="headerlink" title="note"></a>note</h1><p>知识笔记<br>博客地址：<a href="http://xiaozhuang.github.io/">http://xiaozhuang.github.io/</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Sass & Compass]]></title>
      <url>http://xiaozhuang.github.io/2016/11/15/sass-compass/</url>
      <content type="html"><![CDATA[<p>Sass 是对 CSS 的扩展，让 CSS 语言更强大、优雅。 它允许你使用变量、嵌套规则、 mixins、导入等众多功能， 并且完全兼容 CSS 语法。<br>Compass is an open-source CSS Authoring Framework<br><a id="more"></a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="更换rem-源"><a href="#更换rem-源" class="headerlink" title="更换rem 源"></a>更换rem 源</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#移除默认gem源</span></div><div class="line">gem <span class="built_in">source</span> -remove https://rubygems.org/</div><div class="line"><span class="comment">#添加国内gem源</span></div><div class="line">gem sources -a http://gems.ruby-china.org/</div><div class="line"><span class="comment">#查看gem源列表，确认是否修改成功</span></div><div class="line">gem sources -l</div></pre></td></tr></table></figure>
<h2 id="安装sass"><a href="#安装sass" class="headerlink" title="安装sass"></a>安装sass</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gem install sass</div><div class="line"><span class="comment">#查看sass版本</span></div><div class="line">sass --v</div></pre></td></tr></table></figure>
<h2 id="安装compass"><a href="#安装compass" class="headerlink" title="安装compass"></a>安装compass</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gem install compass</div><div class="line"><span class="comment">#查看compass版本</span></div><div class="line">compass -v</div></pre></td></tr></table></figure>
<h2 id="安装normalize"><a href="#安装normalize" class="headerlink" title="安装normalize"></a>安装normalize</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gem install compass-normalize</div><div class="line"><span class="comment">#查看所有安装程序</span></div><div class="line">gem list</div></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="Compass生成sourcemap"><a href="#Compass生成sourcemap" class="headerlink" title="Compass生成sourcemap"></a>Compass生成sourcemap</h2><p>config.rb添加sourcemap = true</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><a href="http://sass.bootcss.com/" title="SASS中文文档" target="_blank" rel="external">SASS中文文档</a></li>
<li><a href="http://www.w3cplus.com/sassguide/" title="SASS入门教程" target="_blank" rel="external">SASS入门教程</a></li>
<li><a href="http://compass-style.org/" title="Compass官网" target="_blank" rel="external">Compass官网</a>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Sass </tag>
            
            <tag> Compass </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LiveReload Note]]></title>
      <url>http://xiaozhuang.github.io/2016/09/21/livereload-note/</url>
      <content type="html"><![CDATA[<p>修改html浏览器自动加载页面<br><a id="more"></a></p>
<h1 id="browsersync"><a href="#browsersync" class="headerlink" title="browsersync"></a>browsersync</h1><p><a href="https://www.browsersync.io/" target="_blank" rel="external">https://www.browsersync.io/</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g browser-sync</div></pre></td></tr></table></figure>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">browser-sync start --server --files <span class="string">"**"</span></div><div class="line"></div><div class="line">// --files 路径是相对于运行该命令的项目（目录） </div><div class="line">browser-sync start --server --files <span class="string">"css/*.css, *.html"</span></div><div class="line">// 如果你的文件层级比较深，您可以考虑使用 **（表示任意目录）匹配，任意目录下任意.css 或 .html文件。 </div><div class="line">browser-sync start --server --files <span class="string">"**/*.css, **/*.html"</span></div></pre></td></tr></table></figure>
<h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><a href="http://10.10.60.49:3000/" target="_blank" rel="external">http://10.10.60.49:3000/</a></p>
<p>browser-sync设置:<br><a href="http://10.10.60.49:3001/" target="_blank" rel="external">http://10.10.60.49:3001/</a></p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Powerful Development Tool </tag>
            
            <tag> WEB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mongodb Note]]></title>
      <url>http://xiaozhuang.github.io/2016/08/21/mongodb_note/</url>
      <content type="html"><![CDATA[<p>MongoDB是为处理大数据而生的一款面向文档的数据库，由10gen公司开发和维护;<br>使用场景,Web应用程序、分析与记录应用程序，以及任何要求有中等级别缓存的应用程序。此外，由于能方便地存储无Schema数据，MongoDB还很适合保存事先无法知晓其数据结构的数据。</p>
<a id="more"></a>
<h1 id="MongoDB资源网站："><a href="#MongoDB资源网站：" class="headerlink" title="MongoDB资源网站："></a>MongoDB资源网站：</h1><ul>
<li><a href="https://www.mongodb.com/" title="MongoDB官网" target="_blank" rel="external">MongoDB官网</a></li>
<li><a href="http://www.mongoing.com/" title="MongoDB中文官网" target="_blank" rel="external">MongoDB中文官网</a></li>
<li><a href="https://docs.mongodb.com/" title="文档" target="_blank" rel="external">文档</a></li>
<li><a href="http://docs.mongoing.com/manual-zh/tutorial/text-search-with-rlp.html" title="中文文档" target="_blank" rel="external">中文文档</a></li>
<li><a href="https://github.com/mongodb/" title="github" target="_blank" rel="external">github</a></li>
<li><a href="https://jira.mongodb.org/secure/Dashboard.jspa" title="jira" target="_blank" rel="external">jira</a></li>
<li><a href="https://groups.google.com/forum/#!forum/mongodb-user" title="mongodb-user" target="_blank" rel="external">mongodb-user</a></li>
<li><a href="https://groups.google.com/forum/#!forum/mongo-cn" title="mongo-cn" target="_blank" rel="external">mongo-cn</a>
</li>
</ul>
<h1 id="sql数据库与nosql数据库对比"><a href="#sql数据库与nosql数据库对比" class="headerlink" title="sql数据库与nosql数据库对比"></a>sql数据库与nosql数据库对比</h1><table>
<thead>
<tr>
<th>sql数据库</th>
<th>nosql数据库 </th>
</tr>
</thead>
<tbody>
<tr>
<td>实时一致性</td>
<td>简单便捷</td>
</tr>
<tr>
<td>事务</td>
<td>方便扩展</td>
</tr>
<tr>
<td>多表联合查询</td>
<td>更好的性能</td>
</tr>
</tbody>
</table>
<h1 id="MongoDB特点"><a href="#MongoDB特点" class="headerlink" title="MongoDB特点"></a>MongoDB特点</h1><h2 id="无数据结构限制"><a href="#无数据结构限制" class="headerlink" title="无数据结构限制"></a>无数据结构限制</h2><ul>
<li>没有表结构，每条记录可以有完全不同的结构（不需要事先定义表结构再使用）</li>
<li>业务开发方便快捷</li>
</ul>
<h2 id="完全的索引支持"><a href="#完全的索引支持" class="headerlink" title="完全的索引支持"></a>完全的索引支持</h2><ul>
<li>单键索引，多键索引</li>
<li>数组索引</li>
<li>全文索引（不支持中文）</li>
<li>地理位置索引（2D）</li>
</ul>
<blockquote>
<p>redis支持key-value索引；hbase支持单索引，二级索引需要自己实现；</p>
</blockquote>
<h2 id="方便的冗余与扩展"><a href="#方便的冗余与扩展" class="headerlink" title="方便的冗余与扩展"></a>方便的冗余与扩展</h2><ul>
<li>复制集保证数据安全</li>
<li>分片扩展数据规模</li>
</ul>
<h2 id="良好的支持"><a href="#良好的支持" class="headerlink" title="良好的支持"></a>良好的支持</h2><ul>
<li>完善的文档</li>
<li>齐全的驱动支持</li>
</ul>
<h1 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h1><p>MongoDB版本，格式a.b.c，b为偶数代表稳定版</p>
<h2 id="编译源码或下载二进制安装包"><a href="#编译源码或下载二进制安装包" class="headerlink" title="编译源码或下载二进制安装包"></a>编译源码或下载二进制安装包</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#进入源码根目录，编译源码</span></div><div class="line">scons all</div></pre></td></tr></table></figure>
<p>二进制安装包下载地址:<br><a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="external">https://www.mongodb.com/download-center?jmp=nav#community</a></p>
<h2 id="MongoDB程序"><a href="#MongoDB程序" class="headerlink" title="MongoDB程序"></a>MongoDB程序</h2><p>mongod：MongoDB执行程序<br>mongo：MongoDB客户端<br>mongoexport/mongoimport：导入/导出<br>mongodump/mongorestore：导入/导出二进制（数据备份）<br>mongooplog：操作日志回放<br>mongostat：MongoDB状态</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>创建MongoDB运行目录<br>bin：程序目录</p>
<blockquote>
<p>将mongod拷贝到bin目录下</p>
</blockquote>
<p>conf：配置目录</p>
<blockquote>
<p>创建mongod.conf，添加配置：</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">port=27017</div><div class="line">dbpath=data</div><div class="line">logpath=<span class="built_in">log</span>/mongod.log</div><div class="line"><span class="comment">#后台运行</span></div><div class="line">fork=<span class="literal">true</span></div></pre></td></tr></table></figure>
<p>data：数据目录<br>log：日志目录</p>
<h2 id="启动MongoDB"><a href="#启动MongoDB" class="headerlink" title="启动MongoDB"></a>启动MongoDB</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/mongod -f conf/mongod.conf</div></pre></td></tr></table></figure>
<h2 id="使用客户端mongo连接数据库"><a href="#使用客户端mongo连接数据库" class="headerlink" title="使用客户端mongo连接数据库"></a>使用客户端mongo连接数据库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/mongo 127.0.0.1:27017/<span class="built_in">test</span></div></pre></td></tr></table></figure>
<h2 id="停止MongoDB服务"><a href="#停止MongoDB服务" class="headerlink" title="停止MongoDB服务"></a>停止MongoDB服务</h2><p>方式1：从客户端停止</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#切换到admin数据库</span></div><div class="line">use admin</div><div class="line"><span class="comment">#停止数据库服务器</span></div><div class="line">db.shutdownServer()</div></pre></td></tr></table></figure>
<p>方式2：结束进程，使用kill -15 [pid]</p>
<h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><h2 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show dbs</div></pre></td></tr></table></figure>
<h2 id="更改当前操作的数据库"><a href="#更改当前操作的数据库" class="headerlink" title="更改当前操作的数据库"></a>更改当前操作的数据库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#可以切换到不存在的数据库，在数据库中添加数据时，MongoDB会自动创建数据库</span></div><div class="line">use demo_db</div></pre></td></tr></table></figure>
<h2 id="查看数据库中集合"><a href="#查看数据库中集合" class="headerlink" title="查看数据库中集合"></a>查看数据库中集合</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show tables</div></pre></td></tr></table></figure>
<h2 id="删除数据库中集合"><a href="#删除数据库中集合" class="headerlink" title="删除数据库中集合"></a>删除数据库中集合</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#格式：db.集合名d.drop()</span></div><div class="line">db.demo_collection.drop()</div></pre></td></tr></table></figure>
<h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#语法：db.数据集名.insert(JSON数据)</span></div><div class="line">db.demo_collection.insert(&#123;x:1&#125;)</div><div class="line">db.demo_collection.insert(&#123;x:2,y:2&#125;)</div><div class="line"></div><div class="line"><span class="comment">#使用js语法添加多条数据</span></div><div class="line"><span class="keyword">for</span>(i = 3;i &lt; 100;i++) db.demo_collection.insert(&#123;x:i&#125;)</div></pre></td></tr></table></figure>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#语法：db.数据集名.find(查询条件)，查询条件为空，查询全部</span></div><div class="line">db.demo_collection.find()</div><div class="line">db.demo_collection.find(&#123;x:1&#125;)</div><div class="line"></div><div class="line"><span class="comment">#查询数量条数</span></div><div class="line">db.demo_collection.find().count()</div><div class="line"></div><div class="line"><span class="comment">#查询偏移</span></div><div class="line">db.demo_collection.find().skip(3).<span class="built_in">limit</span>(2).sort(&#123;x:1&#125;)</div><div class="line"></div><div class="line"><span class="comment">#排序，&#123;字段：规则&#125;，1：正序，-1：倒序</span></div><div class="line">db.demo_collection.find().skip(3).<span class="built_in">limit</span>(2).sort(&#123;x:1&#125;)</div></pre></td></tr></table></figure>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#将符合条件的文档更新为&#123;x:999&#125;</span></div><div class="line">db.demo_collection.update(&#123;x:1&#125;,&#123;x:999&#125;);</div><div class="line"></div><div class="line"><span class="comment">#部分更新</span></div><div class="line">db.demo_collection.update(&#123;z:3&#125;,&#123;<span class="variable">$set</span>:&#123;y:99&#125;&#125;)</div><div class="line"></div><div class="line"><span class="comment">#更新数据不存在则insert</span></div><div class="line">db.demo_collection.update(&#123;y:100&#125;,&#123;y:999&#125;,<span class="literal">true</span>)</div><div class="line"></div><div class="line"><span class="comment">#若满足条件数据有多条，仅更新一条</span></div><div class="line">db.demo_collection.update(&#123;c:1&#125;,&#123;c:2&#125;)</div><div class="line"></div><div class="line"><span class="comment">#更新多条数据，更新多条数据只能使用 $ operators</span></div><div class="line">db.demo_collection.update(&#123;c:1&#125;,&#123;<span class="variable">$set</span>:&#123;c:2&#125;&#125;,<span class="literal">false</span>,<span class="literal">true</span>)</div></pre></td></tr></table></figure>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#执行删除必须指定条件，否则不删除任何数据</span></div><div class="line">db.demo_collection.remove(&#123;c:2&#125;)</div><div class="line"></div><div class="line"><span class="comment">#删除集合</span></div><div class="line">db.demo_collection.drop()</div></pre></td></tr></table></figure>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="索引种类"><a href="#索引种类" class="headerlink" title="索引种类"></a>索引种类</h2><ul>
<li>_id索引</li>
<li>单键索引</li>
<li>多键索引</li>
<li>复合索引</li>
<li>过期索引</li>
<li>全文索引</li>
<li>地理位置索引</li>
</ul>
<h2 id="id索引"><a href="#id索引" class="headerlink" title="_id索引"></a>_id索引</h2><p>绝大多数集合默认创建的索引<br>对于每个插入的数据，MongoDB会自动生成一条唯一的_id字段</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#查看集合中索引</span></div><div class="line">db.demo_collection.getIndexes()</div></pre></td></tr></table></figure>
<h2 id="单键索引"><a href="#单键索引" class="headerlink" title="单键索引"></a>单键索引</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 创建单键索引，索引可以重复创建，创建已存在的索引，返回success</span></div><div class="line"><span class="comment"># 索引值：1，正向索引；-1：逆向索引；</span></div><div class="line">db.demo_collection.ensureIndex(&#123;x:1&#125;)</div></pre></td></tr></table></figure>
<h2 id="多键索引"><a href="#多键索引" class="headerlink" title="多键索引"></a>多键索引</h2><p>多键索引与单键索引创建形式相同，区别在于字段的值<br>单键索引：值为一个单一的值，如：字符串，数字或日期<br>多键索引：值具有多个记录，如：数组</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#若已在x上创建单键索引，添加数据为数组的记录，MongoDB将为该记录创建多键索引</span></div><div class="line">db.demo_collection.insert(&#123;x:[1,2,3,4,5]&#125;)</div></pre></td></tr></table></figure>
<h2 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h2><p>当查询条件不只有一个时，需要创建符合索引</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db.demo_collection.ensureIndex(&#123;x:1,y:-1&#125;)</div><div class="line"></div><div class="line"><span class="comment">#使用符合索引</span></div><div class="line">db.demo_collection.find(&#123;x:1,y:2&#125;)</div></pre></td></tr></table></figure>
<h2 id="过期索引"><a href="#过期索引" class="headerlink" title="过期索引"></a>过期索引</h2><p>一段时间后会过期的索引<br>索引过期后，响应的数据会被删除<br>适合存储一段时间后会失效的数据，如：用户登录信息，日志；</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#指定过期时间，单位：s</span></div><div class="line">db.demo_collection.ensureIndex(&#123;time:1&#125;,&#123;expireAfterSeconds:30&#125;)</div><div class="line"><span class="comment">#插入数据</span></div><div class="line">db.demo_collection.insert(&#123;</div><div class="line">	time:new Date()</div><div class="line">&#125;)</div><div class="line">`</div></pre></td></tr></table></figure>
<blockquote>
<p>过期索引的限制</p>
<ul>
<li>存储在过期索引字段的值必须是时间类型，必须是ISODate或者ISODate数组，不能使用时间戳，否则不能被自动删除</li>
<li>指定ISODate数组，按最小时间进行删除</li>
<li>过期索引不能是符合索引</li>
<li>删除时间是不精确的，删除过程是有后台进程每60s跑一次，而且删除也需要时间，所以存在误差</li>
</ul>
</blockquote>
<p>过期索引试验失败，数据未删除</p>
<h2 id="全局索引"><a href="#全局索引" class="headerlink" title="全局索引"></a>全局索引</h2><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><h2 id="连接数据库警告："><a href="#连接数据库警告：" class="headerlink" title="连接数据库警告："></a>连接数据库警告：</h2><p>You are running on a NUMA machine.<br>We suggest launching mongod like this to avoid performance problems:<br>numactl –interleave=all mongod [other options]</p>
<p>解决方法：原启动命令前面加numactl –interleave=all</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install -y numactl</div><div class="line">numactl --interleave=all ./bin/mongod -f conf/mongod.conf</div></pre></td></tr></table></figure>
<p>MongoDB 3.2.9没该警告，有文章称添加numactl –interleave=all后可以提高MongoDB备份性能</p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Groovy Note]]></title>
      <url>http://xiaozhuang.github.io/2016/08/11/groovy-note/</url>
      <content type="html"><![CDATA[<p>Groovy是运行在JVM上轻量级的、限制较少的、面向对象的动态语言。<br>动态语言的灵活性给我们带来了在应用执行时演进程序的优势。这远远超越了代码生成。<br>代码生成是20世纪才会考虑的技术。动态语言有更好的方式。<br><a id="more"></a></p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>groovyConsole:<br>启动：groovy-2.4.7path\bin\groovyConsole.bat<br>Ctrl+Enter:运行脚本<br>Ctrl+W:清除控制台输出</p>
<p>groovyConsole引入jar包，将jar包添加到{groovy.home}/lib/或{user.home}/.groovy/lib/目录下，重启groovyConsole</p>
<h1 id="面向java开发者的Groovy"><a href="#面向java开发者的Groovy" class="headerlink" title="面向java开发者的Groovy"></a>面向java开发者的Groovy</h1><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>Groovy中闭包是去掉了冗长感的短小的匿名方法。</p>
<h2 id="闭包的便利性"><a href="#闭包的便利性" class="headerlink" title="闭包的便利性"></a>闭包的便利性</h2><p>Groovy中的闭包完全避免了代码的冗长，而且可以辅助创建<code>轻量级</code>、<code>可复用</code>的<code>代码片段</code>。</p>
<h2 id="Groovy闭包使用方式"><a href="#Groovy闭包使用方式" class="headerlink" title="Groovy闭包使用方式"></a>Groovy闭包使用方式</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> pickEven(n, block)&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n; i++)&#123;</div><div class="line">		block(i)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">pickEven(<span class="number">10</span>,&#123;print it &#125;)</div><div class="line"></div><div class="line"><span class="comment">//当闭包是方法调用的最后一个参数时，可以将闭包附到方法调用上</span></div><div class="line">pickEven(<span class="number">10</span>) &#123;print it&#125;</div></pre></td></tr></table></figure>
<p>Groovy中闭包不能单独存在，只能<code>附到一个方法上</code>，或是<code>赋值给一个变量</code></p>
<p>闭包是一个函数，这里的变量都绑定到了一个上下文环境中，函数在其中执行</p>
<h2 id="向闭包传递参数"><a href="#向闭包传递参数" class="headerlink" title="向闭包传递参数"></a>向闭包传递参数</h2><p>对于单参数的闭包，it是该参数的默认名称。<br>如果传入的参数多于一个，就需要通过名字一一列出。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> tellFortune(closure)&#123;</div><div class="line">	closure <span class="keyword">new</span> Date(<span class="string">"09/20/2012"</span>), <span class="string">"Your day is filled with ceremony"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">tellFortune()&#123;date,fortune -&gt;</div><div class="line">	println <span class="string">"Fortune for $&#123;date&#125; is '$&#123;fortune&#125;'"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用闭包进行资源清理"><a href="#使用闭包进行资源清理" class="headerlink" title="使用闭包进行资源清理"></a>使用闭包进行资源清理</h2><p>自动处理文件流flush和close</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> FileWriter(<span class="string">'output.txt'</span>).withWriter&#123;</div><div class="line">	writer -&gt; writer.write(<span class="string">'a'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>自定义类Resource，使用前自动调用open(),使用后自动调用close()</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span> &#123;</span></div><div class="line">	<span class="keyword">def</span> open()&#123;</div><div class="line">		print <span class="string">"opened..."</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">def</span> close()&#123;</div><div class="line">		print <span class="string">"closed"</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">def</span> read()&#123;</div><div class="line">		print <span class="string">"read..."</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">def</span> write()&#123;</div><div class="line">		print <span class="string">"write..."</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">def</span> <span class="keyword">static</span> use(closure)&#123;</div><div class="line">		<span class="keyword">def</span> r = <span class="keyword">new</span> Resource()</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			r.open()</div><div class="line">			closure(r)</div><div class="line">		&#125; <span class="keyword">finally</span>&#123;</div><div class="line">			r.close()</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">def</span> args)&#123;</div><div class="line">		<span class="comment">//使用</span></div><div class="line">		Resource.use(&#123; res -&gt;</div><div class="line">			res.read()</div><div class="line">			res.write()</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用Execute Around Method模式<br>接收一个块作为参数。在方法中，把对该块的调用夹到对那对方法的调用中间。<br>先调用第一个方法，然后调用该块，最后调用第二个方法。</p>
</blockquote>
<h2 id="闭包与协程"><a href="#闭包与协程" class="headerlink" title="闭包与协程"></a>闭包与协程</h2><p>调用一个函数或方法会在程序的执行序列中创建一个新的作用域。在一个入口点（方法最上面的语句）进入函数，在方法完成之后，回到调用者的作用域。</p>
<p>协程（Coroutine）则支持多个入口点，每个入口点都是上次挂起调用的位置。<br>我们可以进入一个函数，执行部分代码，挂起，在回到调用者的上下文或作用域执行一些代码。之后我们可以在挂起的地方恢复该函数的执行。</p>
<p>java中，wait() 和 notify() 与多线程结合使用，可以协助实现协程。</p>
<p>闭包会让人产生“协程是在一个线程中执行”的感觉（或者说错觉）。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> iterate(n, closure)&#123;</div><div class="line">	<span class="number">1.</span>upto(n) &#123;</div><div class="line">		println <span class="string">"In iterate with value $&#123;it&#125;"</span></div><div class="line">		closure(it)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">println <span class="string">"Calling iterate"</span></div><div class="line"><span class="keyword">def</span> total = <span class="number">0</span></div><div class="line">iterate(<span class="number">4</span>)&#123;</div><div class="line">	total += it</div><div class="line">	println <span class="string">"In closure total so far is $&#123;total&#125;"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>输出：<br>Calling iterate<br>In iterate with value 1<br>In closure total so far is 1<br>In iterate with value 2<br>In closure total so far is 3<br>In iterate with value 3<br>In closure total so far is 6<br>In iterate with value 4<br>In closure total so far is 10</p>
</blockquote>
<h2 id="科里化闭包-Curried-Closure"><a href="#科里化闭包-Curried-Closure" class="headerlink" title="科里化闭包(Curried Closure)"></a>科里化闭包(Curried Closure)</h2><p>带有预绑定参数的闭包叫做科里化闭包</p>
<p>对一个闭包调用curry()，预先绑定参数</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> tellFortunes(closure)&#123;</div><div class="line">	Date date = <span class="keyword">new</span> Date(<span class="string">"09/20/2012"</span>);</div><div class="line">	<span class="comment">//closure date, "Your day is filled with ceremony"</span></div><div class="line">	<span class="comment">//closure date, "They're features, not bugs"</span></div><div class="line">	</div><div class="line">	<span class="comment">//可以通过科里化避免重复发送date,postfortune保存科里化之后的闭包</span></div><div class="line">	<span class="keyword">def</span> postfortune = closure.curry(date)</div><div class="line">	</div><div class="line">	postfortune <span class="string">"Your day is filled with ceremony"</span></div><div class="line">	postfortune <span class="string">"They're features, not bugs"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">tellFortunes()&#123;date, fortune -&gt;</div><div class="line">	println <span class="string">"Fortune for $&#123;date&#125; is '$&#123;fortune&#125;'"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>科里化后面的形参，可以使用rcurry().<br>科里化位于形参列表中间的形参，可以使用ncurry()<br>ncurry()有两个版本</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//科里化位于位置n的形参</span></div><div class="line"><span class="keyword">public</span> Closure&lt;V&gt; ncurry(<span class="keyword">int</span> n,Object argument)</div><div class="line"></div><div class="line"><span class="comment">//科里化从n开始的多个参数</span></div><div class="line"><span class="keyword">public</span> Closure&lt;V&gt; ncurry(<span class="keyword">int</span> n,Object...argument)</div></pre></td></tr></table></figure>
<h2 id="动态闭包"><a href="#动态闭包" class="headerlink" title="动态闭包"></a>动态闭包</h2><p>动态检查闭包是否提供以及闭包参数数量和类型</p>
<p>检查闭包是否提供</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> doSomeThing(closure)&#123;</div><div class="line">        <span class="keyword">if</span>(closure)&#123;</div><div class="line">            closure()</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            println <span class="string">"Using default implementation"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">doSomeThing()&#123;</div><div class="line">    println <span class="string">"Use specialized implementation"</span></div><div class="line">&#125;</div><div class="line">doSomeThing()</div></pre></td></tr></table></figure>
<p>检查形参个数（maximumNumberOfParameters属性或getMaximumNumberOfParameters()方法）</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//计算税额</span></div><div class="line"><span class="keyword">def</span> completeOrder(amount, taxComputer)&#123;</div><div class="line">	tax = <span class="number">0</span></div><div class="line">	<span class="keyword">if</span>(taxComputer.maximumNumberOfParameters ==<span class="number">2</span>)&#123;<span class="comment">//期望传入税率</span></div><div class="line">		tax = taxComputer(amount, <span class="number">6.05</span>)</div><div class="line">	&#125;<span class="keyword">else</span>&#123;<span class="comment">//税额计算闭包，不需传递税率</span></div><div class="line">		tax = taxComputer(amount)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	println <span class="string">"Sales tax is $&#123;tax&#125;"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">completeOrder(<span class="number">100</span>)&#123; it * <span class="number">0.0825</span>&#125;</div><div class="line"></div><div class="line">completeOrder(<span class="number">100</span>)&#123; amount, rate -&gt; amount *(rate/<span class="number">100</span>)&#125;</div></pre></td></tr></table></figure>
<p>检查参数类型（parametertypes属性或getParameterTypes()方法获知参数类型）</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> examine(closure)&#123;</div><div class="line">    println <span class="string">"$closure.maximumNumberOfParameters parameter(s) ginven:"</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span>(aParameter <span class="keyword">in</span> closure.parameterTypes)&#123;</div><div class="line">    	println aParameter.name</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">examine()&#123;&#125;</div><div class="line">examine()&#123;it&#125;</div><div class="line">examine()&#123;-&gt;&#125;</div><div class="line">examine()&#123;vall -&gt;&#125;</div><div class="line">examine()&#123;Date val1 -&gt;&#125;</div><div class="line">examine()&#123;Date val1,val2 -&gt;&#125;</div><div class="line">examine()&#123;Date val1, String val2 -&gt;&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>输出：<br>1 parameter(s) ginven:<br>java.lang.Object<br>1 parameter(s) ginven:<br>java.lang.Object<br>0 parameter(s) ginven:<br>1 parameter(s) ginven:<br>java.lang.Object<br>1 parameter(s) ginven:<br>java.util.Date<br>2 parameter(s) ginven:<br>java.util.Date<br>java.lang.Object<br>2 parameter(s) ginven:<br>java.util.Date<br>java.lang.String</p>
</blockquote>
<p>即便一个闭包没有使用任何参数，就像{} 或 {it}，它也会接受一个参数（名字默认为it）<br>如果希望闭包完全不接受任何参数，必须使用{ -&gt; }语法</p>
<h2 id="闭包委托"><a href="#闭包委托" class="headerlink" title="闭包委托"></a>闭包委托</h2><p>Groovy中的闭包远远超越了简单的匿名函数<br>Groovy闭包支持方法委托，而且提供了方法分派能力</p>
<p>this、owner和delegate是闭包的三个属性，用于确定由哪个对象处理该闭包内的方法调用</p>
<p>this指向该闭包所绑定的对象(义该闭包的类的实例对象)<br>owner指向定义它的对象<br>一般delegate设置为owner，但可对其加以修改，以挖掘出Groovy的一些元编程能力</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> examiningClosure(closure)&#123;</div><div class="line">	closure()</div><div class="line">&#125;</div><div class="line"></div><div class="line">examiningClosure()&#123;</div><div class="line">	println <span class="string">"In First Closure:"</span></div><div class="line">	println <span class="string">"class is "</span> + getClass().name</div><div class="line">	println <span class="string">"this is "</span> + <span class="keyword">this</span> + <span class="string">", supper:"</span> + <span class="keyword">this</span>.getClass().superclass</div><div class="line">	println <span class="string">"owner is "</span> + owner + <span class="string">", supper:"</span> + owner.getClass().superclass.name</div><div class="line">	println <span class="string">"delegate is "</span> + delegate + <span class="string">", super:"</span> + delegate.getClass().superclass.name</div><div class="line"></div><div class="line">	examiningClosure()&#123;</div><div class="line">		println <span class="string">"In First Closure:"</span></div><div class="line">		println <span class="string">"class is "</span> +  getClass().name</div><div class="line">		println <span class="string">"this is "</span> + <span class="keyword">this</span> + <span class="string">", supper:"</span> + <span class="keyword">this</span>.getClass().superclass.name</div><div class="line">		println <span class="string">"owner is "</span> + owner + <span class="string">", supper:"</span> + owner.getClass().superclass.name</div><div class="line">		println <span class="string">"delegate is "</span> + delegate + <span class="string">", super:"</span> + delegate.getClass().superclass.name</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>In First Closure:<br>class is ConsoleScript0$_run_closure1<br>this is ConsoleScript0@2bdc426f, supper:class groovy.lang.Script<br>owner is ConsoleScript0@2bdc426f, supper:groovy.lang.Script<br>delegate is ConsoleScript0@2bdc426f, super:groovy.lang.Script<br>In First Closure:<br>class is ConsoleScript0$_run_closure1$_closure2<br>this is ConsoleScript0@2bdc426f, supper:groovy.lang.Script<br>owner is ConsoleScript0$_run_closure1@66cd72d, supper:groovy.lang.Closure<br>delegate is ConsoleScript0$_run_closure1@66cd72d, super:groovy.lang.Closure</p>
</blockquote>
<p>在闭包内引用的变量或方法都会绑定到this，它负责处理任何方法调用，以及对任何属性或变量的访问。<br>如果this无法处理，则转向owner，最后是delegate</p>
<p>方法调用示例</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span>&#123;</span></div><div class="line">	<span class="keyword">def</span> f1()&#123;</div><div class="line">		println <span class="string">"f1 of Handler called ..."</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">def</span> f2()&#123;</div><div class="line">		println <span class="string">"f2 of Handler called ..."</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>&#123;</span></div><div class="line">	<span class="keyword">def</span> f1()&#123;</div><div class="line">		println <span class="string">"f1 of Example called ..."</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">def</span> f2()&#123;</div><div class="line">		println <span class="string">"f2 of Example called ..."</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">def</span> foo(closure)&#123;</div><div class="line">		closure.delegate = <span class="keyword">new</span> Handler()</div><div class="line">		closure()</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">def</span> f1()&#123;</div><div class="line">	println <span class="string">"f1 of Script called ..."</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> Example().foo()&#123;</div><div class="line">	<span class="comment">//1.this指向ConsoleScript实例，调用ConsoleScript.f1()</span></div><div class="line">	f1()</div><div class="line">	<span class="comment">//2.owner执向ConsoleScript实例，delegate执向Handler实例</span></div><div class="line">	<span class="comment">//调用Handler实例f2()</span></div><div class="line">	f2()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>f1 of Script called …<br>f2 of Handler called …</p>
</blockquote>
<h2 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h2><p>递归可以通过子问题的解决方案来解决主干问题。</p>
<p>借助编译器优化和语言支持，递归程序可以转换为迭代过程。<br>使用这种变换，可以编写出性能极高而且非常优雅的代码，还能获得简单迭代的效率优势。</p>
<p>计算阶乘</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> factorial</div><div class="line"></div><div class="line">factorial = &#123;<span class="keyword">int</span> number, BigInteger theFactorial -&gt;</div><div class="line">	number == <span class="number">1</span> ? theFactorial : </div><div class="line">		factorial.trampoline(number <span class="number">-1</span>, number * theFactorial)</div><div class="line">&#125;.trampoline()</div><div class="line"></div><div class="line"></div><div class="line">println <span class="string">"factorial of 5 is $&#123;factorial(5, 1)&#125;"</span></div><div class="line"><span class="comment">//输出计算结果位数</span></div><div class="line">println <span class="string">"number of bits in the result is $&#123;factorial(5000, 1).bitCount()&#125;"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>factorial of 5 is 120<br>number of bits in the result is 24654</p>
</blockquote>
<p>使用方法封装，使第二个参数为1</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">def</span> factorial(<span class="keyword">int</span> factorialFor)&#123;</div><div class="line">    <span class="keyword">def</span> tailFactorial</div><div class="line"></div><div class="line">    <span class="comment">//闭包使用默认值</span></div><div class="line">    tailFactorial = &#123;<span class="keyword">int</span> number, BigInteger theFactorial =  <span class="number">1</span> -&gt;</div><div class="line">        number == <span class="number">1</span> ? theFactorial : </div><div class="line">            tailFactorial.trampoline(number <span class="number">-1</span>, number * theFactorial)</div><div class="line">    &#125;.trampoline()</div><div class="line"></div><div class="line">    tailFactorial(factorialFor)</div><div class="line">&#125;</div><div class="line"></div><div class="line">println <span class="string">"factorial of 5 is $&#123;factorial(5)&#125;"</span></div><div class="line">println <span class="string">"number of bits in the result is $&#123;factorial(5000).bitCount()&#125;"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>factorial of 5 is 120<br>number of bits in the result is 24654</p>
</blockquote>
<p>Groovy通过闭包上的一个便捷方法实现尾递归。这避免了对语言及其语法的整体影响，在减少内存占用的同时使编程变得更为优雅。</p>
<p>trampoline()性能比简单递归或纯碎迭代差一些。</p>
<h2 id="使用记忆化改进性能"><a href="#使用记忆化改进性能" class="headerlink" title="使用记忆化改进性能"></a>使用记忆化改进性能</h2><p>计算27寸长杆最大收益</p>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字面常量与表达式"><a href="#字面常量与表达式" class="headerlink" title="字面常量与表达式"></a>字面常量与表达式</h2><h3 id="Groovy中使用单引号创建字面常量。"><a href="#Groovy中使用单引号创建字面常量。" class="headerlink" title="Groovy中使用单引号创建字面常量。"></a>Groovy中使用单引号创建字面常量。</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println <span class="string">'He said, "That is Groovy"'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>He said, “That is Groovy”</p>
</blockquote>
<h3 id="显示创建字符"><a href="#显示创建字符" class="headerlink" title="显示创建字符"></a>显示创建字符</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> mychar = <span class="string">'a'</span> <span class="keyword">as</span> <span class="keyword">char</span></div><div class="line">println mychar</div></pre></td></tr></table></figure>
<blockquote>
<p>有任何方法调用需要，Groovy可能会隐式地创建Character对象</p>
</blockquote>
<h3 id="对Stirng中的表达式进行求值运算，必须使用双引号"><a href="#对Stirng中的表达式进行求值运算，必须使用双引号" class="headerlink" title="对Stirng中的表达式进行求值运算，必须使用双引号"></a>对Stirng中的表达式进行求值运算，必须使用双引号</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">value = <span class="number">25</span></div><div class="line">println <span class="string">'The value is $&#123;value&#125;'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>The value is ${value}</p>
</blockquote>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">value = <span class="number">25</span></div><div class="line">println <span class="string">"The value is $&#123;value&#125;"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>The value is 25</p>
</blockquote>
<h3 id="java的String是不可变的，Groovy信守这种不可变性"><a href="#java的String是不可变的，Groovy信守这种不可变性" class="headerlink" title="java的String是不可变的，Groovy信守这种不可变性"></a>java的String是不可变的，Groovy信守这种不可变性</h3><p>可以使用[]操作符读取一个字符，不过不能修改</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str = <span class="string">'hello'</span></div><div class="line">println str[<span class="number">2</span>]</div></pre></td></tr></table></figure>
<blockquote>
<p>a</p>
</blockquote>
<h3 id="使用双引号-“”-或正斜杠-创建表达式。"><a href="#使用双引号-“”-或正斜杠-创建表达式。" class="headerlink" title="使用双引号(“”)或正斜杠(//)创建表达式。"></a>使用双引号(“”)或正斜杠(//)创建表达式。</h3><p>双引号经常用于创建字符串表达式，正斜线用于正则表达式。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">value = <span class="number">12</span></div><div class="line"><span class="comment">//Groovy将$用于嵌入表达式。使用转移符（\）来打印$</span></div><div class="line">println <span class="string">"He paid \$$&#123;value&#125; for that"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//表达式是简单变量名，或简单的属性存取器（accessor），包裹表达式的&#123;&#125;是可选的</span></div><div class="line">println <span class="string">"He paid \$$value for that."</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//定义字符串时使用正斜线，不必转义$</span></div><div class="line">println (<span class="regexp">/He  paid $$value for that./</span>)</div></pre></td></tr></table></figure>
<h3 id="Groovy惰性求值（lazy-evaluation）"><a href="#Groovy惰性求值（lazy-evaluation）" class="headerlink" title="Groovy惰性求值（lazy evaluation）"></a>Groovy惰性求值（lazy evaluation）</h3><p>即把一个表达式保存在一个字符串中，稍后再打印</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">what = <span class="keyword">new</span> StringBuilder(<span class="string">'fence'</span>)</div><div class="line">text = <span class="string">"The cow jumped over the $what"</span></div><div class="line">println text</div><div class="line"></div><div class="line">what.replace(<span class="number">0</span>, <span class="number">5</span>, <span class="string">"moon"</span>)</div><div class="line">println text</div><div class="line"></div><div class="line"><span class="comment">//需要惰性计算的字符串，Groovy自动使用GString类型</span></div><div class="line">println text.getClass().name</div><div class="line">println text.getClass().superclass</div></pre></td></tr></table></figure>
<blockquote>
<p>The cow jumped over the fence<br>The cow jumped over the moon<br>org.codehaus.groovy.runtime.GStringImpl<br>class groovy.lang.GString</p>
</blockquote>
<h2 id="GString-的惰性求值问题"><a href="#GString-的惰性求值问题" class="headerlink" title="GString 的惰性求值问题"></a>GString 的惰性求值问题</h2><p>表达式中使用的变量为不可变类型时，在表达式中简单替换它们无效</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">price = <span class="number">684.71</span></div><div class="line">company = <span class="string">'Google'</span></div><div class="line">quote = <span class="string">"Today $company stock closed at $price"</span></div><div class="line">println quote</div><div class="line"></div><div class="line">stocks = [<span class="string">Apple :</span> <span class="number">663.01</span>,<span class="string">Microsoft :</span> <span class="number">30.95</span>]</div><div class="line"></div><div class="line">stocks.each &#123; key,value -&gt;</div><div class="line">    company = key</div><div class="line">    price = value</div><div class="line">    println quote</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Today Google stock closed at 684.71<br>Today Google stock closed at 684.71<br>Today Google stock closed at 684.71</p>
</blockquote>
<p>GString表达式如何求值。<br>如果其中包含一个变量，变量的值会被简单地打印到一个Writer，通常是一个StringWriter。<br>如果GString包含一个闭包，该闭包会被调用；如果闭包接收一个参数，GString会把Writer对象作为参数发给它；如果闭包接收不止一个参数，调用失败。</p>
<p>使用闭包替换变量</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">price = <span class="number">684.71</span></div><div class="line">company = <span class="string">'Google'</span></div><div class="line"></div><div class="line">priceClosure = &#123; it.write(<span class="string">"$price"</span>)&#125;</div><div class="line">companyClosure = &#123;it.write(company)&#125;</div><div class="line"></div><div class="line">quote = <span class="string">"Today $&#123;companyClosure&#125; stock closed at $&#123;priceClosure&#125;"</span></div><div class="line"></div><div class="line">println quote</div><div class="line"></div><div class="line">stocks = [<span class="string">Apple :</span> <span class="number">663.01</span>,<span class="string">Microsoft :</span> <span class="number">30.95</span>]</div><div class="line"></div><div class="line">stocks.each &#123; key,value -&gt;</div><div class="line">    company = key</div><div class="line">    price = value</div><div class="line">    println quote</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简化闭包代码</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">price = <span class="number">684.71</span></div><div class="line">company = <span class="string">'Google'</span></div><div class="line"></div><div class="line">priceClosure = &#123;-&gt; price &#125;</div><div class="line">companyClosure = &#123;-&gt; company &#125;</div><div class="line"></div><div class="line">quote = <span class="string">"Today $&#123;companyClosure&#125; stock closed at $&#123;priceClosure&#125;"</span></div><div class="line"></div><div class="line">println quote</div><div class="line"></div><div class="line">stocks = [<span class="string">Apple :</span> <span class="number">663.01</span>,<span class="string">Microsoft :</span> <span class="number">30.95</span>]</div><div class="line"></div><div class="line">stocks.each &#123; key,value -&gt;</div><div class="line">    company = key</div><div class="line">    price = value</div><div class="line">    println quote</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Today Google stock closed at 684.71<br>Today Apple stock closed at 663.01<br>Today Microsoft stock closed at 30.95</p>
</blockquote>
<p>表达式包含闭包</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">price = <span class="number">684.71</span></div><div class="line">company = <span class="string">'Google'</span></div><div class="line"></div><div class="line">quote = <span class="string">"Today $&#123;-&gt; company&#125; stock closed at $&#123;-&gt; price&#125;"</span></div><div class="line"></div><div class="line">println quote</div><div class="line"></div><div class="line">stocks = [<span class="string">Apple :</span> <span class="number">663.01</span>,<span class="string">Microsoft :</span> <span class="number">30.95</span>]</div><div class="line"></div><div class="line">stocks.each &#123; key,value -&gt;</div><div class="line">    company = key</div><div class="line">    price = value</div><div class="line">    println quote</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Today Google stock closed at 684.71<br>Today Apple stock closed at 663.01<br>Today Microsoft stock closed at 30.95</p>
</blockquote>
<p>如果希望改变表达式中可使用的引用，并且希望他们的当前值被用于惰性求值中；<br>不要在表达式中直接替换他们，而要使用一个无参闭包。</p>
<h2 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h2><h3 id="通过将字符串包含在3个单引号内（’’’…’’’）定义多行字面常亮"><a href="#通过将字符串包含在3个单引号内（’’’…’’’）定义多行字面常亮" class="headerlink" title="通过将字符串包含在3个单引号内（’’’…’’’）定义多行字面常亮"></a>通过将字符串包含在3个单引号内（’’’…’’’）定义多行字面常亮</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">memo = <span class="string">'''Serveral of you raised concerns about long meetings.</span></div><div class="line">To discuss this, we will be holding a 3 hour meetings starting</div><div class="line">at 9AM tomorrow. All getting this memo are required to attend.</div><div class="line">...'''</div><div class="line"></div><div class="line">println memo</div></pre></td></tr></table></figure>
<blockquote>
<p>Serveral of you raised concerns about long meetings.<br>To discuss this, we will be holding a 3 hour meetings starting<br>at 9AM tomorrow. All getting this memo are required to attend.<br>…</p>
</blockquote>
<h3 id="可以使用3个双引号创建包含表达式的多行字符串"><a href="#可以使用3个双引号创建包含表达式的多行字符串" class="headerlink" title="可以使用3个双引号创建包含表达式的多行字符串"></a>可以使用3个双引号创建包含表达式的多行字符串</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">price = <span class="number">251.12</span></div><div class="line"></div><div class="line">message = <span class="string">"""We're very pleased to announce</span></div><div class="line">that our stock price hit a high of \$$&#123;price&#125; per share"""</div><div class="line"></div><div class="line">println message</div></pre></td></tr></table></figure>
<blockquote>
<p>We’re very pleased to announce<br>that our stock price hit a high of $251.12 per share</p>
</blockquote>
<p>多行字符串表达式创建xml</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">langs = [<span class="string">'C++'</span>:<span class="string">'Stroustrup'</span>,<span class="string">'Java'</span>:<span class="string">'Gosling'</span>,<span class="string">'Lisp'</span>:<span class="string">'McCarthy'</span>]</div><div class="line">content = <span class="string">''</span></div><div class="line"></div><div class="line">langs.each&#123; language,author -&gt;</div><div class="line">    fragment = <span class="string">"""</span></div><div class="line">        &lt;language name="$&#123;language&#125;"&gt;</div><div class="line">        &lt;author&gt;$&#123;author&#125;&lt;/author&gt;</div><div class="line">        &lt;/language&gt;</div><div class="line">    """</div><div class="line"></div><div class="line">    content += fragment</div><div class="line">&#125;</div><div class="line"></div><div class="line">xml = <span class="string">"&lt;languages&gt;$&#123;content&#125;&lt;/languages&gt;"</span></div><div class="line">println xml</div></pre></td></tr></table></figure>
<h3 id="字符串便捷方法"><a href="#字符串便捷方法" class="headerlink" title="字符串便捷方法"></a>字符串便捷方法</h3><h4 id="String的execute"><a href="#String的execute" class="headerlink" title="String的execute()"></a>String的execute()</h4><p>可以创建一个process对象，只需几行代码就可以执行系统级进程。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println <span class="string">"node -v"</span>.execute().text</div></pre></td></tr></table></figure>
<blockquote>
<p>v6.1.0</p>
</blockquote>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">str = <span class="string">"It's a rainy day in Seattle"</span></div><div class="line">println str</div><div class="line"></div><div class="line">str -= <span class="string">"rainy"</span></div><div class="line">println str</div></pre></td></tr></table></figure>
<h4 id="String-重载操作符"><a href="#String-重载操作符" class="headerlink" title="String 重载操作符"></a>String 重载操作符</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">str = <span class="string">"It's a rainy rainy day in Seattle"</span></div><div class="line">println str</div><div class="line"></div><div class="line"><span class="comment">//public String plus(Object value)</span></div><div class="line"><span class="comment">//Appends the String representation of the given operand to this CharSequence.</span></div><div class="line">str += <span class="string">" plus"</span></div><div class="line">println str</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//public String minus(Object target)</span></div><div class="line"><span class="comment">//Remove a part of a CharSequence by replacing the first occurrence of target within self with '' and returns the result.</span></div><div class="line">str -= <span class="string">"rainy"</span></div><div class="line">println str</div><div class="line"></div><div class="line"><span class="comment">//public String multiply(Number factor)</span></div><div class="line"><span class="comment">//Repeat a CharSequence a certain number of times.</span></div><div class="line">str *= <span class="number">2</span></div><div class="line">println str</div><div class="line"></div><div class="line"><span class="comment">//List tokenize() </span></div><div class="line"><span class="comment">//List tokenize(CharSequence token) </span></div><div class="line"><span class="comment">//Tokenize a CharSequence (with a whitespace as the delimiter).</span></div><div class="line">str = str.tokenize()</div><div class="line">println str</div></pre></td></tr></table></figure>
<blockquote>
<p>It’s a rainy rainy day in Seattle<br>It’s a rainy rainy day in Seattle plus<br>It’s a  rainy day in Seattle plus<br>It’s a  rainy day in Seattle plusIt’s a  rainy day in Seattle plus<br>[It’s, a, rainy, day, in, Seattle, plusIt’s, a, rainy, day, in, Seattle, plus]</p>
</blockquote>
<h4 id="String-迭代"><a href="#String-迭代" class="headerlink" title="String 迭代"></a>String 迭代</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(ch = <span class="string">'a'</span>;ch &lt; <span class="string">'d'</span>;ch++)&#123;</div><div class="line">    println ch;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(str <span class="keyword">in</span> <span class="string">'held'</span>..<span class="string">'helm'</span>)&#123;</div><div class="line">    print <span class="string">"$&#123;str&#125; "</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>a<br>b<br>c<br>held hele helf helg helh heli helj helk hell helm </p>
</blockquote>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="操作符"><a href="#操作符" class="headerlink" title="~操作符"></a>~操作符</h4><p>~操作符可以方便的创建RegEx模式（）</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">obj = ~<span class="string">"hello"</span></div><div class="line">println obj.getClass().name</div></pre></td></tr></table></figure>
<blockquote>
<p>java.util.regex.Pattern</p>
</blockquote>
<h4 id="和-操作符"><a href="#和-操作符" class="headerlink" title="=~ 和 ==~ 操作符"></a>=~ 和 ==~ 操作符</h4><p>=~ 执行RegEX部分匹配<br>==~ 执行RegEx精确匹配</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//pattern = "(G|g)roovy"</span></div><div class="line"></div><div class="line"><span class="comment">//正斜线有以个优势：不必对反斜线进行转义。/\d*\w*/与"\\d*\\w*"等价</span></div><div class="line">pattern = <span class="regexp">/(G|g)roovy/</span></div><div class="line"></div><div class="line">text = <span class="string">'Groovy is Hip'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(text =~ pattern)</div><div class="line">	println <span class="string">"match"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	println <span class="string">"no match"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(text ==~ pattern)</div><div class="line">	println <span class="string">"match"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	println <span class="string">"no match"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>match<br>no match</p>
</blockquote>
<p>=~操作符会返回一个Matcher对象，是一个java.util.regex.Matcher实例</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">matcher = <span class="string">'Groovy is groovy'</span> =~ <span class="regexp">/(G|g)roovy/</span></div><div class="line">print <span class="string">"Size of matcher is $&#123;matcher.size()&#125;"</span></div><div class="line">println <span class="string">" with elements $&#123;matcher[0]&#125; and $&#123;matcher[1]&#125;."</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Size of matcher is 2with elements [Groovy, G] and [groovy, g].</p>
</blockquote>
<p>可以使用replaceFirst()或replaceAll()方法替换文本</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">str = <span class="string">'Groovy is groovy,really groovy'</span></div><div class="line">println str</div><div class="line"></div><div class="line">result = (str =~ <span class="regexp">/groovy/</span>).replaceAll(<span class="string">'hip'</span>)</div><div class="line">println result</div></pre></td></tr></table></figure>
<blockquote>
<p>Groovy is groovy,really groovy<br>Groovy is hip,really hip</p>
</blockquote>
<h1 id="使用集合类"><a href="#使用集合类" class="headerlink" title="使用集合类"></a>使用集合类</h1><h2 id="使用List"><a href="#使用List" class="headerlink" title="使用List"></a>使用List</h2><h3 id="创建java-util-ArrayList"><a href="#创建java-util-ArrayList" class="headerlink" title="创建java.util.ArrayList"></a>创建java.util.ArrayList</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">lst = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>];</div><div class="line">println lst</div><div class="line"></div><div class="line">println lst.getClass().name</div></pre></td></tr></table></figure>
<blockquote>
<p>[1, 3, 4, 1, 8, 9, 2, 6]<br>java.util.ArrayList</p>
</blockquote>
<h3 id="使用-操作符可获取List中的元素"><a href="#使用-操作符可获取List中的元素" class="headerlink" title="使用[]操作符可获取List中的元素"></a>使用[]操作符可获取List中的元素</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">lst = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>];</div><div class="line">println lst[<span class="number">0</span>]</div><div class="line">println lst[lst.size() <span class="number">-1</span>]</div><div class="line"></div><div class="line"><span class="comment">//使用负索引将从右向左开始遍历</span></div><div class="line">println lst[<span class="number">-1</span>]</div><div class="line">println lst[<span class="number">-2</span>]</div><div class="line"></div><div class="line"><span class="comment">//使用Range对象获得集合中的几个连续的值</span></div><div class="line">println lst[<span class="number">2.</span><span class="number">.5</span>]</div><div class="line">println lst[<span class="number">-6.</span>.<span class="number">-3</span>]</div><div class="line"></div><div class="line">subLst = lst[<span class="number">2.</span><span class="number">.5</span>]</div><div class="line"><span class="comment">//使用dump()分析实例详细信息</span></div><div class="line">println subLst.dump()</div><div class="line"></div><div class="line">subLst[<span class="number">0</span>] = <span class="number">55</span></div><div class="line">println <span class="string">"After subLst[0]=55 lst = $lst"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>1<br>6<br>6<br>2<br>[4, 1, 8, 9]<br>[4, 1, 8, 9]</p>
<p><java.util.arraylist@fedbf elementdata="[4," 1,="" 8,="" 9]="" size="4" modcount="1"><br>After subLst[0]=55 lst = [1, 3, 4, 1, 8, 9, 2, 6]</java.util.arraylist@fedbf></p>
</blockquote>
<h2 id="迭代ArrayList"><a href="#迭代ArrayList" class="headerlink" title="迭代ArrayList"></a>迭代ArrayList</h2><h3 id="使用List的each方法"><a href="#使用List的each方法" class="headerlink" title="使用List的each方法"></a>使用List的each方法</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">lst = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>];</div><div class="line"></div><div class="line"><span class="comment">//使用内部迭代器</span></div><div class="line">lst.each&#123; </div><div class="line">print it + <span class="string">' '</span></div><div class="line">&#125;</div><div class="line">println <span class="string">''</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//反向迭代</span></div><div class="line">lst.reverseEach&#123; print it + <span class="string">' '</span>&#125;</div><div class="line">println <span class="string">''</span></div><div class="line"></div><div class="line"><span class="comment">//迭代过程获取索引</span></div><div class="line">lst.eachWithIndex&#123;elem, index -&gt;</div><div class="line">    print elem + <span class="string">' '</span></div><div class="line">    print index + <span class="string">'\n'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//求和</span></div><div class="line">total = <span class="number">0</span></div><div class="line">lst.each&#123;</div><div class="line">    total += it</div><div class="line">&#125;</div><div class="line">println <span class="string">"Total is $total"</span></div><div class="line"></div><div class="line"><span class="comment">//数组值*2后生成新数组</span></div><div class="line">doubled = []</div><div class="line">lst.each&#123;</div><div class="line">	<span class="comment">//&lt;&lt;操作符（映射到leftShift()方法）</span></div><div class="line">    doubled &lt;&lt; it * <span class="number">2</span></div><div class="line">&#125;</div><div class="line">println doubled</div></pre></td></tr></table></figure>
<blockquote>
<p>1 3 4 1 8 9 2 6<br>6 2 9 8 1 4 3 1<br>1 0<br>3 1<br>4 2<br>1 3<br>8 4<br>9 5<br>2 6<br>6 7<br>Total is 34<br>[2, 6, 8, 2, 16, 18, 4, 12]</p>
</blockquote>
<h3 id="使用List的collect方法"><a href="#使用List的collect方法" class="headerlink" title="使用List的collect方法"></a>使用List的collect方法</h3><p>collect方法会把闭包的返回值收集(即collect一词的本意)到一个集合中，最后返回这个新生成的结果集合。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lst = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>];</div><div class="line">println lst.collect &#123; it*<span class="number">2</span> &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>[2, 6, 8, 2, 16, 18, 4, 12]</p>
</blockquote>
<h3 id="使用查找方法"><a href="#使用查找方法" class="headerlink" title="使用查找方法"></a>使用查找方法</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">lst = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>];</div><div class="line"><span class="comment">//find()会找到第一次出现的匹配对象</span></div><div class="line">println lst.find &#123; it == <span class="number">2</span>&#125;</div><div class="line"><span class="comment">//可以在附到find()上的闭包中指定任何条件</span></div><div class="line">println lst.find&#123; it &gt; <span class="number">4</span> &#125;</div><div class="line"></div><div class="line"><span class="comment">//返回所有找到的对象</span></div><div class="line">println lst.findAll&#123; it == <span class="number">2</span> &#125;</div><div class="line">println lst.findAll&#123; it &gt; <span class="number">4</span> &#125;</div><div class="line"></div><div class="line"><span class="comment">//查找第一个匹配对象的位置</span></div><div class="line">println lst.findIndexOf&#123; it == <span class="number">2</span> &#125;</div></pre></td></tr></table></figure>
<h3 id="list上的其他便捷方法"><a href="#list上的其他便捷方法" class="headerlink" title="list上的其他便捷方法"></a>list上的其他便捷方法</h3><p>一个字符串集合，计算其中总的字符数</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">lst = [<span class="string">'Programming'</span>,<span class="string">'In'</span>,<span class="string">'Groovy'</span>];</div><div class="line"></div><div class="line"><span class="comment">//方法1：迭代</span></div><div class="line">count = <span class="number">0</span></div><div class="line">lst.each&#123;</div><div class="line">    count += it.size()</div><div class="line">&#125;</div><div class="line">println count</div><div class="line"></div><div class="line"><span class="comment">//collect()方法返回集合，并调用sum()方法</span></div><div class="line">println lst.collect&#123; it.size() &#125;.sum()</div><div class="line"></div><div class="line"><span class="comment">//inject()会对集合中的每一个元素调用闭包。</span></div><div class="line"><span class="comment">//inject()会把注入的一个初试值当做第一个参数，放到第一次闭包的调用中。</span></div><div class="line"><span class="comment">//之后它会把从闭包获得的结果注入到随后对闭包的调用中。</span></div><div class="line">println lst.inject(<span class="number">0</span>)&#123; carryOver, element -&gt; carryOver + element.size() &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>19<br>19<br>19</p>
</blockquote>
<p>join()会迭代每个元素，然后将每个元素和作为输入参数给定的字符连接起来<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lst = [<span class="string">'Programming'</span>,<span class="string">'In'</span>,<span class="string">'Groovy'</span>];</div><div class="line">println lst.join(<span class="string">' '</span>)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Programming In Groovy</p>
</blockquote>
<p>通过索引替换List中的元素</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">lst[<span class="number">0</span>] = [<span class="string">'Be'</span>, <span class="string">'Productive'</span>]</div><div class="line">println lst</div><div class="line"></div><div class="line"><span class="comment">//使用flatten()方法将List拉平</span></div><div class="line">lst = lst.flatten()</div><div class="line">println lst</div></pre></td></tr></table></figure>
<p>使用 - 操作符（minus()）方法</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lst = [<span class="string">'Programming'</span>,<span class="string">'In'</span>,<span class="string">'Groovy'</span>];</div><div class="line">println lst - [<span class="string">'Productive'</span>,<span class="string">'Groovy'</span>]</div></pre></td></tr></table></figure>
<blockquote>
<p>[Programming, In]</p>
</blockquote>
<p>使用reverse()方法获取反向排列的副本</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lst = [<span class="string">'Programming'</span>,<span class="string">'In'</span>,<span class="string">'Groovy'</span>];</div><div class="line">println lst.reverse()</div></pre></td></tr></table></figure>
<p>使用展开操作符<em>（spread operator）
</em>操作符，将集合拆成单个对象</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">lst = [<span class="string">'Programming'</span>,<span class="string">'In'</span>,<span class="string">'Groovy'</span>];</div><div class="line"></div><div class="line">println lst.size()</div><div class="line">println lst*.size()</div><div class="line"></div><div class="line"><span class="keyword">def</span> words(a, b, c)&#123;</div><div class="line">    println <span class="string">"$a $b $c"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//将List打散为参数</span></div><div class="line">words(*lst)</div></pre></td></tr></table></figure>
<blockquote>
<p>3<br>[11, 2, 6]<br>Programming In Groovy</p>
</blockquote>
<h2 id="使用Map类"><a href="#使用Map类" class="headerlink" title="使用Map类"></a>使用Map类</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建Map</span></div><div class="line">langs = [<span class="string">'C++'</span>:<span class="string">'Stroustrup'</span>, <span class="string">'Java'</span> : <span class="string">'gosling'</span> , <span class="string">'Lisp'</span> : <span class="string">'McCarthy'</span>]</div><div class="line">println langs.getClass().name</div><div class="line"></div><div class="line"><span class="comment">//使用[]操作符，访问一个键的值</span></div><div class="line">println langs[<span class="string">'Java'</span>]</div><div class="line">println langs[<span class="string">'C++'</span>]</div><div class="line"></div><div class="line"><span class="comment">//可以把键用作好像是Map的一个属性</span></div><div class="line">println langs.Java</div><div class="line"><span class="comment">//C++的++与映射next()方法的++操作符冲突，需要使用单引号，将键值看做一个String</span></div><div class="line">println langs.<span class="string">'C++'</span></div><div class="line"></div><div class="line"><span class="comment">//定义Map时，对于不冲突的键名，可以省略引号</span></div><div class="line">langs2 = [<span class="string">'C++'</span>:<span class="string">'Stroustrup'</span>, <span class="string">Java :</span> <span class="string">'gosling'</span> , <span class="string">Lisp :</span> <span class="string">'McCarthy'</span>]</div><div class="line">println langs2</div></pre></td></tr></table></figure>
<blockquote>
<p>java.util.LinkedHashMap<br>gosling<br>Stroustrup<br>gosling<br>Stroustrup<br>[C++:Stroustrup, Java:gosling, Lisp:McCarthy]</p>
</blockquote>
<p>注：不能在Map上调用class属性，Map会假定class这个名字指向的是一个（不存在的）键，而放回null。<br>在实例上要总是使用getClass()</p>
<h2 id="Map迭代"><a href="#Map迭代" class="headerlink" title="Map迭代"></a>Map迭代</h2><h3 id="Map的each-方法"><a href="#Map的each-方法" class="headerlink" title="Map的each()方法"></a>Map的each()方法</h3><p>如果闭包只有一个参数，each()会把一个MapEntry实例发送给该参数。<br>如果想单独获得键和值，只需在闭包中提供两个参数。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">langs = [<span class="string">'C++'</span>:<span class="string">'Stroustrup'</span>, <span class="string">'Java'</span> : <span class="string">'gosling'</span> , <span class="string">'Lisp'</span> : <span class="string">'McCarthy'</span>]</div><div class="line"></div><div class="line">langs.each&#123; entry -&gt;</div><div class="line">	println <span class="string">"Language $entry.key was authored by $entry.value"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">langs.each&#123; language, author -&gt;</div><div class="line">	println <span class="string">"Language $language was authored by $author"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Language C++ was authored by Stroustrup<br>Language Java was authored by gosling<br>Language Lisp was authored by McCarthy<br>Language C++ was authored by Stroustrup<br>Language Java was authored by gosling<br>Language Lisp was authored by McCarthy</p>
</blockquote>
<h3 id="Map的collect方法"><a href="#Map的collect方法" class="headerlink" title="Map的collect方法"></a>Map的collect方法</h3><p>与ArrayList中的conllect()方法类似的是，都返回一个列表。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">langs = [<span class="string">'C++'</span>:<span class="string">'Stroustrup'</span>, <span class="string">'Java'</span> : <span class="string">'gosling'</span> , <span class="string">'Lisp'</span> : <span class="string">'McCarthy'</span>]</div><div class="line"></div><div class="line">println langs.collect &#123;language,author -&gt;</div><div class="line">    language.replaceAll(<span class="string">"[+]"</span>,<span class="string">"P"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>[CPP, Java, Lisp]</p>
</blockquote>
<h3 id="Map的find-和-findAll方法"><a href="#Map的find-和-findAll方法" class="headerlink" title="Map的find 和 findAll方法"></a>Map的find 和 findAll方法</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">println <span class="string">"Looking for the first language with name greater than 3 characters"</span></div><div class="line"></div><div class="line"><span class="comment">//find</span></div><div class="line">entry = langs.find&#123; language,author -&gt;</div><div class="line">	language.size() &gt; <span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">println <span class="string">"Found $entry.key written by $entry.value"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//findAll</span></div><div class="line">selected = langs.findAll&#123; language,author -&gt;</div><div class="line">	language.size() &gt; <span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">selected.each&#123; key, value -&gt;</div><div class="line">	println <span class="string">"Found $key written by $value"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Looking for the first language with name greater than 3 characters<br>Found Java written by gosling<br>Found Java written by gosling<br>Found Lisp written by McCarthy</p>
</blockquote>
<h3 id="Map上的其他便捷方法"><a href="#Map上的其他便捷方法" class="headerlink" title="Map上的其他便捷方法"></a>Map上的其他便捷方法</h3><p>只想确定集合中是否有任何元素满足某些条件，用any()<br>检查是否所用元素都满足给定条件，用every()</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">langs = [<span class="string">'C++'</span>:<span class="string">'Stroustrup'</span>, <span class="string">'Java'</span> : <span class="string">'gosling'</span> , <span class="string">'Lisp'</span> : <span class="string">'McCarthy'</span>]</div><div class="line"></div><div class="line">println langs.any&#123; language,author -&gt;</div><div class="line">    language =~ <span class="string">"[^A-Za-z]"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">println langs.every &#123; language,author -&gt;</div><div class="line">    language =~ <span class="string">"[^A-Za-z]"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>true<br>false</p>
</blockquote>
<p>基于某些标准对Map中的元素进行分组,使用groupBy</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">friends = [ <span class="string">briang :</span> <span class="string">'Brian Goetz'</span>, <span class="string">brians :</span> <span class="string">'Brian Sletten'</span>, </div><div class="line">    <span class="string">davidb :</span> <span class="string">'David Bock'</span>, <span class="string">davidg :</span> <span class="string">'David Geary'</span>,</div><div class="line">    <span class="string">scottd :</span> <span class="string">'Scott Davis'</span>, <span class="string">scottl :</span> <span class="string">'Scott Leberknight'</span>, </div><div class="line">    <span class="string">stuarth :</span> <span class="string">'Stuart Halloway'</span>]</div><div class="line"></div><div class="line">groupByFirstName = friends.groupBy &#123; it.value.split(<span class="string">' '</span>)[<span class="number">0</span>] &#125;</div><div class="line"></div><div class="line">groupByFirstName.each &#123; firstName, buddies -&gt;</div><div class="line">    println <span class="string">"$firstName : $&#123;buddies.collect &#123; key, fullName -&gt; fullName&#125;.join(', ')&#125;"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="探索GDK"><a href="#探索GDK" class="headerlink" title="探索GDK"></a>探索GDK</h1><p>当处在同一JVM中时，Java端和Groovy端使用的是同一个对象。<br>对于Groovy端看到的对象，因为Groovy向其中添加了便于使用、可以提高开发效率的方法，所以看上去更时髦。</p>
<h2 id="使用Object类的扩展"><a href="#使用Object类的扩展" class="headerlink" title="使用Object类的扩展"></a>使用Object类的扩展</h2><p>Groovy对java.lang.Object的扩展</p>
<h3 id="dump和inspect方法"><a href="#dump和inspect方法" class="headerlink" title="dump和inspect方法"></a>dump和inspect方法</h3><p>dump()是我们得以一窥对象内部。可用于调试、日志和学习。<br>它会展示出目标实例的类型（class）、散列码及字段。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">str = <span class="string">'hello'</span></div><div class="line">println str</div><div class="line">println str.dump()</div></pre></td></tr></table></figure>
<blockquote>
<p>hello</p>
<java.lang.string@5e918d2 value="hello" hash="99162322">

</java.lang.string@5e918d2></blockquote>
<p>inspect()方法旨在说明创建一个对象需要提供什么。<br>如果类没有实现该方法，会简单地返回tostring()所返回的内容。<br>该方法可以帮助类的使用者在运行时确定应该提供的内容。</p>
<h3 id="使用with-方法"><a href="#使用with-方法" class="headerlink" title="使用with()方法"></a>使用with()方法</h3><p>JavaScript和VBScript都有with这个有好的特性，支持创建一个上下文（context）。<br>在with作用域内调用的任何方法，都会被定向到该上下文对象。<br>（Groovy中with()作为identity()的同义词引入，可以互换使用）</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">lst = [<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">lst.with&#123;</div><div class="line">    add(<span class="number">3</span>)</div><div class="line">    add(<span class="number">4</span>)</div><div class="line">    println size()</div><div class="line">    println contains(<span class="number">3</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p> 4<br>true<br>this is ConsoleScript2@7673b483<br>owner is ConsoleScript2@7673b483<br>delegate is [1, 2, 3, 4]</p>
</blockquote>
<p>调用with()方法时，它会将闭包的delegate属性设置到调用with()的对象上，<br>以将闭包内的调用路由到上下文对象</p>
<h3 id="使用sleep"><a href="#使用sleep" class="headerlink" title="使用sleep"></a>使用sleep</h3><p>添加到Object上的sleep()方法应该叫酣睡(soundSleep)，<br>因为在跟定的毫秒数时间（近似）内睡眠时，方法会忽略中断。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">thread = Thread.start&#123;</div><div class="line">    println <span class="string">"Thread started"</span></div><div class="line">    startTime = System.nanoTime()</div><div class="line">    <span class="keyword">new</span> Object().sleep(<span class="number">2000</span>)</div><div class="line">    endTime = System.nanoTime()</div><div class="line">    println <span class="string">"Thread done in $&#123;(endTime - startTime)/10**9&#125; seconds"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> Object().sleep(<span class="number">100</span>)</div><div class="line">println <span class="string">"Let's interrupt that thread"</span></div><div class="line">thread.interrupt()</div><div class="line"><span class="comment">// join() 方法是让调用该方法的主线程执行run()时暂时卡住，等run()执行完成后， 主线程再调用执行join()后面的代码</span></div><div class="line">thread.join()</div></pre></td></tr></table></figure>
<blockquote>
<p>Thread started<br>Let’s interrupt that thread<br>Thread done in 1.999289306 seconds</p>
</blockquote>
<p>sleep()方法一个变种，接收一个处理中断的闭包<br>闭包返回true，sleep()将被中断，否则，将继续</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">thread = Thread.start&#123;</div><div class="line">    println <span class="string">"Thread started"</span></div><div class="line">    startTime = System.nanoTime()</div><div class="line">    <span class="keyword">new</span> Object().sleep(<span class="number">2000</span>)&#123;</div><div class="line">        println <span class="string">"Interrupted ..."</span> + it</div><div class="line">        <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    endTime = System.nanoTime()</div><div class="line">    println <span class="string">"Thread done in $&#123;(endTime - startTime)/10**9&#125; seconds"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> Object().sleep(<span class="number">100</span>)</div><div class="line">println <span class="string">"Let's interrupt that thread"</span></div><div class="line">thread.interrupt()</div><div class="line">thread.join()</div></pre></td></tr></table></figure>
<blockquote>
<p>Thread started<br>Let’s interrupt that thread<br>Interrupted …java.lang.InterruptedException: sleep interrupted<br>Thread done in 0.099872478 seconds</p>
</blockquote>
<h3 id="间接访问属性"><a href="#间接访问属性" class="headerlink" title="间接访问属性"></a>间接访问属性</h3><p>使用[]操作符（映射到Groovy添加的getAt()方法）动态地访问属性。<br>该操作符用于赋值语句的左侧，则映射到putAt()方法</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> miles, fuelLevel</div><div class="line">&#125;</div><div class="line"></div><div class="line">car = <span class="keyword">new</span> Car(<span class="string">fuelLevel:</span> <span class="number">80</span>, <span class="string">miles:</span><span class="number">25</span>)</div><div class="line"></div><div class="line"><span class="comment">//可能通过输入来填充，或来自Web应用中的动态表单</span></div><div class="line">properties = [<span class="string">'miles'</span>,<span class="string">'fuelLevel'</span>]</div><div class="line"></div><div class="line">properties.each &#123; name -&gt;</div><div class="line">	println <span class="string">"$name = $&#123;car[name]&#125;"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">car[properties[<span class="number">1</span>]] = <span class="number">100</span></div><div class="line"></div><div class="line">println <span class="string">"fuelLevel now is $&#123;car.fuelLevel&#125;"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>miles = 25<br>fuelLevel = 80<br>fuelLevel now is 100</p>
</blockquote>
<p>使用间接访问属性，可以轻松编写一个高阶函数，让它接受属性名列表和一个实例，并以XML、HTML或其他我们期望的格式输出属性名和他们的值。</p>
<h3 id="间接调用方法"><a href="#间接调用方法" class="headerlink" title="间接调用方法"></a>间接调用方法</h3><p>以String接收方法名，并调用该方法。</p>
<p>使用反射需要从实例或去Class元对象，调用getMethod()获取Method实例，最后在该实例上调用invoke()方法，并需要处理异常。</p>
<p>Groovy中只调用invokeMethod()方法。Groovy中的所有对象都支持该方法。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></div><div class="line">    <span class="keyword">def</span> walk()&#123; println <span class="string">"Walking ..."</span> &#125;</div><div class="line"></div><div class="line">    <span class="keyword">def</span> walk(<span class="keyword">int</span> miles)&#123; println <span class="string">"Walking $miles miles..."</span> &#125;</div><div class="line"></div><div class="line">    <span class="keyword">def</span> walk(<span class="keyword">int</span> miles, String where)&#123; println <span class="string">"Walking $miles miles $where..."</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">perter = <span class="keyword">new</span> Person()</div><div class="line"></div><div class="line">perter.invokeMethod(<span class="string">"walk"</span>,<span class="literal">null</span>)</div><div class="line">perter.invokeMethod(<span class="string">"walk"</span>,<span class="number">10</span>)</div><div class="line">perter.invokeMethod(<span class="string">"walk"</span>, [<span class="number">2</span>,<span class="string">'uphill'</span>] <span class="keyword">as</span> Object[])</div></pre></td></tr></table></figure>
<blockquote>
<p>Walking …<br>Walking 10 miles…<br>Walking 2 miles uphill…</p>
</blockquote>
<h2 id="其他扩展"><a href="#其他扩展" class="headerlink" title="其他扩展"></a>其他扩展</h2><h3 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h3><p>所有数组类型，都可以使用Range对象作为索引，返回一个子数组。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">arrRange = arr[<span class="number">2.</span><span class="number">.4</span>]</div><div class="line">println arrRange</div><div class="line"></div><div class="line"><span class="comment">//子数组和原数组独立</span></div><div class="line">arrRange[<span class="number">0</span>] = <span class="number">10</span></div><div class="line">println arrRange</div><div class="line">println arr</div></pre></td></tr></table></figure>
<blockquote>
<p>[3, 4, 5]<br>[10, 4, 5]<br>[1, 2, 3, 4, 5, 6]</p>
</blockquote>
<h3 id="java-lang的扩展"><a href="#java-lang的扩展" class="headerlink" title="java.lang的扩展"></a>java.lang的扩展</h3><p>Number(Integer和Double就扩展自该类)添加了迭代器方法upto()和downto()，还有step()方法。<br>这些方法有助于对一个范围内的值进行迭代。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">0.</span>upto(<span class="number">3</span>) &#123;</div><div class="line">    print <span class="string">"$&#123;it&#125; "</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">print <span class="string">"\n"</span></div><div class="line"></div><div class="line"><span class="number">0.</span>step(<span class="number">10</span>,<span class="number">2</span>)&#123;</div><div class="line">    print <span class="string">"$&#123;it&#125; "</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>0 1 2 3<br>0 2 4 6 8 </p>
</blockquote>
<p>Process类提供了访问stdin、stdout和stderr命令的便捷方法，分别对应out、in和err属性。<br>还有一个text属性，提供完整的标准输出或来自进程的响应。<br>一次性读取完整的标准错误，可以在进程实例上使用err.text</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">process = <span class="string">"mysql --user=root --password=123456"</span>.execute()</div><div class="line"></div><div class="line"><span class="comment">//通过process的out属性获取OutputStream</span></div><div class="line"><span class="comment">//可以通过&lt;&lt;写入内容</span></div><div class="line"><span class="comment">//也可以通过OutputStream的withWriter()方法写入内容，withWriter()同时完成写入数据后刷新并关闭流</span></div><div class="line">process.out.withWriter &#123;</div><div class="line">    <span class="comment">//&lt;&lt;操作符，可以以管道方式链接到另一个进程中</span></div><div class="line">    it &lt;&lt; <span class="string">"show databases;"</span></div><div class="line">    it &lt;&lt; <span class="string">"use mysql;"</span></div><div class="line">    it &lt;&lt; <span class="string">"select host,user from mysql.user;"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">println process.<span class="keyword">in</span>.text</div><div class="line"><span class="comment">//或println process.text</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Database<br>information_schema<br>mysql<br>performance_schema<br>sys<br>weatherinfo<br>host    user<br>%    root<br>localhost    mysql.sys</p>
</blockquote>
<p>String[] 也支持execute()方法，第一个元素被当作命令，其余元素被视作该命令的参数。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String[] command = [<span class="string">'node'</span>,<span class="string">'-v'</span>]</div><div class="line">println <span class="string">"Calling $&#123;command.join(' ')&#125;"</span></div><div class="line">println command.execute().text</div></pre></td></tr></table></figure>
<blockquote>
<p>Calling node -v<br>v4.5.0</p>
</blockquote>
<p>启动线程00</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> printThreadInfo(msg) &#123;</div><div class="line">  <span class="keyword">def</span> currentThread = Thread.currentThread()</div><div class="line">  println <span class="string">"$msg Thread is $&#123;currentThread&#125;. Daemon? $&#123;currentThread.isDaemon()&#125;"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">printThreadInfo <span class="string">'Main'</span></div><div class="line"></div><div class="line"><span class="comment">//启动非守护线程</span></div><div class="line">Thread.start &#123; </div><div class="line">  printThreadInfo <span class="string">"Started"</span></div><div class="line">  sleep(<span class="number">3000</span>) &#123; println <span class="string">"Interrupted"</span> &#125;</div><div class="line">  println <span class="string">"Finished Started"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">sleep(<span class="number">1000</span>)</div><div class="line"></div><div class="line"><span class="comment">//启动守护线程</span></div><div class="line">Thread.startDaemon &#123;</div><div class="line">  printThreadInfo <span class="string">"Started Daemon"</span></div><div class="line">  sleep(<span class="number">5000</span>) &#123; println <span class="string">"Interrupted"</span> &#125;</div><div class="line">  println <span class="string">"Finished Started Daemon"</span> <span class="comment">// Will not get here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Main Thread is Thread[Thread-3,6,main]. Daemon? false<br>Started Thread is Thread[Thread-4,6,main]. Daemon? false<br>Started Daemon Thread is Thread[Thread-5,6,main]. Daemon? true<br>Result: Thread[Thread-5,6,main]Finished Started<br>Finished Started Daemon</p>
</blockquote>
<p>注：已上为正确输出，仅在首次启动GroovyConsole时运行正确<br>之后的输出为：</p>
<blockquote>
<p>Main Thread is Thread[Thread-9,6,main]. Daemon? false<br>Started Thread is Thread[Thread-10,6,main]. Daemon? false<br>Result: Thread[Thread-11,6,main]Started Daemon Thread is Thread[Thread-11,6,main]. Daemon? true<br>Finished Started<br>Finished Started Daemon</p>
</blockquote>
<h3 id="使用java-io扩展"><a href="#使用java-io扩展" class="headerlink" title="使用java.io扩展"></a>使用java.io扩展</h3><p>java.io包中的File类加入了很多方法。<br>其中eachFile()、eachDir()（及其变种）可接受闭包，为目录和文件的导航与迭代提供便捷方式。</p>
<p>Groovy通过向BufferedReader、InputStream和File添加text属性，可以把文件的全部内容读到一个String中。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println <span class="keyword">new</span> File(<span class="string">"C:\\Users\\wangdz\\Desktop\\data.txt"</span>).text</div></pre></td></tr></table></figure>
<blockquote>
<p>groovy<br>file<br>read</p>
</blockquote>
<p>一次读取并处理一行</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> File(<span class="string">"C:\\Users\\wangdz\\Desktop\\data.txt"</span>).eachLine&#123; line -&gt;</div><div class="line">    println line</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>groovy<br>file<br>read</p>
</blockquote>
<p>只去满足特定条件的那些行文本，使用filterLine()</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println <span class="keyword">new</span> File(<span class="string">"C:\\Users\\wangdz\\Desktop\\data.txt"</span>).filterLine&#123; it =~ <span class="regexp">/groovy/</span> &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>groovy</p>
</blockquote>
<p>如果想使用完毕自动刷新并关闭输入流，可以使用withStream()；<br>Writer有类似方法，withWriter()；</p>
<p>InputStream的withReader()会创建一个BufferedReader（被附到输入流上），并将其传递给接受参数的闭包。</p>
<p>InputStream和DataInputStream中的输入可以通过调用iterator()，获的一个Iterator，然后使用迭代器对输入进行迭代。<br>也可以便利地迭代ObjectInputStream中的对象。</p>
<p>InputStream上的便捷方法，Reader上也有。</p>
<p>OutputStream、ObjectOutputStream和writer类通过leftShife()方法（操作符&lt;&lt;）向文件或流写入内容。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> File(<span class="string">"C:\\Users\\wangdz\\Desktop\\dataOut.txt"</span>).withWriter&#123; file -&gt;</div><div class="line">    file &lt;&lt; <span class="string">"some data..."</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用java-util的扩展"><a href="#使用java-util的扩展" class="headerlink" title="使用java.util的扩展"></a>使用java.util的扩展</h3><p>List、Set、SortedMap和SortedSet都加入了asImmutable()，用于获取各自实例的一个不可变实例。<br>这些类还加入了一个asSynchronized()方法，用于创建线程安全的实例。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">println arr.dump()</div><div class="line">arr_immutable = arr.asImmutable()</div><div class="line">println arr_immutable.dump()</div><div class="line">println arr_immutable[<span class="number">0</span>] == <span class="number">9</span></div></pre></td></tr></table></figure>
<blockquote>
<p><java.util.arraylist@7861 elementdata="[1," 2,="" 3]="" size="3" modcount="1"></java.util.arraylist@7861></p>
<p><java.util.collections$unmodifiablerandomaccesslist@7861 list="[1," 2,="" 3]="" c="[1,"><br>false</java.util.collections$unmodifiablerandomaccesslist@7861></p>
</blockquote>
<p>Iterator支持inject()方法</p>
<p>java.util.Timer加入了runAfter()方法，该方法接受一个闭包，闭包将在给定的延时（单位毫秒）之后运行。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">println <span class="keyword">new</span> java.text.SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).format(<span class="keyword">new</span> java.util.Date())</div><div class="line"></div><div class="line">timer = <span class="keyword">new</span> java.util.Timer()</div><div class="line">timer.runAfter(<span class="number">3000</span>)&#123;</div><div class="line">    println <span class="string">"run afert delay time"</span></div><div class="line">    println <span class="keyword">new</span> java.text.SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).format(<span class="keyword">new</span> java.util.Date())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>2016-09-19 20:41:00<br>Result: org.codehaus.groovy.runtime.DefaultGroovyMethods$2@1fc720f7run afert delay time<br>2016-09-19 20:41:03</p>
</blockquote>
<h2 id="使用扩展模块定制方法"><a href="#使用扩展模块定制方法" class="headerlink" title="使用扩展模块定制方法"></a>使用扩展模块定制方法</h2><p>使用扩展模块（extension-modules）特性，可以在编译时向现有类添加实例方法或静态方法，并在运行时应用它们。</p>
<p>实现方法：</p>
<ul>
<li>添加的方法定义在一个扩展模块类中</li>
<li>清单文件(manifest)中添加描述信息，告诉Groovy编译器要查找的扩展模块</li>
</ul>
<h1 id="处理xml"><a href="#处理xml" class="headerlink" title="处理xml"></a>处理xml</h1><p>Groovy缓解了解析和创建xml文档之苦。</p>
<h2 id="解析XML"><a href="#解析XML" class="headerlink" title="解析XML"></a>解析XML</h2><p>Groovy解析器相当强大，并且使用方便，还支持命名空间。</p>
<p>language.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line"> ! Excerpted from "Programming Groovy, 2nd Edition",</div><div class="line"> ! published by The Pragmatic Bookshelf.</div><div class="line"> ! Copyrights apply to this code. It may not be used to create training material, </div><div class="line"> ! courses, books, articles, and the like. Contact us if you are in doubt.</div><div class="line"> ! We make no guarantees that this code is fit for any purpose. </div><div class="line"> ! Visit http://www.pragmaticprogrammer.com/titles/vslg2 for more book information.</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">languages</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">language</span> <span class="attr">name</span>=<span class="string">"C++"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>Stroustrup<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">language</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">language</span> <span class="attr">name</span>=<span class="string">"Java"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>Gosling<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">language</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">language</span> <span class="attr">name</span>=<span class="string">"Lisp"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>McCarthy<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">language</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">language</span> <span class="attr">name</span>=<span class="string">"Modula-2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>Wirth<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">language</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">language</span> <span class="attr">name</span>=<span class="string">"Oberon-2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>Wirth<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">language</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">language</span> <span class="attr">name</span>=<span class="string">"Pascal"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>Wirth<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">language</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">languages</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="使用DOMCategory"><a href="#使用DOMCategory" class="headerlink" title="使用DOMCategory"></a>使用DOMCategory</h3><p>使用DOMCategory通过类GPath（Groovy path expression，即Groovy路径表达式）在Dom结构中导航<br>GPath可以帮助导航对象（Plain Old Java Object和Plain Old Groovy Object,即POJO和POGO）和XML的层次结构</p>
<p>通过子元素的名字就能访问所有<code>子元素</code><br>属性名钱放一个@可以获得该<code>属性</code>的值</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">document = groovy.xml.DOMBuilder.parse(<span class="keyword">new</span> FileReader(<span class="string">'C:\\Users\\wangdz\\Desktop\\language.xml'</span>))</div><div class="line">rootElement = document.documentElement</div><div class="line"></div><div class="line"><span class="comment">//使用DOMCategory，必须把代码放在use()块内</span></div><div class="line">use(groovy.xml.dom.DOMCategory)&#123;</div><div class="line">    println <span class="string">"Language and authors"</span></div><div class="line">    languages = rootElement.language</div><div class="line">     languages.each&#123; language -&gt;</div><div class="line">         println <span class="string">"$&#123; language.@name&#125; authored by $&#123;language.author[0].text() &#125;"</span></div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Language and authors<br>language authored by Stroustrup<br>language authored by Gosling<br>language authored by McCarthy<br>language authored by Wirth<br>language authored by Wirth<br>language authored by Wirth</p>
</blockquote>
<h3 id="使用XMLParser"><a href="#使用XMLParser" class="headerlink" title="使用XMLParser"></a>使用XMLParser</h3><p>groovy.util.XMLParser利用Groovy的动态类和元编程能力，可以直接使用名字访问文档中的成员。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//与DOMCategory不同，没有使用FileReader，使用FileReader效果一样</span></div><div class="line">languages = <span class="keyword">new</span> XmlParser().parse(<span class="string">'C:\\Users\\wangdz\\Desktop\\language.xml'</span>)</div><div class="line"></div><div class="line">println <span class="string">"Language And Authors"</span></div><div class="line"></div><div class="line"><span class="comment">//获得的节点，忽略了根节点</span></div><div class="line">languages.each&#123;</div><div class="line">    println <span class="string">"$&#123;it.@name&#125; authored by $&#123;it.author[0].text()&#125;"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">def</span> languagesByAuthor = &#123; authorName -&gt;</div><div class="line">    languages.findAll&#123; it.author[<span class="number">0</span>].text() == authorName &#125;.collect &#123;</div><div class="line">        it.<span class="meta">@name</span></div><div class="line">    &#125;.join(<span class="string">', '</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">println <span class="string">"Languages by Write:"</span> + languagesByAuthor(<span class="string">'Wirth'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>Language And Authors<br>C++ authored by Stroustrup<br>Java authored by Gosling<br>Lisp authored by McCarthy<br>Modula-2 authored by Wirth<br>Oberon-2 authored by Wirth<br>Pascal authored by Wirth<br>Languages by Write:Modula-2, Oberon-2, Pascal</p>
</blockquote>
<p>与DOMCategory的主要区别在于，不需要使用use()块。<br>XMLParser向元素中添加了便捷的迭代器，如each()、collect()、find()等，便于实现导航</p>
<p>XMLParser的不足；<br>没用保留XML InfoSet，而且忽略了文档中的XML注释和处理指令。</p>
<p>它的便捷性使其成为应对大部分常见处理需求的极好工具</p>
<h3 id="使用XMLSlurper"><a href="#使用XMLSlurper" class="headerlink" title="使用XMLSlurper"></a>使用XMLSlurper</h3><p>对于较大的文档，XMLParser的内存使用让人难以忍受<br>XMLSlurper可以处理这种情况</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">languages = <span class="keyword">new</span> XmlSlurper().parse(<span class="string">'C:\\Users\\wangdz\\Desktop\\language.xml'</span>)</div><div class="line"></div><div class="line">println <span class="string">"Language And Authors"</span></div><div class="line"></div><div class="line"><span class="comment">//节点访问从根节点开始，与XMLParser不同，与DOMCategory相同</span></div><div class="line">languages.language.each&#123;</div><div class="line">    println <span class="string">"$&#123;it.@name&#125; authored by $&#123;it.author[0].text()&#125;"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">def</span> languagesByAuthor = &#123; authorName -&gt;</div><div class="line">    languages.language.findAll&#123; it.author[<span class="number">0</span>].text() == authorName &#125;.collect &#123;</div><div class="line">        it.<span class="meta">@name</span></div><div class="line">    &#125;.join(<span class="string">', '</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">println <span class="string">"Languages by Write:"</span> + languagesByAuthor(<span class="string">'Wirth'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>Language And Authors<br>C++ authored by Stroustrup<br>Java authored by Gosling<br>Lisp authored by McCarthy<br>Modula-2 authored by Wirth<br>Oberon-2 authored by Wirth<br>Pascal authored by Wirth<br>Languages by Write:Modula-2, Oberon-2, Pascal</p>
</blockquote>
<p>命名空间可以帮助处理名字冲突<br>命名空间不是URL，但是他们需要保持唯一性</p>
<p>computerAndNaturalLanguages.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line"> ! Excerpted from "Programming Groovy, 2nd Edition",</div><div class="line"> ! published by The Pragmatic Bookshelf.</div><div class="line"> ! Copyrights apply to this code. It may not be used to create training material, </div><div class="line"> ! courses, books, articles, and the like. Contact us if you are in doubt.</div><div class="line"> ! We make no guarantees that this code is fit for any purpose. </div><div class="line"> ! Visit http://www.pragmaticprogrammer.com/titles/vslg2 for more book information.</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">languages</span> <span class="attr">xmlns:computer</span>=<span class="string">"Computer"</span> <span class="attr">xmlns:natural</span>=<span class="string">"Natural"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">computer:language</span> <span class="attr">name</span>=<span class="string">"Java"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">computer:language</span> <span class="attr">name</span>=<span class="string">"Groovy"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">computer:language</span> <span class="attr">name</span>=<span class="string">"Erlang"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">natural:language</span> <span class="attr">name</span>=<span class="string">"English"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">natural:language</span> <span class="attr">name</span>=<span class="string">"German"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">natural:language</span> <span class="attr">name</span>=<span class="string">"French"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">languages</span>&gt;</span></div></pre></td></tr></table></figure>
<p>要引用查询中的一个命名空间，就要为命名空间关联一个前缀；使用declareNamespace()方法实现这种关联</p>
<p>element.name将返回所有name的子元素<br>element.’ns:name’则仅返回ns关联的命名空间下的元素，其中ns为命名空间关联的前缀</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">languages = <span class="keyword">new</span> XmlSlurper().parse(<span class="string">'C:\\Users\\wangdz\\Desktop\\computerAndNaturalLanguages.xml'</span>).declareNamespace(<span class="string">human:</span><span class="string">'Natural'</span>)</div><div class="line"></div><div class="line">println <span class="string">"Languages:"</span></div><div class="line">println languages.language.collect&#123; it.<span class="meta">@name</span> &#125;.join(<span class="string">', '</span>)</div><div class="line"></div><div class="line">println <span class="string">"Natural languages:"</span></div><div class="line">println languages.<span class="string">'human:language'</span>.collect&#123; it.<span class="meta">@name</span> &#125;.join(<span class="string">', '</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>Languages:<br>Java, Groovy, Erlang, English, German, French<br>Natural languages:<br>English, German, French</p>
</blockquote>
<h2 id="创建XML"><a href="#创建XML" class="headerlink" title="创建XML"></a>创建XML</h2><p>使用GString在字符串中嵌入表达式能力，再加上Groovy用于创建多行字符串的设施</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">langs = [<span class="string">'C++'</span>:<span class="string">'Stroustrup'</span>,<span class="string">'Java'</span>:<span class="string">'Gosling'</span>,<span class="string">'Lisp'</span>:<span class="string">'McCarthy'</span>]</div><div class="line">content = <span class="string">''</span></div><div class="line"></div><div class="line">langs.each&#123; language,author -&gt;</div><div class="line">    fragment = <span class="string">"""</span></div><div class="line">        &lt;language name="$&#123;language&#125;"&gt;</div><div class="line">        &lt;author&gt;$&#123;author&#125;&lt;/author&gt;</div><div class="line">        &lt;/language&gt;</div><div class="line">    """</div><div class="line"></div><div class="line">    content += fragment</div><div class="line">&#125;</div><div class="line"></div><div class="line">xml = <span class="string">"&lt;languages&gt;$&#123;content&#125;&lt;/languages&gt;"</span></div><div class="line">println xml</div></pre></td></tr></table></figure>
<p>也可以选择MarkupBuilder或StreamingMarkupBuilder,从任意源创建XML格式的数据输出。<br>这是Groovy应用偏爱的方法，因为生成器提供的便捷性使创建XML文档变得非常容易。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">langs = [<span class="string">'C++'</span>:<span class="string">'Stroustrup'</span>,<span class="string">'Java'</span>:<span class="string">'Gosling'</span>,<span class="string">'Lisp'</span>:<span class="string">'McCarthy'</span>]</div><div class="line"></div><div class="line">xmlDocument = <span class="keyword">new</span> groovy.xml.StreamingMarkupBuilder().bind&#123;</div><div class="line">    <span class="comment">//xml声明</span></div><div class="line">    mkp.xmlDeclaration()</div><div class="line">    <span class="comment">//声明，命名空间</span></div><div class="line">    mkp.declareNamespace(<span class="string">computer:</span> <span class="string">"Computer"</span>)</div><div class="line">    languages&#123;</div><div class="line">        <span class="comment">//添加注释</span></div><div class="line">        comment &lt;&lt; <span class="string">"Create using StreamingMarkupBuilder"</span></div><div class="line">        <span class="comment">//遍历Map</span></div><div class="line">        langs.each&#123; key, value -&gt;</div><div class="line">            computer.language(<span class="string">name:</span>key)&#123;</div><div class="line">                author (value)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">println xmlDocument</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version='1.0'?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">languages</span> <span class="attr">xmlns:computer</span>=<span class="string">'Computer'</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--Create using StreamingMarkupBuilder--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">computer:language</span> <span class="attr">name</span>=<span class="string">'C++'</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>Stroustrup<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">computer:language</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">computer:language</span> <span class="attr">name</span>=<span class="string">'Java'</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>Gosling<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">computer:language</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">computer:language</span> <span class="attr">name</span>=<span class="string">'Lisp'</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>McCarthy<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">computer:language</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">languages</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果我们的用户不喜欢维护XML配置文件，他们可以创建基于Groovy的DSL，再将DSL转为底层框架或库期望的XML格式</p>
<h1 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h1><p>GSQL是JDBC的包装器，为轻松访问数据库提供了很多便捷方法<br>GSQL脚本中的数据要多于代码，信噪比很高</p>
<h2 id="连接到数据库"><a href="#连接到数据库" class="headerlink" title="连接到数据库"></a>连接到数据库</h2><p>groovy.sql.Sql类有两个版本</p>
<ul>
<li>接收数据库URL、用户ID、密码和数据库驱动的名字作为参数</li>
<li>接收一个java.sql.Connection实例，或者一个java.sql.DataSource实例</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">userid = <span class="string">'root'</span></div><div class="line">password = <span class="string">'123456'</span></div><div class="line"><span class="keyword">def</span> sql = groovy.sql.Sql.newInstance(<span class="string">'jdbc:mysql://localhost:3306/weatherinfo?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false'</span>,userid,password,<span class="string">'com.mysql.jdbc.Driver'</span>)</div><div class="line"></div><div class="line">println sql.connection.catalog</div></pre></td></tr></table></figure>
<blockquote>
<p>weatherinfo</p>
</blockquote>
<h2 id="Select操作"><a href="#Select操作" class="headerlink" title="Select操作"></a>Select操作</h2><p>迭代表中的数据，只需使用eachRow()，并提供执行的SQL和处理每行数据的闭包</p>
<p>eachRow()提供GroovyResultSet对象来访问表中列，可直接使用列名，也可以使用索引</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">userid = <span class="string">'root'</span></div><div class="line">password = <span class="string">'123456'</span></div><div class="line"><span class="keyword">def</span> sql = groovy.sql.Sql.newInstance(<span class="string">'jdbc:mysql://localhost:3306/weatherinfo?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false'</span>,userid,password,<span class="string">'com.mysql.jdbc.Driver'</span>)</div><div class="line"></div><div class="line">printf <span class="string">"%-20s%s\n"</span>,<span class="string">'City'</span>,<span class="string">'Temperature'</span></div><div class="line"></div><div class="line">sql.eachRow(<span class="string">'SELECT * FROM weather'</span>)&#123;</div><div class="line">    printf <span class="string">"%-20s%s\n"</span>,it.city,it[<span class="number">1</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>City                Temperature<br>Austin              48<br>Baton Rouge         57<br>Jackson             50<br>Montgomery          53<br>Phoenix             67<br>Sacramento          66<br>Santa Fe            27<br>Tallahassee         59</p>
</blockquote>
<p>eachRow()的另一个重载版本，接受两个闭包<br>一个用于元数据，一个用于数据<br>元数据的闭包仅调用一次（在SQL语句执行之后），并以一个ResultSetMetaData实例为参数<br>另一个闭包对结果中每一行调用一次</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">userid = <span class="string">'root'</span></div><div class="line">password = <span class="string">'123456'</span></div><div class="line"><span class="keyword">def</span> sql = groovy.sql.Sql.newInstance(<span class="string">'jdbc:mysql://localhost:3306/weatherinfo?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false'</span>,userid,password,<span class="string">'com.mysql.jdbc.Driver'</span>)</div><div class="line"></div><div class="line">processMeta = &#123; metaData -&gt;</div><div class="line">    metaData.columnCount.times &#123; i -&gt;</div><div class="line">        printf <span class="string">"%-20s"</span>, metaData.getColumnLabel(i+<span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    println <span class="string">""</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">sql.eachRow(<span class="string">'SELECT * FROM weather'</span>,processMeta)&#123;</div><div class="line">    printf <span class="string">"%-20s%s\n"</span>,it.city,it[<span class="number">1</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Sql实例的rows()方法,返回结果数据的ArrayList实例</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">userid = <span class="string">'root'</span></div><div class="line">password = <span class="string">'123456'</span></div><div class="line"><span class="keyword">def</span> sql = groovy.sql.Sql.newInstance(<span class="string">'jdbc:mysql://localhost:3306/weatherinfo?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false'</span>,userid,password,<span class="string">'com.mysql.jdbc.Driver'</span>)</div><div class="line"></div><div class="line">rows = sql.rows(<span class="string">'SELECT * FROM weather'</span>)</div><div class="line"></div><div class="line">println rows</div></pre></td></tr></table></figure>
<blockquote>
<p>[[city:Austin, temperature:48], [city:Baton Rouge, temperature:57], [city:Jackson, temperature:50], [city:Montgomery, temperature:53], [city:Phoenix, temperature:67], [city:Sacramento, temperature:66], [city:Santa Fe, temperature:27], [city:Tallahassee, temperature:59]]</p>
</blockquote>
<p>firstRow()方法，仅得到结果的第一行</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">userid = <span class="string">'root'</span></div><div class="line">password = <span class="string">'123456'</span></div><div class="line"><span class="keyword">def</span> sql = groovy.sql.Sql.newInstance(<span class="string">'jdbc:mysql://localhost:3306/weatherinfo?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false'</span>,userid,password,<span class="string">'com.mysql.jdbc.Driver'</span>)</div><div class="line"></div><div class="line">row = sql.firstRow(<span class="string">'SELECT * FROM weather'</span>)</div><div class="line"></div><div class="line">println row</div></pre></td></tr></table></figure>
<blockquote>
<p>[city:Austin, temperature:48]</p>
</blockquote>
<p>call()方法，执行存储过程<br>withStatement()方法，设置一个将在查询之前调用的闭包，如在执行之前拦截并修改SQL查询</p>
<h2 id="将数据转换为XML"><a href="#将数据转换为XML" class="headerlink" title="将数据转换为XML"></a>将数据转换为XML</h2><p>将从数据库获取的数据用Groovy生成器创建数据的不同表示</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">userid = <span class="string">'root'</span></div><div class="line">password = <span class="string">'123456'</span></div><div class="line"><span class="keyword">def</span> sql = groovy.sql.Sql.newInstance(<span class="string">'jdbc:mysql://localhost:3306/weatherinfo?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false'</span>,userid,password,<span class="string">'com.mysql.jdbc.Driver'</span>)</div><div class="line"></div><div class="line">writer = <span class="keyword">new</span> StringWriter()</div><div class="line"></div><div class="line">bldr = <span class="keyword">new</span> groovy.xml.MarkupBuilder()</div><div class="line"></div><div class="line">bldr.weather &#123;</div><div class="line">    sql.eachRow(<span class="string">'SELECT * FROM `weather`'</span>)&#123;</div><div class="line">        city(<span class="string">'name'</span>:it.city,<span class="string">temperature:</span>it.temperature)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">println writer</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">weather</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">city</span> <span class="attr">name</span>=<span class="string">'Austin'</span> <span class="attr">temperature</span>=<span class="string">'48'</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">city</span> <span class="attr">name</span>=<span class="string">'Baton Rouge'</span> <span class="attr">temperature</span>=<span class="string">'57'</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">city</span> <span class="attr">name</span>=<span class="string">'Jackson'</span> <span class="attr">temperature</span>=<span class="string">'50'</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">city</span> <span class="attr">name</span>=<span class="string">'Montgomery'</span> <span class="attr">temperature</span>=<span class="string">'53'</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">city</span> <span class="attr">name</span>=<span class="string">'Phoenix'</span> <span class="attr">temperature</span>=<span class="string">'67'</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">city</span> <span class="attr">name</span>=<span class="string">'Sacramento'</span> <span class="attr">temperature</span>=<span class="string">'66'</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">city</span> <span class="attr">name</span>=<span class="string">'Santa Fe'</span> <span class="attr">temperature</span>=<span class="string">'27'</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">city</span> <span class="attr">name</span>=<span class="string">'Tallahassee'</span> <span class="attr">temperature</span>=<span class="string">'59'</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">weather</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="使用DataSet"><a href="#使用DataSet" class="headerlink" title="使用DataSet"></a>使用DataSet</h2><p>Sql类的dataSet()方法接收一个表名，并返回一个虚拟代理–直到迭代时，才去取实际的行<br>使用findAll()添加过滤条件<br>使用each()迭代数据</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">userid = <span class="string">'root'</span></div><div class="line">password = <span class="string">'123456'</span></div><div class="line"><span class="keyword">def</span> sql = groovy.sql.Sql.newInstance(<span class="string">'jdbc:mysql://localhost:3306/weatherinfo?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false'</span>,userid,password,<span class="string">'com.mysql.jdbc.Driver'</span>)</div><div class="line"></div><div class="line">dataSet = sql.dataSet(<span class="string">'weather'</span>)</div><div class="line">citiesBelowFreezing = dataSet.findAll &#123; it.temperature &lt; <span class="number">32</span> &#125;</div><div class="line">println <span class="string">'Cities below freezing:'</span></div><div class="line"></div><div class="line">citiesBelowFreezing.each &#123; it</div><div class="line">	println it.city</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这个demo没有运行通过</p>
</blockquote>
<p>##　插入与更新</p>
<p>使用DataSet插入数据；add()方法接收一个数据的Map，用其中的数据创建一行</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">userid = <span class="string">'root'</span></div><div class="line">password = <span class="string">'123456'</span></div><div class="line"><span class="keyword">def</span> sql = groovy.sql.Sql.newInstance(<span class="string">'jdbc:mysql://localhost:3306/weatherinfo?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false'</span>,userid,password,<span class="string">'com.mysql.jdbc.Driver'</span>)</div><div class="line"></div><div class="line">println <span class="string">"Number of cities :"</span> + sql.rows(<span class="string">"SELECT * FROM `weather`"</span>).size()</div><div class="line"></div><div class="line">dataSet = sql.dataSet(<span class="string">'weather'</span>)</div><div class="line"><span class="comment">//通过DataSet添加数据</span></div><div class="line">dataSet.add(<span class="string">city:</span> <span class="string">'Denver'</span>, <span class="string">temperature:</span><span class="number">19</span>)</div><div class="line"></div><div class="line">println <span class="string">"Number of cities :"</span> + sql.rows(<span class="string">"SELECT * FROM `weather`"</span>).size();</div></pre></td></tr></table></figure>
<blockquote>
<p>Number of cities :8<br>Number of cities :9</p>
</blockquote>
<p>更传统的方式是使用SQL类的execute()或executeInsert()</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">userid = <span class="string">'root'</span></div><div class="line">password = <span class="string">'123456'</span></div><div class="line"><span class="keyword">def</span> sql = groovy.sql.Sql.newInstance(<span class="string">'jdbc:mysql://localhost:3306/weatherinfo?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false'</span>,userid,password,<span class="string">'com.mysql.jdbc.Driver'</span>)</div><div class="line"></div><div class="line">temperature = <span class="number">50</span>;</div><div class="line">sql.executeInsert(<span class="string">"""INSERT INTO `weather` (city, temperature)</span></div><div class="line">    VALUES ('Oklahoma City', $&#123;temperature&#125;)""")</div><div class="line"></div><div class="line">println sql.firstRow(</div><div class="line">    <span class="string">"SELECT * FROM `weather` WHERE city = 'Oklahoma City'"</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>[city:Oklahoma City, temperature:50]</p>
</blockquote>
<h2 id="访问Microsoft-Excel"><a href="#访问Microsoft-Excel" class="headerlink" title="访问Microsoft Excel"></a>访问Microsoft Excel</h2><p>可以使用Sql类类访问Microsoft Excel</p>
<p>JKD.version&lt;=1.7<br>jkd8 移除了sun.jdbc.odbc.jdbcodbcdriver</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> sql = groovy.sql.Sql.newInstance(<span class="string">"""jdbc:odbc:Driver=</span></div><div class="line">    &#123;Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)&#125;;</div><div class="line">    DBQ=D:/temp/weather.xlsx;READONLY=false""",<span class="string">''</span>,<span class="string">''</span>)</div><div class="line"></div><div class="line">println <span class="string">"City\t\tTemperature"</span></div><div class="line"></div><div class="line">sql.eachRow(<span class="string">'SELECT * FROM [temperatures$]'</span>)&#123;</div><div class="line">    println <span class="string">"$&#123;it.city&#125;\t\t$&#123;it.temperature&#125;"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>City        Temperature<br>Denver        19.0<br>Boston        12.0<br>New York        22.0</p>
</blockquote>
<h1 id="使用脚本和类"><a href="#使用脚本和类" class="headerlink" title="使用脚本和类"></a>使用脚本和类</h1><h2 id="Java和Groovy的混合"><a href="#Java和Groovy的混合" class="headerlink" title="Java和Groovy的混合"></a>Java和Groovy的混合</h2><p>Groovy代码中使用Groovy脚本，可以使用GroovyShell<br>Java类中使用Groovy脚本，可以使用JSR223提供的ScriptEngine API</p>
<p>Java中使用Groovy类，或Groovy中使用Java类，可以利用Groovy的联合编译（joint-compilation）工具</p>
<h2 id="运行Groovy代码"><a href="#运行Groovy代码" class="headerlink" title="运行Groovy代码"></a>运行Groovy代码</h2><p>groovy命令，自动在内存中编译代码并执行</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Greet.groovy</span></div><div class="line">println ([<span class="string">'Groovy'</span>,<span class="string">'Rocks!'</span>].join(<span class="string">' '</span>))</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">groovy Greet.groovy</div><div class="line"><span class="comment">#或</span></div><div class="line">groovy Greet</div></pre></td></tr></table></figure>
<blockquote>
<p>Groovy Rocks!</p>
</blockquote>
<p>将groovyc编译器，编译代码，创建字节码，使用java命令运行<br>需要将groovy-all-2.1.0.jar（在GROOVY_HOME的embeddable目录下）放到classpath下</p>
<p>在classpath中添加句号(.),这样java命令就可以找到当前目录下的类</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Greet.groovy</span></div><div class="line">println ([<span class="string">'Groovy'</span>,<span class="string">'Rocks!'</span>].join(<span class="string">' '</span>))</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">groovyc Greet.groovy</div><div class="line"><span class="comment">#或</span></div><div class="line">groovyc *.groovy</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -classpath groovy-all-2.1.0.jar:. Greet</div></pre></td></tr></table></figure>
<blockquote>
<p>java 运行Groovy编译的class，没有成功<br>错误: 找不到或无法加载主类 Greet</p>
</blockquote>
<h2 id="Groovy中使用Groovy类"><a href="#Groovy中使用Groovy类" class="headerlink" title="Groovy中使用Groovy类"></a>Groovy中使用Groovy类</h2><p>Groovy代码中使用Groovy类，只需确保该类在classpath下，可以使用Groovy源码也可以使用编译成.class文件</p>
<p>Groovy代码中引用Groovy类时，Groovy以该类名在classpath下查找.groovy文件；如果找不到，则查找.class文件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//src/Car.groovy</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> year = <span class="number">2008</span></div><div class="line">	<span class="keyword">int</span> miles</div><div class="line"></div><div class="line">	String toString()&#123;</div><div class="line">		<span class="string">"Car: year:$year, miles: $miles"</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//useCar.groovy</span></div><div class="line">println <span class="keyword">new</span> Car()</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">groovy -classpath src userCar</div></pre></td></tr></table></figure>
<blockquote>
<p>Car: year:2008, miles: 0</p>
</blockquote>
<p>将src目录下的Car.groovy替换为编译后的Car.class,使用groovy命令运行，成功<br>将两个groovy文件都替换为编译后的class文件，使用java命令运行，失败</p>
<p>将Groovy类编译为jar，在eclipe中引用，并在java中使用，没问题</p>
<h2 id="利用联合编译混合使用Groovy和Java"><a href="#利用联合编译混合使用Groovy和Java" class="headerlink" title="利用联合编译混合使用Groovy和Java"></a>利用联合编译混合使用Groovy和Java</h2><p>Java中可以方便的使用Groovy类编译好的.class文件或JAR包</p>
<p>来自Java的字节码和来自Groovy的字节码，对Java而言没有区别</p>
<p>groovyc支持联合编译，-J前缀标志传给Java编译器</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">groovyc -j AJavaClass.java UseJavaClass.groovy -Jsource 1.6</div></pre></td></tr></table></figure>
<h2 id="在Java中创建与传递Groovy闭包"><a href="#在Java中创建与传递Groovy闭包" class="headerlink" title="在Java中创建与传递Groovy闭包"></a>在Java中创建与传递Groovy闭包</h2><p>Groovy调用闭包，使用一个名为call()的特殊方法<br>Java中创建闭包，只需一个包含call()方法的类</p>
<p>Groovy要向闭包中传递参数，需确保call()方法有接收实参的形参</p>
<h2 id="在Java中调用Groovy的动态方法"><a href="#在Java中调用Groovy的动态方法" class="headerlink" title="在Java中调用Groovy的动态方法"></a>在Java中调用Groovy的动态方法</h2><p>Groovy对象都实现了GroovyObject接口，该接口有一个invokeMethod()方法<br>Java端可以用invokeMethod()方法调用Groovy使用元编程动态定义的方法</p>
<h2 id="Groovy中使用Java类"><a href="#Groovy中使用Java类" class="headerlink" title="Groovy中使用Java类"></a>Groovy中使用Java类</h2><p>import类后，可直接使用</p>
<h2 id="Groovy中使用Groovy脚本"><a href="#Groovy中使用Groovy脚本" class="headerlink" title="Groovy中使用Groovy脚本"></a>Groovy中使用Groovy脚本</h2><h2 id="Java中使用Groovy脚本"><a href="#Java中使用Groovy脚本" class="headerlink" title="Java中使用Groovy脚本"></a>Java中使用Groovy脚本</h2><h1 id="探索元对象协议"><a href="#探索元对象协议" class="headerlink" title="探索元对象协议"></a>探索元对象协议</h1><p>元编程（metaprogramming）意味着编写能够操作程序的程序，包括操作程序本身</p>
<p>Groovy这样的动态语言通过元对象协议（MetaObject Protocol,MOP）提供了这种能力</p>
<p>利用Groovy的MOP，创建类、编写单元测试和引入模拟对象都很容易</p>
<p>Groovy中，使用MOP可以动态调用方法，在运行时合成类和方法</p>
<h2 id="Groovy对象"><a href="#Groovy对象" class="headerlink" title="Groovy对象"></a>Groovy对象</h2><p>Groovy对象是带有附加功能的java对象</p>
<p>Groovy应用中使用3类对象：</p>
<ul>
<li>POJO（Plain Old Java Object）普通的Java对象，使用Java或JVM上的其他语言创建</li>
<li>POGO（Plain Old Groovy Object）Groovy对象，扩展了java.lang.Object，同时实现了groovy.lang.GroovyObject</li>
<li>Groovy拦截器,扩展了GroovyInterceptable的Groovy对象，具有方法拦截功能</li>
</ul>
<p>Groovy源码，GroovyObject.java代码片段</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> groovy.lang</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GrovyObject</span>&#123;</span></div><div class="line">	Object invokeMethod(String name, Object args);</div><div class="line">	Object getProperty(String property);</div><div class="line">	<span class="keyword">void</span> setProperty(String property,Object newValue);</div><div class="line">	MetaClass getMetaClass();</div><div class="line">	<span class="keyword">void</span> setMetaClass(MetaClass metaClass);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>getMetaClass()和setMetaClass()使创建代理拦截POGO上的方法调用、在POGO上上注入方法变得容易</p>
<p>一旦类被加载到JVM中，就不能修改元对象Class，可以通过setMetaClass()修改它的MetaClass</p>
<p>GroovyInterceptable接口是扩展了GroovyObject的标记接口，实现该接口的对象上的所有方法调用，都会被invokeMethod()方法拦截</p>
<p>Groovy支持对POJO和POGO进行元编程。<br>对于POGO，Groovy维护了MetaClass的一个MetaClassRegistry<br>POGO有一个MetaClass的直接引用</p>
<p>对于POJO，Groovy将方法调用委托给通过MetaClassRegistry取得的MetaClass<br>MetaClass上定义的任何拦截器和方法，都优先于POJO原来的方法</p>
<p>对于实现了GroovyInterceptable接口的POGO，所有调用都路由到invokeMethod()</p>
<p>对于没有实现GroovyInterceptable接口的POGO<br>方法查找顺序为：</p>
<ul>
<li>MetaClass中的方法</li>
<li>POGO上的方法</li>
<li>类型为Closure的字段</li>
<li>POGO的methodMissing()方法</li>
<li>POGO的invokeMethod()方法</li>
</ul>
<p>invokeMethod()默认实现抛出MissingMethodException异常</p>
<h2 id="查询方法与属性"><a href="#查询方法与属性" class="headerlink" title="查询方法与属性"></a>查询方法与属性</h2><p>在运行时可以查询对象的方法和属性</p>
<p>使用MetaObjectProtocol的方法获取元方法和元属性（MetaClass扩展了MetaObjectProtoCol）</p>
<ul>
<li>getMetaMethod()获取元方法</li>
<li>getStaticMetaMethod()获取静态方法</li>
<li>getMetaMethods()和getStaticMetaMethods()获取重载方法的列表</li>
<li>getMetaProperty()和getStaticMetaProperty()获取元属性</li>
<li>respondsTo()检查方法是否存在</li>
<li>hasProperty()检查属性是否存在</li>
</ul>
<p>使用获得的metaMethod调用方法</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">str = <span class="string">"hello"</span></div><div class="line">methodName = <span class="string">'toUpperCase'</span></div><div class="line"></div><div class="line"><span class="comment">//获取元方法</span></div><div class="line">methodOfInterest = str.metaClass.getMetaMethod(methodName)</div><div class="line"></div><div class="line"><span class="comment">//在实例上调用元方法</span></div><div class="line">println methodOfInterest.invoke(methodName)</div></pre></td></tr></table></figure>
<blockquote>
<p>HELLO</p>
</blockquote>
<p>使用respondsTo()检查方法是否存在<br>参数：查询的实例、查询的方法名以及逗号分隔的提供给该方法的参数</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">print <span class="string">"Does String respond to toUpperCase()?"</span></div><div class="line">println String.metaClass.respondsTo(str,<span class="string">'toUpperCase'</span>)?'yes':<span class="string">'no'</span></div><div class="line">print <span class="string">"Does String respond to compareTo(String)?"</span></div><div class="line">println String.metaClass.respondsTo(str,<span class="string">'compareTo'</span>,<span class="string">"test"</span>)?'yes':<span class="string">'no'</span></div><div class="line">print <span class="string">"Does String respond to compareTo(int)?"</span></div><div class="line">println String.metaClass.respondsTo(str,<span class="string">'toUpperCase'</span>,<span class="number">5</span>)?'yes':<span class="string">'no'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Does String respond to toUpperCase()?yes<br>Does String respond to compareTo(String)?yes<br>Does String respond to compareTo(int)?no</p>
</blockquote>
<h2 id="动态访问对象"><a href="#动态访问对象" class="headerlink" title="动态访问对象"></a>动态访问对象</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> printInfo(obj)&#123;</div><div class="line">    usrRequestedProperty = <span class="string">'bytes'</span></div><div class="line">    usrRequestedMethod = <span class="string">'toUpperCase'</span></div><div class="line">    </div><div class="line">    <span class="comment">//使用索引操作符[]访问属性</span></div><div class="line">    println obj[usrRequestedProperty]</div><div class="line">    <span class="comment">//使用点号访问属性</span></div><div class="line">    println obj.<span class="string">"$usrRequestedProperty"</span></div><div class="line">    </div><div class="line">    <span class="comment">//使用点号和调用符号调用方法</span></div><div class="line">    println obj.<span class="string">"$usrRequestedMethod"</span>()</div><div class="line">    <span class="comment">//使用invokeMethod调用方法</span></div><div class="line">    println obj.invokeMethod(usrRequestedMethod,<span class="literal">null</span>)   </div><div class="line">&#125;</div><div class="line">    </div><div class="line">printInfo(<span class="string">'hello'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>[104, 101, 108, 108, 111]<br>[104, 101, 108, 108, 111]<br>HELLO<br>HELLO</p>
</blockquote>
<p>迭代对象的所有属性，使用properties属性或getProperties()方法</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">println <span class="string">"Properties of 'hello' are:"</span></div><div class="line"><span class="string">'hello'</span>.properties.each&#123;</div><div class="line">	println it</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Properties of ‘hello’ are:<br>class=class java.lang.String<br>bytes=[B@52bdbdf1<br>empty=false</p>
</blockquote>
<h1 id="使用MOP拦截方法"><a href="#使用MOP拦截方法" class="headerlink" title="使用MOP拦截方法"></a>使用MOP拦截方法</h1><p>Groovy中拦截方法调有两种方式：<br>实现GroovyInterceptable接口的对象拦截<br>MetaClass拦截</p>
<h2 id="使用GroovyInterceptable拦截方法"><a href="#使用GroovyInterceptable拦截方法" class="headerlink" title="使用GroovyInterceptable拦截方法"></a>使用GroovyInterceptable拦截方法</h2><p>一个Groovy对象，实现了GroovyInterceptable接口，<br>调用该对象上的任何一个方法(无论是否存在)，都会调用invokeMethod()</p>
<p>即GroovyInterceptable的invokeMethod()方法劫持了该对象上的所有方法调用</p>
<blockquote>
<p>注：如果一个对象的MetaClass上实现了invokeMethod()，不管方法是否存在，都会调用该方法</p>
</blockquote>
<p>使用GroovyInterceptable拦截方法调用，适于拦截作者是我们自己的类中的方法</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">GroovyInterceptable</span> &#123;</span></div><div class="line"></div><div class="line">	<span class="keyword">public</span> Car() &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">def</span> check()&#123;</div><div class="line">		System.out.println <span class="string">"check called ..."</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">def</span> start()&#123;</div><div class="line">		System.out.println <span class="string">"start called..."</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">def</span> drive()&#123;</div><div class="line">		System.out.println <span class="string">"drive called..."</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">def</span> invokeMethod(String name, args)&#123;</div><div class="line">		System.out.println (<span class="string">"Call to $name intercepted..."</span>)</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(name != <span class="string">'check'</span>)&#123;</div><div class="line">			System.out.println(<span class="string">"running filter..."</span>)</div><div class="line">			Car.metaClass.getMetaMethod(<span class="string">'check'</span>).invoke(<span class="keyword">this</span>,<span class="literal">null</span>)</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">def</span> validMethod = Car.metaClass.getMetaMethod(name, args)</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(validMethod != <span class="literal">null</span>)&#123;</div><div class="line">			<span class="comment">//调用当前对象中方法</span></div><div class="line">			validMethod.invoke(<span class="keyword">this</span>, args)</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="comment">//调用metaClass上的方法</span></div><div class="line">			Car.metaClass.invokeMethod(<span class="keyword">this</span>,name,args)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">def</span> args)&#123;</div><div class="line">		<span class="keyword">def</span> Car car = <span class="keyword">new</span> Car()</div><div class="line">		car.start()</div><div class="line">		car.drive()</div><div class="line">		car.check()</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			car.sleep()</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">//e.printStackTrace()</span></div><div class="line">			println e</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Call to start intercepted…<br>running filter…<br>check called …<br>start called…<br>Call to drive intercepted…<br>running filter…<br>check called …<br>drive called…<br>Call to check intercepted…<br>check called …<br>Call to sleep intercepted…<br>running filter…<br>check called …<br>org.codehaus.groovy.runtime.metaclass.MethodSelectionException: Could not find which method sleep() to invoke from this list:<br>  public static void java.lang.Object#sleep(long)<br>  public static void java.lang.Object#sleep(long, groovy.lang.Closure)</p>
<p>注：<br>  这里输出使用System.out.println ()替换println()<br>  因为println()是Groovy在Object上注入的一个方法，调用它会被invokeMethod()拦截，造成java.lang.StackOverflowError</p>
</blockquote>
<h2 id="使用MetaClass拦截方法"><a href="#使用MetaClass拦截方法" class="headerlink" title="使用MetaClass拦截方法"></a>使用MetaClass拦截方法</h2><p>对于无权修改类的源代码，或类是java类的情况，可以使用在MetaClass上实现invokeMethod()方法，并以此拦截方法</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car2</span> &#123;</span></div><div class="line"></div><div class="line">	<span class="keyword">public</span> Car() &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">def</span> check()&#123;</div><div class="line">		System.out.println <span class="string">"check called ..."</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">def</span> start()&#123;</div><div class="line">		System.out.println <span class="string">"start called..."</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">def</span> drive()&#123;</div><div class="line">		System.out.println <span class="string">"drive called..."</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">def</span> args)&#123;</div><div class="line">		<span class="comment">//invokeMethod()拦截所有方法调用</span></div><div class="line">		Car2.metaClass.invokeMethod = &#123;String name, params -&gt;</div><div class="line">			System.out.print(<span class="string">"Call to $name intercepted..."</span>)</div><div class="line">			<span class="keyword">if</span>(name != <span class="string">'check'</span>)&#123;</div><div class="line">				System.out.print(<span class="string">"running filter..."</span>)</div><div class="line">				<span class="comment">//delegate指向要拦截方法的目标对象</span></div><div class="line">				Car2.metaClass.getMetaMethod(<span class="string">"check"</span>).invoke(delegate, <span class="literal">null</span>)</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">def</span> validMethod = Car2.metaClass.getMetaMethod(name, params)</div><div class="line">			</div><div class="line">			<span class="keyword">if</span>(validMethod != <span class="literal">null</span>)&#123;</div><div class="line">				validMethod.invoke(delegate, params)</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				Car2.metaClass.invokeMissingMethod(delegate, name,args)</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">def</span> Car2 car = <span class="keyword">new</span> Car2()</div><div class="line">		car.start()</div><div class="line">		car.drive()</div><div class="line">		car.check()</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			car.sleep()</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">//e.printStackTrace()</span></div><div class="line">			println e</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Call to start intercepted…running filter…check called …<br>start called…<br>Call to drive intercepted…running filter…check called …<br>drive called…<br>Call to check intercepted…check called …<br>Call to sleep intercepted…running filter…check called …<br>org.codehaus.groovy.runtime.metaclass.MethodSelectionException: Could not find which method sleep() to invoke from this list:<br>  public static void java.lang.Object#sleep(long)<br>  public static void java.lang.Object#sleep(long, groovy.lang.Closure)</p>
</blockquote>
<p>只是拦截不存在的方法调用，应该使用methodMissing()代替invokeMethod()</p>
<p>可以在MetaClass上<code>同时提供invokeMethod()和methodMissing()</code>，<code>invokeMethond()优先于methodMissing()</code></p>
<h1 id="MOP方法注入"><a href="#MOP方法注入" class="headerlink" title="MOP方法注入"></a>MOP方法注入</h1><p>可以动态地向类中添加方法</p>
<h2 id="使用分类注入方法"><a href="#使用分类注入方法" class="headerlink" title="使用分类注入方法"></a>使用分类注入方法</h2><p>分类(category) 是一种能够修改类的MetaClass的对象<br>这种修改仅在代码块的作用域和执行线程内有效，退出代码块时，恢复原状</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringUtil</span>&#123;</span></div><div class="line">	<span class="comment">//self参数被指派为目标实例</span></div><div class="line">    <span class="keyword">def</span> <span class="keyword">static</span> toSSN(self)&#123;</div><div class="line">        <span class="keyword">if</span>(self.size() == <span class="number">9</span>)&#123;</div><div class="line">            <span class="string">"$&#123;self[0..2]&#125;-$&#123;self[3..4]&#125;-$&#123;self[5..8]&#125;"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">use(StringUtil)&#123;</div><div class="line">    println <span class="string">"123456789"</span>.toSSN()</div><div class="line">    println <span class="keyword">new</span> StringBuilder(<span class="string">"987654321"</span>).toSSN()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    println <span class="string">"123456789"</span>.toSSN()</div><div class="line">    &#125;<span class="keyword">catch</span>(MissingMethodException ex)&#123;</div><div class="line">        println ex.message</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>123-45-6789<br>987-65-4321<br>No signature of method: java.lang.String.toSSN() is applicable for argument types: () values: []<br>Possible solutions: toSet(), toURI(), toURI(), toURL(), toURL(), toLong()</p>
</blockquote>
<p>使用@Category注解，让Groovy将实例方法转变为静态方法</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//限定了使用类型，可指定为Object</span></div><div class="line"><span class="meta">@Category</span>(String)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringUtilAnnotated</span>&#123;</span></div><div class="line">	<span class="keyword">def</span> toSSN()&#123;</div><div class="line">		<span class="keyword">if</span>(size() == <span class="number">9</span>)&#123;</div><div class="line">            <span class="string">"$&#123;this[0..2]&#125;-$&#123;this[3..4]&#125;-$&#123;this[5..8]&#125;"</span></div><div class="line">        &#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">use(StringUtilAnnotated)&#123;</div><div class="line">	 println <span class="string">"123456789"</span>.toSSN()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>123-45-6789</p>
</blockquote>
<p>第一个参数指向方法调用的目标。其他参数放在后面</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Category</span>(String)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringUtilAnnotated</span>&#123;</span></div><div class="line">    <span class="keyword">def</span> toSSN(param1)&#123;</div><div class="line">        <span class="keyword">if</span>(size() == <span class="number">9</span>)&#123;</div><div class="line">            <span class="string">"$&#123;param1&#125;-$&#123;this[0..2]&#125;-$&#123;this[3..4]&#125;-$&#123;this[5..8]&#125;"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">use(StringUtilAnnotated)&#123;</div><div class="line">     println <span class="string">"123456789"</span>.toSSN(<span class="string">"SSN"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>SSN-123-45-6789</p>
</blockquote>
<p>可使用多个分类，带入多组方法<br>存在同名方法时，列表中后面分类优先级高</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">use(StringUtil,FindUtil)&#123;</div><div class="line">	<span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>use()可以嵌套使用，内部分类优先于外部的</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">use(StringUtil)&#123;</div><div class="line">	<span class="comment">//...</span></div><div class="line">	use(FindUtil)&#123;</div><div class="line">		<span class="comment">//...</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用分类拦截方法</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Helper</span>&#123;</span></div><div class="line">    <span class="keyword">def</span> <span class="keyword">static</span> toString(String self)&#123;</div><div class="line">        <span class="keyword">def</span> method = self.metaClass.methods.find&#123;</div><div class="line">            it.name == <span class="string">'toString'</span></div><div class="line">        &#125;</div><div class="line">        <span class="string">'!!'</span> + method.invoke(self,<span class="literal">null</span>) + <span class="string">'!!'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">use(Helper)&#123;</div><div class="line">    println <span class="string">'hello'</span>.toString()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>与GroovyInterceptable接口和metaClass.invokeMethod拦截方法不同，<br>分类拦截方法，需要为每个目标方法编写一个拦截方法</p>
<p>应该将分类用于方法注入，而不是方法拦截</p>
<h2 id="使用ExpandoMetaClass注入方法"><a href="#使用ExpandoMetaClass注入方法" class="headerlink" title="使用ExpandoMetaClass注入方法"></a>使用ExpandoMetaClass注入方法</h2><p>通过向类的MetaClass添加方法可以实现向类中注入方法，不同于分类中局限于一个块，<br>这种注入方法是全局可用的。</p>
<p>ExpandoMetaClass可以添加方法、属性、构造器和静态方法，也可以从其他类借方法，甚至向POGO和POJO中注入方法。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Integer.metaClass.daysFromNow = &#123;</div><div class="line">    Calendar today = Calendar.instance</div><div class="line">    <span class="comment">//delegate引用指向目标对象</span></div><div class="line">    today.add(Calendar.DAY_OF_YEAR,delegate)</div><div class="line">    today.time</div><div class="line">&#125;</div><div class="line"></div><div class="line">println <span class="number">5.</span>daysFromNow()</div></pre></td></tr></table></figure>
<blockquote>
<p>Tue Oct 18 20:40:45 CST 2016</p>
</blockquote>
<p>多个类中添加相同方法<br>闭包保存到一个变量中，并指派给类</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">daysFromNow = &#123;</div><div class="line">    Calendar today = Calendar.instance</div><div class="line">    today.add(Calendar.DAY_OF_YEAR,(<span class="keyword">int</span>)delegate)</div><div class="line">    today.time</div><div class="line">&#125;</div><div class="line"></div><div class="line">Integer.metaClass.daysFromNow = daysFromNow</div><div class="line">Long.metaClass.daysFromNow = daysFromNow</div><div class="line"></div><div class="line"></div><div class="line">println <span class="number">5.</span>daysFromNow()</div><div class="line">println <span class="number">5</span>L.daysFromNow()</div></pre></td></tr></table></figure>
<blockquote>
<p>Tue Oct 18 20:46:15 CST 2016<br>Tue Oct 18 20:46:15 CST 2016</p>
</blockquote>
<p>向类中注入静态方法，将其加入MetaClass的statics属性中</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Integer.metaClass.<span class="string">'static'</span>.isEven = &#123; val -&gt;</div><div class="line">    val%<span class="number">2</span> == <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">println <span class="string">"Is 2 even? "</span> + Integer.isEven(<span class="number">2</span>)</div><div class="line">println <span class="string">"Is 3 even? "</span> + Integer.isEven(<span class="number">3</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>Is 2 even? true<br>Is 3 even? false</p>
</blockquote>
<p>通过名为constructor的特殊属性加入构造器</p>
<p>使用&lt;&lt;添加构造器（使用&lt;&lt;覆盖现有构造器，Groovy报错）</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加参数类型为Calendar的构造器，返回当前日期天数</span></div><div class="line">Integer.metaClass.constructor &lt;&lt; &#123; Calendar calendar -&gt;</div><div class="line">    <span class="keyword">new</span> Integer(calendar.get(Calendar.DAY_OF_YEAR))</div><div class="line">&#125;</div><div class="line">println <span class="keyword">new</span> Integer(Calendar.instance)</div></pre></td></tr></table></figure>
<blockquote>
<p>287</p>
</blockquote>
<p>使用=替换现有构造器</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Integer.metaClass.constructor &lt;&lt; &#123; Calendar calendar -&gt;</div><div class="line">    <span class="keyword">new</span> Integer(calendar.get(Calendar.DAY_OF_YEAR))</div><div class="line">&#125;</div><div class="line"></div><div class="line">Integer.metaClass.constructor = &#123; <span class="keyword">int</span> val -&gt;</div><div class="line">    println <span class="string">"Intercepting constructor call"</span></div><div class="line">    <span class="comment">//覆盖的构造器内仍然可以使用反射调用原来的实现</span></div><div class="line">    constructor = Integer.<span class="keyword">class</span>.getConstructor(Integer.TYPE)</div><div class="line">    constructor.newInstance(val)</div><div class="line">&#125;</div><div class="line"></div><div class="line">println <span class="keyword">new</span> Integer(<span class="number">4</span>)</div><div class="line">println <span class="keyword">new</span> Integer(Calendar.instance)</div></pre></td></tr></table></figure>
<blockquote>
<p>Intercepting constructor call<br>4<br>Intercepting constructor call<br>287</p>
</blockquote>
<p>添加一两个方法，可以使用ClassName.metaClass.method = {…}<br>Groovy提供了一种可以将方法分组的方式，组织成叫做ExpandoMetaClass(EMC)DSL的方便语法</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">Integer.metaClass &#123;</div><div class="line">    daysFromNow = &#123;</div><div class="line">        Calendar today = Calendar.instance</div><div class="line">        today.add(Calendar.DAY_OF_YEAR,(<span class="keyword">int</span>)delegate)</div><div class="line">        today.time</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//添加静态方法</span></div><div class="line">    <span class="string">'static'</span> &#123;</div><div class="line">        inEven = &#123; val -&gt;</div><div class="line">            val%<span class="number">2</span> == <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//添加&amp;替换构造函数</span></div><div class="line">    constructor = &#123;Calendar calendar -&gt;</div><div class="line">        <span class="keyword">new</span> Integer(calendar.get(Calendar.DAY_OF_YEAR))        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    constructor = &#123;<span class="keyword">int</span> val -&gt;</div><div class="line">        println <span class="string">"Intercepting constructor call"</span></div><div class="line">        constructor = Integer.<span class="keyword">class</span>.getConstructor(Integer.TYPE)</div><div class="line">        constructor.newInstance(val)    </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">println <span class="number">5.</span>daysFromNow()</div><div class="line"></div><div class="line">println <span class="string">"Is 2 even? "</span> + Integer.isEven(<span class="number">2</span>)</div><div class="line">println <span class="string">"Is 3 even? "</span> + Integer.isEven(<span class="number">3</span>)</div><div class="line"></div><div class="line">println <span class="keyword">new</span> Integer(<span class="number">4</span>)</div><div class="line">println <span class="keyword">new</span> Integer(Calendar.instance)</div></pre></td></tr></table></figure>
<blockquote>
<p>Tue Oct 18 21:26:50 CST 2016<br>Is 2 even? true<br>Is 3 even? false<br>Intercepting constructor call<br>4<br>Intercepting constructor call<br>287</p>
</blockquote>
<p>利用ExpandoMethodClass可以将方法注入到POJO和POGO中，因此，可以在所有类中使用动态能力。</p>
<p>注入的方法只能从Groovy代码内调用，不能从编译过的java代码中调用，也不能从java代码中通过反射来使用<br>有一种变通方案，java中通过invokeMethod()来调用Groovy中元编程动态定义的方法</p>
<h2 id="向具体实例中注入方法"><a href="#向具体实例中注入方法" class="headerlink" title="向具体实例中注入方法"></a>向具体实例中注入方法</h2><p>可以创建一个ExpandoMetaClass实例，将方法加入其中，对其进行初始化(说明方法/属性添加完成)，再将其附到想要增强的事例上。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Persion</span>&#123;</span></div><div class="line">    <span class="keyword">def</span> play()&#123;</div><div class="line">        println <span class="string">"playing ..."</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">def</span> emc = <span class="keyword">new</span> ExpandoMetaClass(Person)</div><div class="line">emc.sing = &#123; -&gt;</div><div class="line">    <span class="string">'oh baby baby'</span></div><div class="line">&#125;</div><div class="line">emc.initialize()</div><div class="line"></div><div class="line"><span class="keyword">def</span> jack = <span class="keyword">new</span> Person()</div><div class="line"><span class="keyword">def</span> paul = <span class="keyword">new</span> Person()</div><div class="line"></div><div class="line">jack.metaClass = emc</div><div class="line"></div><div class="line"></div><div class="line">println jack.sing()</div><div class="line"></div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    paul.sing()</div><div class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</div><div class="line">    println ex</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//去掉注入的方法</span></div><div class="line">jack.metaClass = <span class="literal">null</span></div><div class="line"></div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    jack.play()</div><div class="line">    jack.sing()</div><div class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</div><div class="line">    println ex</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>oh baby baby<br>groovy.lang.MissingMethodException: No signature of method: Person.sing() is applicable for argument types: () values: []<br>Possible solutions: find(), find(groovy.lang.Closure), is(java.lang.Object), any(), print(java.io.PrintWriter), any(groovy.lang.Closure)<br>playing …<br>groovy.lang.MissingMethodException: No signature of method: Person.sing() is applicable for argument types: () values: []<br>Possible solutions: find(), find(groovy.lang.Closure), is(java.lang.Object), any(), print(java.io.PrintWriter), any(groovy.lang.Closure)</p>
</blockquote>
<p>可以将方法注入到从具体事例获得的metaClass中</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></div><div class="line">    <span class="keyword">def</span> play()&#123;</div><div class="line">        println <span class="string">"playing ..."</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">def</span> jack = <span class="keyword">new</span> Person()</div><div class="line"><span class="keyword">def</span> paul = <span class="keyword">new</span> Person()</div><div class="line"></div><div class="line">jack.metaClass.sing = &#123;</div><div class="line">    <span class="string">'oh baby baby...'</span></div><div class="line">&#125;</div><div class="line">println jack.sing()</div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    paul.sing()</div><div class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</div><div class="line">    println ex</div><div class="line">&#125;</div><div class="line"></div><div class="line">jack.metaClass = <span class="literal">null</span></div><div class="line"></div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    jack.play()</div><div class="line">    jack.sing()</div><div class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</div><div class="line">    println ex</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>oh baby baby…<br>groovy.lang.MissingMethodException: No signature of method: Person.sing() is applicable for argument types: () values: []<br>Possible solutions: find(), find(groovy.lang.Closure), is(java.lang.Object), any(), print(java.io.PrintWriter), any(groovy.lang.Closure)<br>playing …<br>groovy.lang.MissingMethodException: No signature of method: Person.sing() is applicable for argument types: () values: []<br>Possible solutions: find(), find(groovy.lang.Closure), is(java.lang.Object), any(), print(java.io.PrintWriter), any(groovy.lang.Closure)</p>
</blockquote>
<p>使用EMC DSL将方法分组，注入多个方法</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Persion</span>&#123;</span></div><div class="line">    <span class="keyword">def</span> play()&#123;</div><div class="line">        println <span class="string">"playing ..."</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">def</span> jack = <span class="keyword">new</span> Person()</div><div class="line"></div><div class="line">jack.metaClass&#123;</div><div class="line">    sing = &#123; -&gt;</div><div class="line">        <span class="string">'ho baby baby'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dance = &#123; -&gt;</div><div class="line">        <span class="string">'start the music...'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">println jack.sing()</div><div class="line">println jack.dance()</div></pre></td></tr></table></figure>
<blockquote>
<p>ho baby baby<br>start the music…</p>
</blockquote>
<h2 id="使用Mixin注入方法"><a href="#使用Mixin注入方法" class="headerlink" title="使用Mixin注入方法"></a>使用Mixin注入方法</h2><p>Groovy的Mixin是一种运行时能力，可以将多个类中的实现引入进来或混入。</p>
<p>调用方法时，Groovy先将调用路由到混入的类中，如果该方法不存在，再由主类处理。<br>可以将多个类混入到一个类中，后加入的Mixin优先级高。</p>
<h3 id="使用-Mixin注解语法注入"><a href="#使用-Mixin注解语法注入" class="headerlink" title="使用@Mixin注解语法注入"></a>使用@Mixin注解语法注入</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Friend</span> &#123;</span></div><div class="line">	<span class="keyword">def</span> listen()&#123;</div><div class="line">		<span class="string">"$name is listening as a friend"</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Mixin</span>(Friend)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line">	String firstName</div><div class="line">	String lastName</div><div class="line">	String getName()&#123;</div><div class="line">		<span class="string">"$firstName $lastName"</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">john = <span class="keyword">new</span> Person(<span class="string">firstName:</span><span class="string">"John"</span>,<span class="string">lastName:</span><span class="string">"Smith"</span>)</div><div class="line">println john.listen()</div></pre></td></tr></table></figure>
<blockquote>
<p>John Smith is listening as a friend</p>
</blockquote>
<p>使用注解混入多个类:@Mixin([Friend, Teacher])</p>
<h3 id="使用静态初试化器注入"><a href="#使用静态初试化器注入" class="headerlink" title="使用静态初试化器注入"></a>使用静态初试化器注入</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Friend</span> &#123;</span></div><div class="line">    <span class="keyword">def</span> listen()&#123;</div><div class="line">        <span class="string">"$name is listening as a friend"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line">	<span class="comment">//静态初试化器注入</span></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        mixin Friend</div><div class="line">    &#125;</div><div class="line">    String firstName</div><div class="line">    String lastName</div><div class="line">    String getName()&#123;</div><div class="line">        <span class="string">"$firstName $lastName"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">john = <span class="keyword">new</span> Person(<span class="string">firstName:</span><span class="string">"John"</span>,<span class="string">lastName:</span><span class="string">"Smith"</span>)</div><div class="line">println john.listen()</div></pre></td></tr></table></figure>
<blockquote>
<p>John Smith is listening as a friend</p>
</blockquote>
<p>注解注入和静态初试化器注入，只能由类的作者使用<br>没有类的源码或不想修改类的源码，就不能使用这种方式</p>
<h3 id="调用mixin-方法向Groovy和Java类中注入方法"><a href="#调用mixin-方法向Groovy和Java类中注入方法" class="headerlink" title="调用mixin()方法向Groovy和Java类中注入方法"></a>调用mixin()方法向Groovy和Java类中注入方法</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Friend</span> &#123;</span></div><div class="line">    <span class="keyword">def</span> listen()&#123;</div><div class="line">        <span class="string">"$name is listening as a friend"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>&#123;</span></div><div class="line">    String name</div><div class="line">&#125;</div><div class="line"></div><div class="line">Dog.mixin Friend</div><div class="line"></div><div class="line">buddy = <span class="keyword">new</span> Dog(<span class="string">name:</span> <span class="string">"Buddy"</span>)</div><div class="line"></div><div class="line">println buddy.listen()</div></pre></td></tr></table></figure>
<blockquote>
<p>Buddy is listening as a friend</p>
</blockquote>
<h3 id="向类的实例中混入类"><a href="#向类的实例中混入类" class="headerlink" title="向类的实例中混入类"></a>向类的实例中混入类</h3><p>通过在实例的metaClass上调用mixin()方法</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Friend</span> &#123;</span></div><div class="line">	<span class="keyword">def</span> listen()&#123;</div><div class="line">		<span class="string">"$name is listening as a friend"</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> &#123;</span></div><div class="line">	String name</div><div class="line">&#125;</div><div class="line"></div><div class="line">socks = <span class="keyword">new</span> Cat(<span class="string">name:</span><span class="string">"Socks"</span>)</div><div class="line">socks.metaClass.mixin Friend</div><div class="line">println socks.listen()</div></pre></td></tr></table></figure>
<blockquote>
<p>Socks is listening as a friend</p>
</blockquote>
<h3 id="类中使用多个Mixin"><a href="#类中使用多个Mixin" class="headerlink" title="类中使用多个Mixin"></a>类中使用多个Mixin</h3><p>当混入多个类时，所有这些类的方法在目标类中都是可用的</p>
<p>通过编程实现，可将这些方法以调用链条的方式链接起来</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Writer</span>&#123;</span></div><div class="line">	<span class="keyword">abstract</span> <span class="keyword">void</span> write(String message)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringWriter</span> <span class="keyword">extends</span> <span class="title">Writer</span>&#123;</span></div><div class="line">	<span class="keyword">def</span> target = <span class="keyword">new</span> StringBuilder()</div><div class="line"></div><div class="line">	<span class="keyword">void</span> write(String message)&#123;</div><div class="line">		target.append(message)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	String toString()&#123;</div><div class="line">		target.toString()</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">def</span> writeStuff(writer)&#123;</div><div class="line">	writer.write(<span class="string">"This is stupid"</span>)</div><div class="line">	println writer</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//通过create方法，向Writer中添加过滤器</span></div><div class="line"><span class="keyword">def</span> create(theWriter, Object [] filters = [])&#123;</div><div class="line">	<span class="keyword">def</span> instance = theWriter.newInstance()</div><div class="line">	filters.each &#123;filter -&gt;</div><div class="line">		instance.metaClass.mixin filter</div><div class="line">	&#125;</div><div class="line">	instance</div><div class="line">&#125;</div><div class="line"></div><div class="line">writeStuff(create(StringWriter))</div></pre></td></tr></table></figure>
<blockquote>
<p>This is stupid</p>
</blockquote>
<p>Groovy提供了一个名为mixedIn的属性，为实例保存有序的Mixin列表<br>添加的Mixin构成一个链条，通向被混入的目标实例</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Writer</span>&#123;</span></div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> write(String message)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringWriter</span> <span class="keyword">extends</span> <span class="title">Writer</span>&#123;</span></div><div class="line">    <span class="keyword">def</span> target = <span class="keyword">new</span> StringBuilder()</div><div class="line"></div><div class="line">    <span class="keyword">void</span> write(String message)&#123;</div><div class="line">        target.append(message)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String toString()&#123;</div><div class="line">        target.toString()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">def</span> writeStuff(writer)&#123;</div><div class="line">    writer.write(<span class="string">"This is stupid"</span>)</div><div class="line">    println writer</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">def</span> create(theWriter, Object [] filters = [])&#123;</div><div class="line">    <span class="keyword">def</span> instance = theWriter.newInstance()</div><div class="line">    filters.each &#123;filter -&gt;</div><div class="line">        instance.metaClass.mixin filter</div><div class="line">    &#125;</div><div class="line">    instance</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//writeStuff(create(StringWriter))</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//将信息转为大写</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UppercaseFilter</span> &#123;</span></div><div class="line">    <span class="keyword">void</span> write(String message)&#123;</div><div class="line">        <span class="keyword">def</span> allUpper = message.toUpperCase()</div><div class="line"></div><div class="line">        <span class="comment">//处理后的数据传递给下一个处理器</span></div><div class="line">        invokeOnPreviousMixin(metaClass,<span class="string">"write"</span>,allUpper)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">Object.metaClass.invokeOnPreviousMixin = &#123;</div><div class="line">    MetaClass currentMixinMetaClass, String method, Object[] args -&gt;</div><div class="line">    <span class="comment">//目标实例</span></div><div class="line">    <span class="keyword">def</span> previousMixin = delegate.getClass()</div><div class="line">    <span class="comment">//遍历找到当前mixin前的mixin</span></div><div class="line">    <span class="keyword">for</span>(mixin <span class="keyword">in</span> mixedIn.mixinClasses)&#123;</div><div class="line">        <span class="keyword">if</span>(mixin.mixinClass.theClass == currentMixinMetaClass.delegate.theClass) <span class="keyword">break</span></div><div class="line">        previousMixin = mixin.mixinClass.theClass</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//调用前一个mixin中方法</span></div><div class="line">    mixedIn[previousMixin].<span class="string">"$method"</span>(*args)</div><div class="line">&#125;</div><div class="line"></div><div class="line">writeStuff(create(StringWriter,UppercaseFilter))</div></pre></td></tr></table></figure>
<blockquote>
<p>THIS IS STUPID</p>
</blockquote>
<p>添加脏词处理过滤器</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Writer</span>&#123;</span></div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> write(String message)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringWriter</span> <span class="keyword">extends</span> <span class="title">Writer</span>&#123;</span></div><div class="line">    <span class="keyword">def</span> target = <span class="keyword">new</span> StringBuilder()</div><div class="line"></div><div class="line">    <span class="keyword">void</span> write(String message)&#123;</div><div class="line">        target.append(message)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String toString()&#123;</div><div class="line">        target.toString()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">def</span> writeStuff(writer)&#123;</div><div class="line">    writer.write(<span class="string">"This is stupid"</span>)</div><div class="line">    println writer</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">def</span> create(theWriter, Object [] filters = [])&#123;</div><div class="line">    <span class="keyword">def</span> instance = theWriter.newInstance()</div><div class="line">    filters.each &#123;filter -&gt;</div><div class="line">        instance.metaClass.mixin filter</div><div class="line">    &#125;</div><div class="line">    instance</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//writeStuff(create(StringWriter))</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UppercaseFilter</span> &#123;</span></div><div class="line">    <span class="keyword">void</span> write(String message)&#123;</div><div class="line">        <span class="keyword">def</span> allUpper = message.toUpperCase()</div><div class="line">        invokeOnPreviousMixin(metaClass,<span class="string">"write"</span>,allUpper)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">Object.metaClass.invokeOnPreviousMixin = &#123;</div><div class="line">    MetaClass currentMixinMetaClass, String method, Object[] args -&gt;</div><div class="line">    <span class="comment">//目标实例</span></div><div class="line">    <span class="keyword">def</span> previousMixin = delegate.getClass()</div><div class="line">    <span class="comment">//遍历找到当前mixin前的mixin</span></div><div class="line">    <span class="keyword">for</span>(mixin <span class="keyword">in</span> mixedIn.mixinClasses)&#123;</div><div class="line">        <span class="keyword">if</span>(mixin.mixinClass.theClass == currentMixinMetaClass.delegate.theClass) <span class="keyword">break</span></div><div class="line">        previousMixin = mixin.mixinClass.theClass</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//调用前一个mixin中方法</span></div><div class="line">    mixedIn[previousMixin].<span class="string">"$method"</span>(*args)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//writeStuff(create(StringWriter,UppercaseFilter))</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//脏字处理过滤器</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfanityFilter</span>&#123;</span></div><div class="line">    <span class="keyword">void</span> write(String message)&#123;</div><div class="line">        <span class="keyword">def</span> filtered = message.replaceAll(<span class="string">'stupid'</span>,<span class="string">'s*****'</span>)</div><div class="line">        invokeOnPreviousMixin(metaClass, <span class="string">'write'</span>, filtered)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">writeStuff(create(StringWriter,UppercaseFilter,ProfanityFilter)) </div><div class="line">writeStuff(create(StringWriter,ProfanityFilter,UppercaseFilter))</div></pre></td></tr></table></figure>
<blockquote>
<p>THIS IS S<strong>*</strong><br>THIS IS STUPID</p>
</blockquote>
<p>将Mixin链接起来实现扩展的设计，是装饰模式（Decorator Pattern）的一个实现</p>
<h1 id="MOP方法合成"><a href="#MOP方法合成" class="headerlink" title="MOP方法合成"></a>MOP方法合成</h1><p>方法注入：编写代码是知道想要添加到一个或多个类中的方法的名字<br>方法合成：调用时动态确定方法的行为</p>
<p>合成的方法可能直到调用时才会作为独立的方法存在<br>Grails创建者Graeme Rocher称其为“拦截、缓存、调用”模式</p>
<h2 id="使用methodMissing合成方法"><a href="#使用methodMissing合成方法" class="headerlink" title="使用methodMissing合成方法"></a>使用methodMissing合成方法</h2><p>通过methodMissing()拦截对不存在的方法的调用<br>通过propertyMissing()拦截对不存在属性的访问</p>
<p>基于定义的约定推断其语义，动态地为不存在的方法或属性实现相应逻辑</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></div><div class="line">    <span class="keyword">def</span> work()&#123;</div><div class="line">        <span class="string">"working ..."</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">def</span> plays = [<span class="string">'Tennis'</span>,<span class="string">'VolleyBall'</span>,<span class="string">'BasketBall'</span>]</div><div class="line"></div><div class="line">    <span class="keyword">def</span> methodMissing(String name, args)&#123;</div><div class="line">        System.out.println <span class="string">"methodMissing called for $name"</span></div><div class="line">        <span class="keyword">def</span> methodInList = plays.find&#123; it == name.split(<span class="string">'play'</span>)[<span class="number">1</span>] &#125;</div><div class="line">        <span class="keyword">if</span>(methodInList)&#123;</div><div class="line">            <span class="string">"playing $&#123;name.split('play')[1]&#125; ..."</span></div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MissingMethodException(name, Person.<span class="keyword">class</span>, args)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">jack = <span class="keyword">new</span> Person()</div><div class="line"></div><div class="line">println jack.work()</div><div class="line">println jack.playTennis()</div><div class="line">println jack.playBasketBall()</div><div class="line">println jack.playVolleyBall()</div><div class="line">println jack.playTennis()</div><div class="line"></div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    println jack.playPolitics()</div><div class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</div><div class="line">    println ex</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>working …<br>methodMissing called for playTennis<br>playing Tennis …<br>methodMissing called for playBasketBall<br>playing BasketBall …<br>methodMissing called for playVolleyBall<br>playing VolleyBall …<br>methodMissing called for playTennis<br>playing Tennis …<br>methodMissing called for playPolitics<br>groovy.lang.MissingMethodException: No signature of method: Person.playPolitics() is applicable for argument types: () values: []</p>
</blockquote>
<p>第一次调用时合成方法，将其注入到MetaClass中缓存下来，然后调用注入的方法</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></div><div class="line">    <span class="keyword">def</span> work()&#123;</div><div class="line">        <span class="string">"working ..."</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">def</span> plays = [<span class="string">'Tennis'</span>,<span class="string">'VolleyBall'</span>,<span class="string">'BasketBall'</span>]</div><div class="line"></div><div class="line">    <span class="keyword">def</span> methodMissing(String name, args)&#123;</div><div class="line">        System.out.println <span class="string">"methodMissing called for $name"</span></div><div class="line">        <span class="keyword">def</span> methodInList = plays.find&#123; it == name.split(<span class="string">'play'</span>)[<span class="number">1</span>] &#125;</div><div class="line">        <span class="keyword">if</span>(methodInList)&#123;</div><div class="line">            <span class="keyword">def</span> impl = &#123;Object[] vargs -&gt;</div><div class="line">                <span class="string">"playing $&#123;name.split('play')[1]&#125;"</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//Person instance = this;</span></div><div class="line"></div><div class="line">            Person.metaClass.<span class="string">"$name"</span> = impl<span class="comment">//注入生成的方法</span></div><div class="line"></div><div class="line">            impl(args)<span class="comment">//调用生成的方法</span></div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MissingMethodException(name, Person.<span class="keyword">class</span>, args)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">jack = <span class="keyword">new</span> Person()</div><div class="line"></div><div class="line">println jack.work()</div><div class="line">println jack.playTennis()</div><div class="line">println jack.playBasketBall()</div><div class="line">println jack.playVolleyBall()</div><div class="line">println jack.playTennis()</div><div class="line"></div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    println jack.playPolitics()</div><div class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</div><div class="line">    println ex</div><div class="line">&#125;</div><div class="line"></div><div class="line">sunday = <span class="keyword">new</span> Person()</div><div class="line">println sunday.playTennis()</div></pre></td></tr></table></figure>
<blockquote>
<p>working …<br>methodMissing called for playTennis<br>playing Tennis<br>methodMissing called for playBasketBall<br>playing BasketBall<br>methodMissing called for playVolleyBall<br>playing VolleyBall<br>methodMissing called for playTennis<br>playing Tennis<br>methodMissing called for playPolitics<br>groovy.lang.MissingMethodException: No signature of method: Person.playPolitics() is applicable for argument types: () values: []<br>playing Tennis</p>
</blockquote>
<h2 id="使用ExpandoMetaClass合成方法"><a href="#使用ExpandoMetaClass合成方法" class="headerlink" title="使用ExpandoMetaClass合成方法"></a>使用ExpandoMetaClass合成方法</h2><p>对于无权编辑类的源文件或并非POGO类，可以使用ExpandoMetaClass合成方法</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></div><div class="line">    <span class="keyword">def</span> work()&#123;</div><div class="line">        <span class="string">"working ..."</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.metaClass.methodMissing = &#123;String name, args -&gt;</div><div class="line">    <span class="keyword">def</span> plays = [<span class="string">'Tennis'</span>,<span class="string">'VolleyBall'</span>,<span class="string">'BasketBall'</span>]</div><div class="line">    System.out.println <span class="string">"methodMissing called for $name"</span></div><div class="line">    <span class="keyword">def</span> methodInList = plays.find&#123; it == name.split(<span class="string">'play'</span>)[<span class="number">1</span>] &#125;</div><div class="line">    <span class="keyword">if</span>(methodInList)&#123;</div><div class="line">        <span class="keyword">def</span> impl = &#123;Object[] vargs -&gt;</div><div class="line">            <span class="string">"playing $&#123;name.split('play')[1]&#125;"</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Person.metaClass.<span class="string">"$name"</span> = impl<span class="comment">//注入生成的方法</span></div><div class="line"></div><div class="line">        impl(args)<span class="comment">//调用生成的方法</span></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MissingMethodException(name, Person.<span class="keyword">class</span>, args)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">jack = <span class="keyword">new</span> Person()</div><div class="line"></div><div class="line">println jack.work()</div><div class="line">println jack.playTennis()</div><div class="line">println jack.playBasketBall()</div><div class="line">println jack.playVolleyBall()</div><div class="line">println jack.playTennis()</div><div class="line"></div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    println jack.playPolitics()</div><div class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</div><div class="line">    println ex</div><div class="line">&#125;</div><div class="line"></div><div class="line">sunday = <span class="keyword">new</span> Person()</div><div class="line">println sunday.playTennis()</div></pre></td></tr></table></figure>
<blockquote>
<p>working …<br>methodMissing called for playTennis<br>playing Tennis<br>methodMissing called for playBasketBall<br>playing BasketBall<br>methodMissing called for playVolleyBall<br>playing VolleyBall<br>playing Tennis<br>methodMissing called for playPolitics<br>groovy.lang.MissingMethodException: No signature of method: Person.playPolitics() is applicable for argument types: () values: []<br>playing Tennis</p>
</blockquote>
<h2 id="为实例合成方法"><a href="#为实例合成方法" class="headerlink" title="为实例合成方法"></a>为实例合成方法</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line">    <span class="keyword">def</span> work()&#123;</div><div class="line">        <span class="string">"working ..."</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">def</span> emc = <span class="keyword">new</span> ExpandoMetaClass(Person)</div><div class="line">emc.methodMissing = &#123; String name, args -&gt;</div><div class="line">    <span class="string">"I'm Jack of all trades... I can $name"</span></div><div class="line">&#125;</div><div class="line">emc.initialize()</div><div class="line"></div><div class="line"><span class="keyword">def</span> jack = <span class="keyword">new</span> Person()</div><div class="line"><span class="keyword">def</span> paul = <span class="keyword">new</span> Person()</div><div class="line"></div><div class="line">jack.metaClass = emc</div><div class="line"></div><div class="line">println jack.sing()</div><div class="line">println jack.dance()</div><div class="line">println jack.juggle()</div><div class="line"></div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    paul.sing()</div><div class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</div><div class="line">    println ex</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>I’m Jack of all trades… I can sing<br>I’m Jack of all trades… I can dance<br>I’m Jack of all trades… I can juggle<br>groovy.lang.MissingMethodException: No signature of method: Person.sing() is applicable for argument types: () values: []<br>Possible solutions: find(), find(groovy.lang.Closure), is(java.lang.Object), any(), print(java.io.PrintWriter), any(groovy.lang.Closure)</p>
</blockquote>
<h3 id="invokeMethod-与-methodMissing的对比"><a href="#invokeMethod-与-methodMissing的对比" class="headerlink" title="invokeMethod 与 methodMissing的对比"></a>invokeMethod 与 methodMissing的对比</h3><p>处理对不存在方法的调用，应该实现methodMissing()，因为它开销较低<br>拦截所有方法调用使用invokeMethod()</p>
<h2 id="invokeMethod-和methodMissing-调用顺序梳理"><a href="#invokeMethod-和methodMissing-调用顺序梳理" class="headerlink" title="invokeMethod()和methodMissing()调用顺序梳理"></a>invokeMethod()和methodMissing()调用顺序梳理</h2><h3 id="实现GroovyInterceptable接口POGO上invokeMethod-和methodMissing-调用顺序"><a href="#实现GroovyInterceptable接口POGO上invokeMethod-和methodMissing-调用顺序" class="headerlink" title="实现GroovyInterceptable接口POGO上invokeMethod()和methodMissing()调用顺序"></a>实现GroovyInterceptable接口POGO上invokeMethod()和methodMissing()调用顺序</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">GroovyInterceptable</span> &#123;</span></div><div class="line">	<span class="comment">//1</span></div><div class="line">    <span class="keyword">def</span> invokeMethod(String name, args)&#123;</div><div class="line">        System.out.println(<span class="string">"Call Method $name intercepted ..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//4</span></div><div class="line">    <span class="keyword">def</span> methodMissing(String name,args)&#123;</div><div class="line">        System.out.println(<span class="string">"Call Missing Method $name intercepted ..."</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//2</span></div><div class="line">Person.metaClass.invokeMethod = &#123;String name,args -&gt;</div><div class="line">    println <span class="string">"Call Method $name intercepted By metaClass invokeMethod..."</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//3</span></div><div class="line">Person.metaClass.methodMissing = &#123;String name,args -&gt;</div><div class="line">    println <span class="string">"Call Missing $name intercepted By metaClass methodMissing..."</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">new</span> Person().getName()</div></pre></td></tr></table></figure>
<p>调用顺序：</p>
<ul>
<li>POGO上invokeMethod()</li>
<li>metaClass上invokeMethod()</li>
<li>metaClass上methodMissing()</li>
<li>POGO上methodMissing()</li>
</ul>
<p>因此，POGO方法的调用无法通过覆盖metaClass属性上invokeMethod()方法拦截<br>POGO上invokeMethod()对未实现的方法调用metaClass上invokeMethod()<br>metaClass上nvokeMethod()对未实现的方法调用invokeMissingMethod()</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">GroovyInterceptable</span> &#123;</span></div><div class="line">    <span class="keyword">void</span> getName()&#123;</div><div class="line">        System.out.println(<span class="string">'sunday'</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">def</span> invokeMethod(String name, args)&#123;</div><div class="line">        System.out.println(<span class="string">"Call Method $name intercepted ..."</span>);</div><div class="line"><span class="comment">//        def validMethod = Person.metaClass.getMetaMethod(name);</span></div><div class="line"><span class="comment">//        if(validMethod != null)&#123;</span></div><div class="line"><span class="comment">//            validMethod.invoke(this, null)</span></div><div class="line"><span class="comment">//        &#125;else&#123;</span></div><div class="line"><span class="comment">//            Person.metaClass.invokeMethod(this, name, args)</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">def</span> methodMissing(String name,args)&#123;</div><div class="line">        System.out.println(<span class="string">"Call Missing Method $name intercepted ..."</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.metaClass.invokeMethod = &#123;String name,args -&gt;</div><div class="line">    println <span class="string">"Call Method $name intercepted By metaClass invokeMethod..."</span></div><div class="line"><span class="comment">//    def validMethod = Person.metaClass.getMetaMethod(name);</span></div><div class="line"><span class="comment">//        if(validMethod != null)&#123;</span></div><div class="line"><span class="comment">//            validMethod.invoke(delegate, null)</span></div><div class="line"><span class="comment">//        &#125;else&#123;</span></div><div class="line"><span class="comment">//            Person.metaClass.invokeMissingMethod(delegate, name, args)</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.metaClass.methodMissing = &#123;String name,args -&gt;</div><div class="line">    println <span class="string">"Call Method $name intercepted By metaClass methodMissing..."</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">new</span> Person().getName()</div><div class="line"><span class="keyword">new</span> Person().getFirstName()</div></pre></td></tr></table></figure>
<blockquote>
<p>Call Method getName intercepted …<br>sunday<br>Call Method getFirstName intercepted …<br>Call Method getFirstName intercepted By metaClass invokeMethod…<br>Call Method getFirstName intercepted By metaClass methodMissing…</p>
</blockquote>
<h3 id="没有实现GroovyInterceptable接口POGO上invokeMethod-和methodMissing-调用顺序"><a href="#没有实现GroovyInterceptable接口POGO上invokeMethod-和methodMissing-调用顺序" class="headerlink" title="没有实现GroovyInterceptable接口POGO上invokeMethod()和methodMissing()调用顺序"></a>没有实现GroovyInterceptable接口POGO上invokeMethod()和methodMissing()调用顺序</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></div><div class="line">    <span class="keyword">void</span> getName()&#123;</div><div class="line">        System.out.println(<span class="string">'sunday'</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">def</span> invokeMethod(String name, args)&#123;</div><div class="line">        System.out.println(<span class="string">"Call Method $name intercepted ..."</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">def</span> methodMissing(String name,args)&#123;</div><div class="line">        System.out.println(<span class="string">"Call Missing Method $name intercepted ..."</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.metaClass.invokeMethod = &#123;String name,args -&gt;</div><div class="line">    println <span class="string">"Call Method $name intercepted By metaClass invokeMethod..."</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.metaClass.methodMissing = &#123;String name,args -&gt;</div><div class="line">    println <span class="string">"Call Method $name intercepted By metaClass methodMissing..."</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> Person().getName()</div><div class="line"><span class="keyword">new</span> Person().getFirstName()</div></pre></td></tr></table></figure>
<p>调用顺序：</p>
<ul>
<li>metaClass上invokeMethod()</li>
<li>metaClass上methodMissing()</li>
<li>POGO上methodMissing()</li>
<li>POGO上invokeMethod()</li>
</ul>
<p>其中metaClass上invokeMethod()会劫持所有方法调用，其他方法在方法不存在时才调用</p>
<h1 id="MOP技术汇总"><a href="#MOP技术汇总" class="headerlink" title="MOP技术汇总"></a>MOP技术汇总</h1><h2 id="使用Expando创建动态类"><a href="#使用Expando创建动态类" class="headerlink" title="使用Expando创建动态类"></a>使用Expando创建动态类</h2><p>Groovy中可以完全在运行时创建一个类</p>
<p>Groovy的Expando动态合成类，可在构建时使用一个Map为其制定属性和方法，也可动态地随时指定</p>
<p>使用Expando创建类的两种方式</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">carA = <span class="keyword">new</span> Expando()</div><div class="line">carB = <span class="keyword">new</span> Expando(<span class="string">year:</span> <span class="number">2012</span>, <span class="string">miles:</span><span class="number">0</span>)</div><div class="line"></div><div class="line">carA.year = <span class="number">2012</span></div><div class="line">carA.miles = <span class="number">10</span></div><div class="line"></div><div class="line">println <span class="string">"carA: "</span> + carA</div><div class="line">println <span class="string">"carB: "</span> + carB</div></pre></td></tr></table></figure>
<blockquote>
<p>carA: {year=2012, miles=10}<br>carB: {year=2012, miles=0}</p>
</blockquote>
<p>动态创建方法</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">carA = <span class="keyword">new</span> Expando(<span class="string">year:</span> <span class="number">2012</span>, <span class="string">miles:</span><span class="number">0</span>,<span class="string">turn:</span>&#123;println <span class="string">'turning...'</span>&#125;)</div><div class="line"></div><div class="line">carA.drive = &#123;</div><div class="line">    miles += <span class="number">10</span></div><div class="line">    println <span class="string">"$miles miles driven"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">carA.[<span class="string">'brand'</span>] = <span class="string">'audi'</span></div><div class="line"></div><div class="line">carA.drive()</div><div class="line">carA.turn()</div><div class="line">println carA</div></pre></td></tr></table></figure>
<blockquote>
<p>40 miles driven<br>turning…<br>{year=2012, miles=0, turn=ConsoleScript74$_run_closure1@79aba442, drive=ConsoleScript74$_run_closure2@44915e6e, brand=audi}</p>
</blockquote>
<p>在运行时合成类，可以使用Expando。它是轻量级的，而且非常灵活<br>单元测试创建模拟（Mock）对象时，该特性会大放光彩</p>
<h2 id="方法委托"><a href="#方法委托" class="headerlink" title="方法委托"></a>方法委托</h2><p>继承关系保留给is-a或kind-of关系；大多数情况，应该首选委托</p>
<h2 id="Groovy通过MOP轻松实现委托"><a href="#Groovy通过MOP轻松实现委托" class="headerlink" title="Groovy通过MOP轻松实现委托"></a>Groovy通过MOP轻松实现委托</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span>&#123;</span></div><div class="line">	<span class="keyword">def</span> simpleWork1(spec)&#123;</div><div class="line">		println <span class="string">"worker does work1 with spec $spec"</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">def</span> simpleWork2()&#123;</div><div class="line">		println <span class="string">"worker does work2"</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Expert</span> &#123;</span></div><div class="line">	<span class="keyword">def</span> advancedWork1(spec)&#123;</div><div class="line">		println <span class="string">"Expert does work1 with spec $spec"</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">def</span> advancedWork2(scope, spec)&#123;</div><div class="line">		println <span class="string">"Expert does work2 with scope $scope spec $spec"</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> &#123;</span></div><div class="line">	<span class="keyword">def</span> worker = <span class="keyword">new</span> Worker()</div><div class="line">	<span class="keyword">def</span> expert = <span class="keyword">new</span> Expert()</div><div class="line">	<span class="keyword">def</span> schedule() &#123; println <span class="string">"Schedule ..."</span>&#125;</div><div class="line">	<span class="keyword">def</span> methodMissing(String name, args)&#123;</div><div class="line">		println <span class="string">"intercepting call to $name ..."</span></div><div class="line">		<span class="keyword">def</span> delegateTo = <span class="literal">null</span></div><div class="line"></div><div class="line">		<span class="keyword">if</span>(name =~ <span class="regexp">/^simple/</span>)&#123; delegateTo = worker &#125;</div><div class="line">		<span class="keyword">if</span>(name =~ <span class="regexp">/^advanced/</span>)&#123; delegateTo = expert &#125;</div><div class="line">		<span class="comment">//检查委托方法是否存在</span></div><div class="line">		<span class="keyword">if</span>(delegateTo.metaClass.respondsTo(delegateTo, name, args))&#123;</div><div class="line">			Manager instance = <span class="keyword">this</span></div><div class="line">			<span class="comment">//委托方法注入当前实例</span></div><div class="line">			instance.metaClass.<span class="string">"$name"</span> = &#123; Object[] varArgs -&gt;</div><div class="line">				<span class="comment">//调用委托方法</span></div><div class="line">				delegateTo.invokeMethod(name, varArgs)</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			delegateTo.invokeMethod(name,args)</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> MissingMethodException(name, Manager.<span class="keyword">class</span>, args)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">peter = <span class="keyword">new</span> Manager()</div><div class="line">peter.schedule()</div><div class="line">peter.simpleWork1(<span class="string">'fast'</span>)</div><div class="line">peter.simpleWork1(<span class="string">'quality'</span>)</div><div class="line"></div><div class="line">peter.simpleWork2()</div><div class="line">peter.simpleWork2()</div><div class="line"></div><div class="line">peter.advancedWork1(<span class="string">'fast'</span>)</div><div class="line">peter.advancedWork1(<span class="string">'quality'</span>)</div><div class="line"></div><div class="line">peter.advancedWork2(<span class="string">'prototype'</span>, <span class="string">'fast'</span>)</div><div class="line">peter.advancedWork2(<span class="string">'product'</span>, <span class="string">'quality'</span>)</div><div class="line"></div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">	peter.simpleWork3()</div><div class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</div><div class="line">	println ex</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Schedule …<br>intercepting call to simpleWork1 …<br>worker does work1 with spec fast<br>worker does work1 with spec quality<br>intercepting call to simpleWork2 …<br>worker does work2<br>worker does work2<br>intercepting call to advancedWork1 …<br>Expert does work1 with spec fast<br>Expert does work1 with spec quality<br>intercepting call to advancedWork2 …<br>Expert does work2 with scope prototype spec fast<br>Expert does work2 with scope product spec quality<br>intercepting call to simpleWork3 …<br>groovy.lang.MissingMethodException: No signature of method: Manager.simpleWork3() is applicable for argument types: () values: []</p>
</blockquote>
<p>使用初试化块重构实现委托代码</p>
<p>重构之后代码结构</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> &#123;</span></div><div class="line">	&#123; delegateCallsTo Worker, Expert&#125;</div><div class="line"></div><div class="line">	<span class="keyword">def</span> schedule() &#123; println <span class="string">"Schedule ..."</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//委托工具方法</span></div><div class="line">Object.metaClass.delegateCallsTo = &#123; Class... klassOfDelegates -&gt;</div><div class="line">	<span class="comment">//初试化委托列表</span></div><div class="line">	<span class="keyword">def</span> objectOfDelegates = klassOfDelegates.collect&#123; it.newInstance() &#125;</div><div class="line">	delegate.metaClass.methodMissing = &#123; String name, args -&gt;</div><div class="line">		println <span class="string">"intercepting call to $name..."</span></div><div class="line"></div><div class="line">		<span class="comment">//查找委托方法</span></div><div class="line">		<span class="keyword">def</span> delegateTo = objectOfDelegates.find &#123;</div><div class="line">			it.metaClass.respondsTo(it, name, args)</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(delegateTo)&#123;</div><div class="line">			<span class="comment">//注入委托方法</span></div><div class="line">			delegate.metaClass.<span class="string">"$&#123;name&#125;"</span> = &#123; Object[] varArgs -&gt;</div><div class="line">				delegateTo.invokeMethod(name, varArgs)</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//调用委托方法</span></div><div class="line">			delegateTo.invokeMethod(name, args)</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> MissingMethodException(name, delegate.getClass(), args)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">peter = <span class="keyword">new</span> Manager()</div><div class="line">peter.schedule()</div><div class="line">peter.simpleWork1(<span class="string">'fast'</span>)</div><div class="line">peter.simpleWork1(<span class="string">'quality'</span>)</div><div class="line"></div><div class="line">peter.simpleWork2()</div><div class="line">peter.simpleWork2()</div><div class="line"></div><div class="line">peter.advancedWork1(<span class="string">'fast'</span>)</div><div class="line">peter.advancedWork1(<span class="string">'quality'</span>)</div><div class="line"></div><div class="line">peter.advancedWork2(<span class="string">'prototype'</span>, <span class="string">'fast'</span>)</div><div class="line">peter.advancedWork2(<span class="string">'product'</span>, <span class="string">'quality'</span>)</div><div class="line"></div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    peter.simpleWork3()</div><div class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</div><div class="line">    println ex</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Schedule …<br>intercepting call to simpleWork1…<br>worker does work1 with spec fast<br>worker does work1 with spec quality<br>intercepting call to simpleWork2…<br>worker does work2<br>worker does work2<br>intercepting call to advancedWork1…<br>Expert does work1 with spec fast<br>Expert does work1 with spec quality<br>intercepting call to advancedWork2…<br>Expert does work2 with scope prototype spec fast<br>Expert does work2 with scope product spec quality<br>intercepting call to simpleWork3…<br>groovy.lang.MissingMethodException: No signature of method: Manager.simpleWork3() is applicable for argument types: () values: []</p>
</blockquote>
<p>先添加的委托类先调用</p>
<h2 id="Groovy使用-Delegate注解实现静态委托"><a href="#Groovy使用-Delegate注解实现静态委托" class="headerlink" title="Groovy使用@Delegate注解实现静态委托"></a>Groovy使用@Delegate注解实现静态委托</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> &#123;</span></div><div class="line">	<span class="keyword">def</span> work()&#123;</div><div class="line">		println <span class="string">'get work done'</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">def</span> analyze()&#123;</div><div class="line">		println <span class="string">'analyze...'</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">def</span> writeReport()&#123;</div><div class="line">		println <span class="string">'get report written'</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Expert</span> &#123;</span></div><div class="line">	<span class="keyword">def</span> analyze()&#123;</div><div class="line">		println <span class="string">"expert analysis..."</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> &#123;</span></div><div class="line">	<span class="meta">@Delegate</span> Expert expert = <span class="keyword">new</span> Expert()</div><div class="line">	<span class="meta">@Delegate</span> Worker worker = <span class="keyword">new</span> Worker()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">def</span> bernie = <span class="keyword">new</span> Manager()</div><div class="line">bernie.analyze()</div><div class="line">bernie.writeReport()</div></pre></td></tr></table></figure>
<blockquote>
<p>expert analysis…<br>get report written</p>
</blockquote>
<p>委托类中的同名方法，后引入进来的同名方法，被忽略</p>
<h1 id="应用编译时元编程"><a href="#应用编译时元编程" class="headerlink" title="应用编译时元编程"></a>应用编译时元编程</h1><p>现在主要是框架或工具的编写者使用<br>在编译时分析和修改程序结构<br>编译时元编程，正是某些强大的特性和基于Groovy的工具背后的魔力所在</p>
<p>使用编译时元编程分析代码结构、拦截方法及注入行为</p>
<p>#Groovy生成器</p>
<h2 id="构建XML"><a href="#构建XML" class="headerlink" title="构建XML"></a>构建XML</h2><p>Groovy几乎使处理XML变成一种乐趣</p>
<p>调用的不存在的方法，假定是子元素的名字<br>调用方法传递的Map参数（如language(name: value)）,当作元素的属性<br>当个参数，（如author(value)），表示元素内容</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">writer = new StringWriter()</div><div class="line"></div><div class="line">bldr = new groovy.xml.MarkupBuilder(writer)</div><div class="line">bldr.languages &#123;</div><div class="line">    language(name:'C++')&#123; author('Stroustrup')&#125;</div><div class="line">    language(name:'Java')&#123; author('Gosling') &#125;</div><div class="line">    language(name:'List')&#123; author('McCarthy') &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">println writer</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">languages</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">language</span> <span class="attr">name</span>=<span class="string">'C++'</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>Stroustrup<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">language</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">language</span> <span class="attr">name</span>=<span class="string">'Java'</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>Gosling<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">language</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">language</span> <span class="attr">name</span>=<span class="string">'List'</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>McCarthy<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">language</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">languages</span>&gt;</span></div></pre></td></tr></table></figure>
<p>MarkupBuilder适合小到中性文档。<br>文档非常大时（若干兆），可以使用StreamingMarkupBuilder</p>
<h2 id="构建JSON"><a href="#构建JSON" class="headerlink" title="构建JSON"></a>构建JSON</h2><p>只需将实例发送给groovy.json.JsonBuilder的构造器<br>调用writeTo()方法，可将生成的JSON格式写入到一个Writer中</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line">    String first</div><div class="line">    String last</div><div class="line">    <span class="keyword">def</span> sigs</div><div class="line">    <span class="keyword">def</span> tools</div><div class="line">&#125;</div><div class="line"></div><div class="line">john = <span class="keyword">new</span> Person(<span class="string">first:</span><span class="string">"John"</span>, <span class="string">last:</span><span class="string">"Smith"</span>, <span class="string">sigs:</span>[<span class="string">'Java'</span>,<span class="string">'Groovy'</span>], <span class="string">tools:</span> [<span class="string">'script'</span>:<span class="string">'Groovy'</span>, <span class="string">'test'</span>: <span class="string">'Spock'</span>])</div><div class="line">bldr = <span class="keyword">new</span> groovy.json.JsonBuilder(john)</div><div class="line">writer = <span class="keyword">new</span> StringWriter()</div><div class="line">bldr.writeTo(writer)</div><div class="line">println writer</div></pre></td></tr></table></figure>
<blockquote>
<p>{“first”:”John”,”last”:”Smith”,”tools”:{“script”:”Groovy”,”test”:”Spock”},”sigs”:[“Java”,”Groovy”]}</p>
</blockquote>
<p>自定义输出格式</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">john = <span class="keyword">new</span> Person(<span class="string">first:</span><span class="string">"John"</span>, <span class="string">last:</span><span class="string">"Smith"</span>, <span class="string">sigs:</span>[<span class="string">'Java'</span>,<span class="string">'Groovy'</span>], <span class="string">tools:</span> [<span class="string">'script'</span>:<span class="string">'Groovy'</span>, <span class="string">'test'</span>: <span class="string">'Spock'</span>])</div><div class="line">bldr = <span class="keyword">new</span> groovy.json.JsonBuilder()</div><div class="line">bldr &#123;</div><div class="line">    firstName john.first</div><div class="line">    lastName john.last</div><div class="line">    <span class="string">"special interest groups"</span> john.sigs</div><div class="line">    <span class="string">"preferred tools"</span> &#123;</div><div class="line">        numberOfTools john.tools.size()</div><div class="line">        tools john.tools</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">writer = <span class="keyword">new</span> StringWriter()</div><div class="line">bldr.writeTo(writer)</div><div class="line">println writer</div></pre></td></tr></table></figure>
<blockquote>
<p>{“firstName”:”John”,”lastName”:”Smith”,”special interest groups”:[“Java”,”Groovy”],”preferred tools”:{“numberOfTools”:2,”tools”:{“script”:”Groovy”,”test”:”Spock”}}}</p>
</blockquote>
<p>创建时就将JSON变为流，可以使用StreamingJsonBuilder代替JsonBuilder</p>
<h2 id="解析JSON"><a href="#解析JSON" class="headerlink" title="解析JSON"></a>解析JSON</h2><p>利用Groovy提供的JsonSlurper，从JSON数据创建HashMap<br>parseText()读取包含在String中的JSON数据<br>parse()从Reader或文件中读取JSON数据</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> sluper = <span class="keyword">new</span> groovy.json.JsonSlurper()</div><div class="line"><span class="comment">//def person = sluper.parse(new FileReader('C:\\Users\\wangdz\\Desktop\\person.json'))</span></div><div class="line"><span class="keyword">def</span> person = sluper.parseText(<span class="string">'&#123;"first":"John","last":"Smith","tools":&#123;"script":"Groovy","test":"Spock"&#125;,"sigs":["Java","Groovy"]&#125;'</span>)</div><div class="line"></div><div class="line">println <span class="string">"$person.first $person.last is interested in $&#123;person.sigs.join(', ')&#125;"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>John Smith is interested in Java, Groovy</p>
</blockquote>
<h2 id="构建Swing应用"><a href="#构建Swing应用" class="headerlink" title="构建Swing应用"></a>构建Swing应用</h2><p>Groovy为创建Swing应用提供了一个生成器。</p>
<p>如果要创建任何较大型的Swing应用，建议研究下Griffon项目。<br>Griffon是构建于Groovy之上的框架，使用“约定优于配置”的原则创建Swing应用。<br>它不仅减轻了创建GUI的痛苦，还可以跨多个线程正确地处理事件。</p>
<h2 id="使用元编程定制器"><a href="#使用元编程定制器" class="headerlink" title="使用元编程定制器"></a>使用元编程定制器</h2><p>定制生成器有两种方式：</p>
<ul>
<li>利用Groovy元编程能力，一切自己来</li>
<li>使用Groovy提供的BuilderSupport或FactoryBuilderSupport </li>
</ul>
<h1 id="单元测试和模拟"><a href="#单元测试和模拟" class="headerlink" title="单元测试和模拟"></a>单元测试和模拟</h1><p>单元测试对于元编程至关重要<br>但元测试类似对软件进行锻炼，能够改进代码的健康度</p>
<h2 id="对Java和Groovy代码执行单元测试"><a href="#对Java和Groovy代码执行单元测试" class="headerlink" title="对Java和Groovy代码执行单元测试"></a>对Java和Groovy代码执行单元测试</h2><p>单元测试必须满足FAIR条件</p>
<ul>
<li>快速（fast）</li>
<li>自动化（automated）</li>
<li>隔离（isolated）</li>
<li>可重复（repeatable）</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> <span class="keyword">extends</span> <span class="title">GroovyTestCase</span> &#123;</span></div><div class="line">	<span class="keyword">void</span> testListSize()&#123;</div><div class="line">		<span class="keyword">def</span> lst = [<span class="number">1</span> , <span class="number">2</span>]</div><div class="line">		assertEquals <span class="string">"ArrayList size must be 2"</span>, <span class="number">2</span>, lst.size()</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>.<br>Time: 0<br>OK (1 test)</p>
</blockquote>
<p>Groovy内置了JUnit,可以使用JUnit中的任何assert方法<br>Groovy添加了更多assert方法<br>如：assertArrayEquals()、assertLength()、assertContains()、assertToString()、assertInspect()、assertScript()和shouldFail()等</p>
<p>编写单元测试时，考虑编写3种类型测试：正面测试、负面测试和异常测试</p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Groovy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gradle Note]]></title>
      <url>http://xiaozhuang.github.io/2016/07/30/gradle-note/</url>
      <content type="html"><![CDATA[<p>Gradle 是java软件开发中的自动化构建工具，类似于传统工具如Ant和Maven。<br>Gradle吸收或沿用了Maven中比较成功的一些实践，但相对Maven和Ant又有极强的扩展。<br><a id="more"></a></p>
<h1 id="开始使用Gradle"><a href="#开始使用Gradle" class="headerlink" title="开始使用Gradle"></a>开始使用Gradle</h1><p>Gradle构建脚本的<br>在shell中执行gradle命令时，Gradle会寻找名为build.gradle的文件</p>
<p>构建脚本</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">task helloWord&#123;</div><div class="line">	<span class="comment">//最后执行</span></div><div class="line">	doLast&#123;</div><div class="line">		println <span class="string">'Hello world!'</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行脚本</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle -q helloWord</div></pre></td></tr></table></figure>
<h2 id="使用左移符号简单代表doLast"><a href="#使用左移符号简单代表doLast" class="headerlink" title="使用左移符号简单代表doLast"></a>使用左移符号简单代表doLast</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">task helloWord &lt;&lt; &#123;</div><div class="line">	println <span class="string">'Hello world!'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="动态任务定义和任务链"><a href="#动态任务定义和任务链" class="headerlink" title="动态任务定义和任务链"></a>动态任务定义和任务链</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">task startSession &lt;&lt; &#123;</div><div class="line">	chant();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">def</span> chant() &#123;</div><div class="line">	<span class="comment">//能够直接访问ant任务</span></div><div class="line">	ant.echo(<span class="string">message:</span><span class="string">'Repeat after me...'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//动态创建3个任务</span></div><div class="line"><span class="number">3.</span>times &#123;</div><div class="line">	<span class="comment">//Groovy自动地暴露一个隐式变量it来指定循环迭代的次数</span></div><div class="line">	task <span class="string">"yayGradle$it"</span> &lt;&lt; &#123;</div><div class="line">		println <span class="string">'Gradle rocks'</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//任务依赖</span></div><div class="line">yayGradle0.dependsOn startSession</div><div class="line">yayGradle2.dependsOn yayGradle1,yayGradle0</div><div class="line">task groupTherapy(<span class="string">dependsOn:</span>yayGradle2)</div></pre></td></tr></table></figure>
<p>运行脚本</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle groupTherapy</div></pre></td></tr></table></figure>
<h2 id="列出项目中所有可用的task"><a href="#列出项目中所有可用的task" class="headerlink" title="列出项目中所有可用的task"></a>列出项目中所有可用的task</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gradle -q task</div><div class="line"></div><div class="line"><span class="comment">#显示依赖任务</span></div><div class="line">gradle -q tasks --all</div></pre></td></tr></table></figure>
<h2 id="任务执行"><a href="#任务执行" class="headerlink" title="任务执行"></a>任务执行</h2><p>一次执行多个任务</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle yayGradle0 groupTherapy</div></pre></td></tr></table></figure>
<p>任务通常只会执行一次，无论它们在命令行中指定还是作为另一个任务的依赖</p>
<h3 id="任务名缩写"><a href="#任务名缩写" class="headerlink" title="任务名缩写"></a>任务名缩写</h3><p>Gradle能够以驼峰式的缩写在命令行上运行任务</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle gT</div></pre></td></tr></table></figure>
<p>任务名的缩写必须是唯一的，Gradle才能找到相应的任务</p>
<h3 id="在执行时排除一个任务"><a href="#在执行时排除一个任务" class="headerlink" title="在执行时排除一个任务"></a>在执行时排除一个任务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle groupTherapy -x yayGradle0</div></pre></td></tr></table></figure>
<p>Gradle排除的任务yayGradle0和它的依赖任务startSession，这个概念叫做智能排除。</p>
<h3 id="命令行选项"><a href="#命令行选项" class="headerlink" title="命令行选项"></a>命令行选项</h3><p>简单示例<br>将日志级别改变到INFO</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle groupTherapy -i</div></pre></td></tr></table></figure>
<p>发生错误时打印堆栈信息</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle groupTherapy -s</div></pre></td></tr></table></figure>
<p>组合使用多个选项<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gradle groupTherapy -is</div><div class="line"></div><div class="line">gradle groupTherapy -i<span class="_">-s</span></div></pre></td></tr></table></figure></p>
<h4 id="重要选项"><a href="#重要选项" class="headerlink" title="重要选项"></a>重要选项</h4><p>-?,h,–help:打印所有可用的命令行选项，包含描述信息<br>-b,–build-file:指定构建脚本文件，默认构建脚本文件为build.gradle<br>–offline:以离线模式运行构建，仅在本地缓存中检查依赖是否存在</p>
<h4 id="参数选项"><a href="#参数选项" class="headerlink" title="参数选项"></a>参数选项</h4><p>-D,–system-prop:JVM参数，Gradle是以一个JVM进程运行的<br>-P,–project-prop:项目参数，是构建脚本中可用的变量</p>
<h4 id="日志选项"><a href="#日志选项" class="headerlink" title="日志选项"></a>日志选项</h4><p>-i,–info:默认设置下Gradle构建不会输出大量信息，通过将Gradle的日志级别改变到INFO以获得更多信息。<br>-s,–stacktrace:在有异常抛出时打印堆栈信息<br>-q,–quiet:减少构建出错时打印出的错误日志</p>
<h4 id="帮助任务"><a href="#帮助任务" class="headerlink" title="帮助任务"></a>帮助任务</h4><p>tasks:显示项目中所有可运行的task，包含描述信息。项目中应用的插件可能会提供一些额外的task。<br>properties:显示项目中所用可用属性。某些属性由Gradle的project对象提供，其他属性都由用户定义。</p>
<h3 id="Gradle守护进程"><a href="#Gradle守护进程" class="headerlink" title="Gradle守护进程"></a>Gradle守护进程</h3><p>守护进程已后台运行方式运行Gradle。一旦启动，gradle命令就会在后续构建中重用之前创建的守护进程，以避免启动时造成的开销。</p>
<p>启动方式：添加 –daemon选项，如：gradle groupTherapy –daemon</p>
<p>守护进程只会被创建一次</p>
<p>守护进程会在3小时空闲时间后自动过期</p>
<p>执行构建时不使用守护进程：–no-daemon</p>
<p>手动停止守护进程：gradle –stop</p>
<h1 id="通过范例学习构建Gradle项目"><a href="#通过范例学习构建Gradle项目" class="headerlink" title="通过范例学习构建Gradle项目"></a>通过范例学习构建Gradle项目</h1><h2 id="初始化java项目"><a href="#初始化java项目" class="headerlink" title="初始化java项目"></a>初始化java项目</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gradle init --<span class="built_in">type</span> java-library --<span class="built_in">test</span>-framework spock</div><div class="line"></div><div class="line">gradle init --<span class="built_in">type</span> java-library --<span class="built_in">test</span>-framework testng</div></pre></td></tr></table></figure>
<h2 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle build</div></pre></td></tr></table></figure>
<p>构建过程中标记为UP-TO-DATE的消息，表示跳过的任务。Gradle的增量式构建支持自动鉴别不需要被运行的任务。</p>
<h2 id="定制项目"><a href="#定制项目" class="headerlink" title="定制项目"></a>定制项目</h2><h3 id="定制项目结构"><a href="#定制项目结构" class="headerlink" title="定制项目结构"></a>定制项目结构</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//修改目录结构</span></div><div class="line">sourceSets&#123;</div><div class="line">	main&#123;</div><div class="line">		java &#123;</div><div class="line">			srcDirs = [<span class="string">'src'</span>]</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	test&#123;</div><div class="line">		java&#123;</div><div class="line">			srcDirs = [<span class="string">'test'</span>]</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//编译目录</span></div><div class="line">buildDir = <span class="string">'out'</span></div><div class="line"></div><div class="line"><span class="comment">//设置编译版本</span></div><div class="line">sourceCompatibility = <span class="number">1.7</span></div><div class="line"></div><div class="line"><span class="comment">//指定入口函数</span></div><div class="line">jar &#123;</div><div class="line">	manifest &#123;</div><div class="line">		attributes <span class="string">'Main-Class'</span>:<span class="string">'com.sunday.to_do.App'</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="配置和使用外部依赖"><a href="#配置和使用外部依赖" class="headerlink" title="配置和使用外部依赖"></a>配置和使用外部依赖</h2><h3 id="定义仓库"><a href="#定义仓库" class="headerlink" title="定义仓库"></a>定义仓库</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">    <span class="comment">// Use 'jcenter' for resolving your dependencies.</span></div><div class="line">    <span class="comment">// You can declare any Maven/Ivy/file repository here.</span></div><div class="line"></div><div class="line">    <span class="comment">//使用mavenLocal()配置maven的本地仓库后</span></div><div class="line">    <span class="comment">//gradle默认会按以下顺序去查找本地的仓库：USER_HOME/.m2/settings.xml &gt;&gt; M2_HOME/conf/settings.xml &gt;&gt; USER_HOME/.m2/repository</span></div><div class="line">    mavenLocal()</div><div class="line">    </div><div class="line">    jcenter()</div><div class="line"></div><div class="line">    <span class="comment">//Maven</span></div><div class="line">    <span class="comment">//mavenCentral()</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="设置Gradle的JVM选项信息"><a href="#设置Gradle的JVM选项信息" class="headerlink" title="设置Gradle的JVM选项信息"></a>设置Gradle的JVM选项信息</h2><p>使用环境变量GRADLE_OPTS<br>如设置最大堆内存：GRADLE_OPTS=”-Xmx1024m”</p>
<p>更好的方式是将变量添加到$GRADLE_HOME/bin目录下的Gradle启动脚本中。</p>
<h2 id="设置项目编码"><a href="#设置项目编码" class="headerlink" title="设置项目编码"></a>设置项目编码</h2><p>compileJava.options.encoding = ‘UTF-8’</p>
<h2 id="Gradle-做Web开发"><a href="#Gradle-做Web开发" class="headerlink" title="Gradle 做Web开发"></a>Gradle 做Web开发</h2><h3 id="添加web组件"><a href="#添加web组件" class="headerlink" title="添加web组件"></a>添加web组件</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将java插件换成war组件</span></div><div class="line"><span class="comment">//war 插件扩展自java插件，不需要在构建脚本中应用java插件</span></div><div class="line">apply <span class="string">plugin:</span> <span class="string">'war'</span></div><div class="line"></div><div class="line"><span class="comment">//在dependencies中，添加web需要的依赖</span></div><div class="line"><span class="comment">//编译时需要，但由运行时提供</span></div><div class="line">providedCompile <span class="string">'javax.servlet:servlet-api:2.5'</span></div><div class="line"><span class="comment">//编译时不需要，但运行时需要，会成为war文件的一部分</span></div><div class="line">runtime <span class="string">'javax.servlet:jstl:1.1.2'</span></div></pre></td></tr></table></figure>
<p>Web应用默认约定的源代码目录是src/main/webapp</p>
<p>定制war插件目录，参考War插件DSL指南</p>
<h3 id="使用jetty插件运行项目"><a href="#使用jetty插件运行项目" class="headerlink" title="使用jetty插件运行项目"></a>使用jetty插件运行项目</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'jetty'</span></div><div class="line"></div><div class="line"><span class="comment">//jerry运行参数，默认contextPath项目名，端口：8080</span></div><div class="line">jettyRun &#123;</div><div class="line">    httpPort = <span class="number">9090</span></div><div class="line">    contextPath = <span class="string">'todo'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用jetty运行项目：gradle jettyRun</p>
<h1 id="构建脚本概要"><a href="#构建脚本概要" class="headerlink" title="构建脚本概要"></a>构建脚本概要</h1><h1 id="构建块"><a href="#构建块" class="headerlink" title="构建块"></a>构建块</h1><p>每个构建包含至少一个project，进而又包含一个或多个task。<br>projcet和task暴露的属性可以用来控制构建</p>
<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>项目（project）代表一个正在构建的组件（比如一个jar文件）或一个想要完成的目标（如部署应用程序）</p>
<p>当访问属性和方法时，不需要使用project变量————它假设你是指Projcet实例</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">setDescription(<span class="string">"myProject"</span>)		<span class="comment">//不显示使用project变量设置项目描述</span></div><div class="line">println <span class="string">"Description of project $name: "</span> + project.description 		<span class="comment">//访问project属性</span></div></pre></td></tr></table></figure>
<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>task的功能：任务动作(task action)和任务依赖(task dependency)</p>
<p>task可以定义依赖于其他Task、动作序列和执行条件</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>每个project和task实例都提供了可以通过getter和setter方法访问的属性</p>
<h3 id="扩展属性"><a href="#扩展属性" class="headerlink" title="扩展属性"></a>扩展属性</h3><p>Gradle允许用户通过扩展属性自定义变量（以键值对形式存储）</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//只在初始化时需要使用ext命名空间</span></div><div class="line">project.ext.myProp = <span class="string">'myValue'</span></div><div class="line"></div><div class="line">ext&#123;</div><div class="line">	someOtherProp = <span class="number">123</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//访问扩展属性</span></div><div class="line"><span class="keyword">assert</span> myProp == <span class="string">'myValue'</span></div><div class="line">println project.someOtherProp</div></pre></td></tr></table></figure>
<h3 id="Gradle属性"><a href="#Gradle属性" class="headerlink" title="Gradle属性"></a>Gradle属性</h3><p>Gradle属性可以通过在gradle.properties文件中声明<br>这个文件位于<code>&lt;USER_HOME&gt;/.gradle目录</code>或<code>项目的根目录</code>下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#定义</div><div class="line">exampleProp=myProp</div></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//访问</span></div><div class="line">println <span class="string">"exampleProp is $exampleProp"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>试验中，项目根目录下的gradle.properties文件中配置的属性可以访问，</p>
<p><user_home>/.gradle目录下gradle.properties文件中配置的属性访问不到</user_home></p>
</blockquote>
<p>每个用户只能有一个Gradle属性文件位于<user_home>/.gradle目录下</user_home></p>
<h3 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h3><ul>
<li>项目属性通过-P 命令行选项提供</li>
<li>系统属性通过-D 命令行选项提供</li>
<li>环境属性按如下模式提供ORG_GRADLE_PROJECT_peopertyName=someValue</li>
</ul>
<h2 id="使用task"><a href="#使用task" class="headerlink" title="使用task"></a>使用task</h2><p>每个新创建的task都是org.gradle.api.DefaultTask类型的，标准的org.gradle.api.Task实现</p>
<h3 id="项目版本管理"><a href="#项目版本管理" class="headerlink" title="项目版本管理"></a>项目版本管理</h3><h2 id="Gradle-的内置task类型"><a href="#Gradle-的内置task类型" class="headerlink" title="Gradle 的内置task类型"></a>Gradle 的内置task类型</h2><h1 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h1><p>## </p>
<h1 id="Gradle测试"><a href="#Gradle测试" class="headerlink" title="Gradle测试"></a>Gradle测试</h1><p>自动化测试分为3种，单元测试、集成测试和功能测试</p>
<h2 id="测试配置"><a href="#测试配置" class="headerlink" title="测试配置"></a>测试配置</h2><p>testCompile：测试代码编译时依赖</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">	testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>testRuntime：测试代码编译时不需要使用，但运行时需要使用的依赖</p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java RegEx]]></title>
      <url>http://xiaozhuang.github.io/2016/07/21/Java-RegEx/</url>
      <content type="html"><![CDATA[<p>自java1.4.0以后，java就内建了正则表达式包， java.utile.regex,它的API毫不复杂（可以称得上简单），提供了强大而有创意的功能。<br>对Unicode的支持很棒，文档清晰，运行速度也很快。<br>它能够用来匹配CharSequence对象，所以使用起来非常方便。<br><a id="more"></a></p>
<h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数据检测</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CHECK_UPLOAD_REGEX = <span class="string">"^\\&#123;.*\"success\"\\:true.*&#125;$"</span>;</div><div class="line"><span class="comment">//数据</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String response_data = <span class="string">"&#123;\"success\":true,\"fileid\":[\"2\"],\"filePath\":\"2016/07/19/17/5006828089.jpg\"&#125;"</span>;</div><div class="line"><span class="keyword">if</span>(Pattern.matches(CHECK_UPLOAD_REGEX,response_data))&#123;</div><div class="line">	<span class="comment">//matched</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//文本替换</span></div><div class="line"><span class="comment">//不使用正则，普通替换</span></div><div class="line">String url = <span class="string">"editUrl=\"~/entities/Temp4/edit\""</span>;</div><div class="line">String replace = url.replace(<span class="string">"~/entities/Temp4"</span>, <span class="string">"~/entities/temp1"</span>);</div><div class="line">System.out.println(replace);</div><div class="line"></div><div class="line"><span class="comment">//点号可以匹配行结束符</span></div><div class="line">String CABLE_AREA_REGEX = <span class="string">"(?s)&lt;!-- cable --&gt;.*?&lt;!-- /cable --&gt;"</span>;</div><div class="line"><span class="comment">//使用正则，不区分大小写替换</span></div><div class="line">String replaceAll = url.replaceAll(<span class="string">"(?i)~/entities/temp4"</span>, <span class="string">"~/entities/temp1"</span>);</div><div class="line">System.out.println(replaceAll);</div></pre></td></tr></table></figure>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//捕获文件路径正则</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CAPTURE_FILEPATH_REGEX = <span class="string">"\"filePath\":(\"[^\"]*\")"</span>;</div><div class="line"><span class="comment">//数据</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String response_data = <span class="string">"&#123;\"success\":true,\"fileid\":[\"2\"],\"filePath\":\"2016/07/19/17/5006828089.jpg\"&#125;"</span>;</div><div class="line"><span class="comment">//定义并编译正则</span></div><div class="line">Pattern capture_filepath_regex_compile = Pattern.compile(CAPTURE_FILEPATH_REGEX);</div><div class="line"><span class="comment">//进行数据匹配</span></div><div class="line">Matcher capture_filepath_regex_matcher = capture_filepath_regex_compile.matcher(response_data);</div><div class="line"><span class="keyword">if</span>(capture_filepath_regex_matcher.find())&#123;</div><div class="line">    <span class="comment">//返回由以前匹配操作所匹配的输入子序列</span></div><div class="line">    String matchedText = capture_filepath_regex_matcher.group();</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> matchedFrom = capture_filepath_regex_matcher.start();</div><div class="line">    <span class="keyword">int</span> matchedTo = capture_filepath_regex_matcher.end();</div><div class="line">    System.out.println(<span class="string">"matched [ "</span> + matchedText + <span class="string">" ] from "</span>+ matchedFrom + <span class="string">" to "</span>+ matchedTo + <span class="string">"."</span>);</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="comment">//捕获组是从 1 开始从左到右的索引。组零表示整个模式，因此表达式 m.group(0) 等效于 m.group()</span></div><div class="line">    String filePath = capture_filepath_regex_matcher.group(<span class="number">1</span>);</div><div class="line">    System.out.println(filePath);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>matched [“filePath”:”2016/07/19/17/5006828089.jpg”] from 31 to 72.<br>“2016/07/19/17/5006828089.jpg”</p>
</blockquote>
<h1 id="java-util-regex使用"><a href="#java-util-regex使用" class="headerlink" title="java.util.regex使用"></a>java.util.regex使用</h1><p>java.util.regex.Pattern 是编译好的正则表达式<br>java.util.regex.Matcher 对应单独的实例，表示正则表达式应用到某个具体的目标字符串上,用来进行实际的匹配尝试（使用find），以及查询结果（使用group、start和end方法）</p>
<h2 id="Matcher对象"><a href="#Matcher对象" class="headerlink" title="Matcher对象"></a>Matcher对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//每组捕获型括号对应的信息，通过group(num)、start(num)、end(num)方法获取</span></div><div class="line"><span class="comment">//匹配的输入子序列</span></div><div class="line">String java.util.regex.MatchResult.group()</div><div class="line"><span class="comment">//编号num的捕获型括号匹配的内容,group(0) 等于group()</span></div><div class="line">String java.util.regex.MatchResult.group(<span class="keyword">int</span> num)</div><div class="line"></div><div class="line"><span class="comment">//匹配的初始索引</span></div><div class="line"><span class="keyword">int</span> java.util.regex.MatchResult.start()</div><div class="line"><span class="comment">//编号num的捕获型括号起点，start(0) 等于start()</span></div><div class="line"><span class="keyword">int</span> java.util.regex.MatchResult.start(<span class="keyword">int</span> num)</div><div class="line"></div><div class="line"><span class="comment">//匹配的结束索引</span></div><div class="line"><span class="keyword">int</span> java.util.regex.MatchResult.end()</div><div class="line"><span class="comment">//编号num的捕获型括号终点，end(0) 等于end()</span></div><div class="line"><span class="keyword">int</span> java.util.regex.MatchResult.end(<span class="keyword">int</span> num)</div><div class="line"></div><div class="line"><span class="comment">//获取当前使用的pattern</span></div><div class="line">Pattern java.util.regex.Matcher.pattern()</div><div class="line"><span class="comment">//更改pattern</span></div><div class="line">Matcher java.util.regex.Matcher.usePattern(Pattern)</div><div class="line"></div><div class="line"><span class="comment">//尝试匹配，每次都在上次尝试之后尝试新的匹配</span></div><div class="line"><span class="keyword">boolean</span> java.util.regex.Matcher.find()</div><div class="line"><span class="comment">// 重置此匹配器(检索范围为整个目标字符)，然后从距离开头offset个字符的位置开始查找</span></div><div class="line"><span class="keyword">boolean</span> java.util.regex.Matcher.find(<span class="keyword">int</span> offset)</div><div class="line"></div><div class="line"><span class="comment">// pattern捕获型括号数目</span></div><div class="line"><span class="keyword">int</span> java.util.regex.Matcher.groupCount()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 正在表达式能否`完全`匹配当前检索范围的那段文本</span></div><div class="line"><span class="keyword">boolean</span> java.util.regex.Matcher.matches()</div><div class="line"></div><div class="line"><span class="comment">// 从当前目标字符串开头开始，能否在当前检索范围内找到匹配</span></div><div class="line">java.util.regex.Matcher.lookingAt()</div><div class="line"></div><div class="line"><span class="comment">//返回此匹配器的匹配状态</span></div><div class="line"><span class="comment">//包含group、start、end、groupCount方法</span></div><div class="line">MatchResult MatchResult java.util.regex.Matcher.toMatchResult()</div></pre></td></tr></table></figure>
<h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">String regex = <span class="string">"(\\w)132"</span>;</div><div class="line">String text = <span class="string">"wangdz13230321524sunday132545"</span>;</div><div class="line">System.out.println(<span class="string">"text:"</span>+text);</div><div class="line"><span class="comment">//定义并编译正则</span></div><div class="line">Pattern pattern = Pattern.compile(regex);</div><div class="line"><span class="comment">//进行数据匹配</span></div><div class="line">Matcher matcher = pattern.matcher(text);</div><div class="line"></div><div class="line"></div><div class="line">String replaceAll = matcher.replaceAll(<span class="string">"$1182"</span>);</div><div class="line">System.out.println(<span class="string">"replaceAll:"</span>+replaceAll);</div><div class="line"></div><div class="line"></div><div class="line">String replaceFirst = matcher.replaceFirst(<span class="string">"$1182"</span>);</div><div class="line">System.out.println(<span class="string">"replaceFirst:"</span>+replaceFirst);</div></pre></td></tr></table></figure>
<blockquote>
<p>text:wangdz13230321524sunday132545<br>replaceAll:wangdz18230321524sunday182545<br>replaceFirst:wangdz18230321524sunday132545</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//替换目标字符串中与正则匹配的全部子串，放回替换之后的副本</span></div><div class="line">String java.util.regex.Matcher.replaceAll(String replacement)</div><div class="line"></div><div class="line">String.replaceAll(regex, replacement)</div><div class="line">等于 Pattern.compile(regex).matcher(text).replaceAll(replacement)</div><div class="line"></div><div class="line"><span class="comment">//仅对第一次匹配（如果存在）进行替换，String也提供了replaceFirst方法</span></div><div class="line">String java.util.regex.Matcher.replaceFirst(String replacement)</div></pre></td></tr></table></figure>
<h2 id="replacement-参数"><a href="#replacement-参数" class="headerlink" title="replacement 参数"></a>replacement 参数</h2><p>replacement参数在插入到匹配结果之前，会进行特殊处理</p>
<p>$1、$2之类会替换为对应编号的捕获型括号匹配的文本（$0 表示所有匹配的文本）<br>如果<code>只有3组</code>捕获型括号，则$25被视为$2然后是’5’<br>如果有12组捕获型括号，如果希望使用<code>第一组</code>捕获型括号，然后是’2’，应该这样’$1\2’</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对replacement中的特殊字符添加转义，避免特殊处理</span></div><div class="line">String java.util.regex.Matcher.quoteReplacement(String replacement)</div></pre></td></tr></table></figure>
<h2 id="高级查找-替换"><a href="#高级查找-替换" class="headerlink" title="高级查找-替换"></a>高级查找-替换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">String text = <span class="string">"--&gt;one+test&lt;&lt;--"</span>;</div><div class="line">String regex = <span class="string">"\\w+"</span>;</div><div class="line">StringBuffer result = <span class="keyword">new</span> StringBuffer();</div><div class="line"></div><div class="line">Pattern compile = Pattern.compile(regex);</div><div class="line">Matcher matcher = compile.matcher(text);</div><div class="line"></div><div class="line"><span class="keyword">while</span>(matcher.find())&#123;</div><div class="line">    matcher.appendReplacement(result, <span class="string">"XXX"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">matcher.appendTail(result);</div><div class="line"></div><div class="line">System.out.println(<span class="string">"result:"</span>+result);</div></pre></td></tr></table></figure>
<blockquote>
<p>result:–&gt;XXX+XXX&lt;&lt;–</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//正则表达式应用成功后（通常是find）马上调用appendReplacement，会把两个字符串添加到StringBuffer</span></div><div class="line"><span class="comment">//第一个，目标字符串匹配之前的文本</span></div><div class="line"><span class="comment">//第二个，特殊处理的replacement字符串</span></div><div class="line">Matcher java.util.regex.Matcher.appendReplacement(StringBuffer sb, String replacement)</div><div class="line"></div><div class="line"><span class="comment">//匹配停止后，将剩下的文本附加到StringBuffer</span></div><div class="line">StringBuffer java.util.regex.Matcher.appendTail(StringBuffer sb)</div></pre></td></tr></table></figure>
<h2 id="原地查找-替换"><a href="#原地查找-替换" class="headerlink" title="原地查找-替换"></a>原地查找-替换</h2><p>Matcher使用于任何实现了CharSequence接口的类，能够对目标文本实时地、原地（in place）的修改。</p>
<p>StringBuffer和StringBuilder是两种常见的实现了CharSequence接口的类</p>
<p>等长替换</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">StringBuilder text = <span class="keyword">new</span> StringBuilder(<span class="string">"It's SO very RUDE to shout!"</span>);  </div><div class="line"><span class="comment">//\p&#123;Lu&#125;大写字母</span></div><div class="line"><span class="comment">//\p&#123;Lt&#125;单词开头的字母</span></div><div class="line">Matcher matcher = Pattern.compile(<span class="string">"\\b[\\p&#123;Lu&#125;\\p&#123;Lt&#125;]+\\b"</span>).matcher(text);</div><div class="line"><span class="keyword">while</span>(matcher.find())&#123;</div><div class="line">    text.replace(matcher.start(), matcher.end(), matcher.group().toLowerCase());</div><div class="line">&#125;</div><div class="line">System.out.println(text);</div></pre></td></tr></table></figure>
<h2 id="长度变化的替换"><a href="#长度变化的替换" class="headerlink" title="长度变化的替换"></a>长度变化的替换</h2><p>长度变化的替换，需要调整“匹配指针”（在目标字符串中进行下一次find的开始位置）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">StringBuilder text = <span class="keyword">new</span> StringBuilder(<span class="string">"It's SO very RUDE to shout!"</span>);</div><div class="line"></div><div class="line">Matcher matcher = Pattern.compile(<span class="string">"\\b[\\p&#123;Lu&#125;\\p&#123;Lt&#125;]+\\b"</span>).matcher(text);</div><div class="line"><span class="keyword">int</span> matchPointer = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">//java.util.regex.Matcher.find(int start)</span></div><div class="line"><span class="comment">//重置此匹配器，然后尝试查找匹配该模式、从指定索引开始的输入序列的下一个子序列。</span></div><div class="line"><span class="keyword">while</span> (matcher.find(matchPointer)) &#123;</div><div class="line">    String replaceString = <span class="string">"&lt;b&gt;"</span> + matcher.group().toLowerCase() + <span class="string">"&lt;/b&gt;"</span>;</div><div class="line">    text.replace(matcher.start(), matcher.end(), replaceString);</div><div class="line">    <span class="comment">//调整匹配指针位置</span></div><div class="line">    matchPointer = matcher.start() + replaceString.length();</div><div class="line">&#125;</div><div class="line"></div><div class="line">System.out.println(text);</div></pre></td></tr></table></figure>
<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>Java的正则流派，java.util.regex使用传统型NFA</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>作用 </th>
</tr>
</thead>
<tbody>
<tr>
<td>(?: … )</td>
<td>非捕获型括号</td>
</tr>
<tr>
<td>?+ 、*+ 、++ 、 {m,n}+</td>
<td>占有优先量词</td>
</tr>
<tr>
<td>\b</td>
<td>单词分解符</td>
</tr>
</tbody>
</table>
<h3 id="字符缩略表示法"><a href="#字符缩略表示法" class="headerlink" title="字符缩略表示法"></a>字符缩略表示法</h3><p>\a    报警。ASCII中<bel>字符，八进制编码007<br>\b    退格。ASCII中<bs>字符，八进制编码010（许多流派中，\b只有在字符组内部才表示这样的意义，否则代表单词分解符）<br>\e    Escape字符。ASCII中<esc>字符，八进制编码033<br>\f    进纸符。ASCII中<ff>字符，八进制编码014<br>\n    换行符。Unix和DOS/Windows中，ASCII中<lf>字符，八进制编码012。MacOS中，对应ASCII中<cr>字符，十进制编码015。java中，不论什么平台，都对应ASCII中<code>&lt;LF&gt;</code>字符。<br>\r    回车。Unix和DOS/Windows中，ASCII的<cr>字符。MacOS中，对应ASCII中<lf>字符。java中，不论什么平台，都对应ASCII的<code>&lt;CR&gt;</code>字符<br>\t    水平制表符。ASCII中<ht>字符，八进制编码011<br>\v    垂直制表符。ASCII中<vt>字符，八进制编码013</vt></ht></lf></cr></cr></lf></ff></esc></bs></bel></p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> RegEX </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redis Install On CentOS]]></title>
      <url>http://xiaozhuang.github.io/2016/05/29/redis-install/</url>
      <content type="html"><![CDATA[<p>版本信息：</p>
<ul>
<li>CentOS 6.5x64</li>
<li>Redis 3.2.0</li>
</ul>
<a id="more"></a>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install -y gcc*</div><div class="line">yum install -y tcl</div><div class="line">yum install -y wget</div></pre></td></tr></table></figure>
<h1 id="下载并编译Redis"><a href="#下载并编译Redis" class="headerlink" title="下载并编译Redis"></a>下载并编译Redis</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget http://download.redis.io/releases/redis-3.2.0.tar.gz</div><div class="line">tar -xzvf redis-3.2.0.tar.gz -C /usr/<span class="built_in">local</span>/</div><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis-3.2.0</div><div class="line">make</div><div class="line">make <span class="built_in">test</span></div><div class="line">make install <span class="comment">#安装Redis命令</span></div></pre></td></tr></table></figure>
<h1 id="修改Redis配置文件"><a href="#修改Redis配置文件" class="headerlink" title="修改Redis配置文件"></a>修改Redis配置文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /usr/<span class="built_in">local</span>/redis-3.2.0/redis.conf</div></pre></td></tr></table></figure>
<ol>
<li>允许通过任意ip地址访问Redis，原配置无法远程访问Redis<br>bind 127.0.0.1 改为 bind 0.0.0.0</li>
<li>设置密码<br>requirepass redispassword</li>
</ol>
<h1 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis-3.2.0/utils</div><div class="line">./install_server.sh</div></pre></td></tr></table></figure>
<p>安装过程会提示输入Redis端口号、配置文件位置、日志位置、数据存储位置等信息<br>参考位置:</p>
<ul>
<li>配置：/var/redis/6379.conf</li>
<li>日志：/var/redis/log/redis_6379.log</li>
<li>数据：/var/redis/6379</li>
</ul>
<p>安装过程中将自动添加Redis服务开机自启<br>安装完成后Redis将自动启动</p>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service redis_6379 status</div><div class="line">service redis_6379 start</div></pre></td></tr></table></figure>
<h1 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h1><p>Redis没有设置密码情况下可以使用以下命令,停止Redis服务；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service redis_6379 stop</div></pre></td></tr></table></figure></p>
<p>若Redis设置了密码，执行这条命令会报错(error) NOAUTH Authentication required.<br>解决办法，使用Redis客户端登录Redis，再执行shutdown命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">redis-cli -a redispassword</div><div class="line">shutdown</div></pre></td></tr></table></figure></p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档:"></a>参考文档:</h1><ul>
<li><a href="http://www.cnblogs.com/haoxinyue/p/3620648.html" title="CentOS6.5下安装Redis2.8.7" target="_blank" rel="external">CentOS6.5下安装Redis2.8.7</a></li>
<li><a href="https://www.openprogrammer.info/2015/05/10/how-to-install-redis-3-x-on-new-centos-6-6-server/" title="How to install Redis 3.x on new CentOS 6.6 server" target="_blank" rel="external">How to install Redis 3.x on new CentOS 6.6 server</a>
<blockquote>
<p>注：该文章中yum -y update和yum -y upgrade命令，本人以为不可取</p>
</blockquote>
</li>
<li><a href="http://stackoverflow.com/questions/23396336/shutdown-redis-server-from-command-line" title="receive the error (error) NOAUTH Authentication required." target="_blank" rel="external">receive the error (error) NOAUTH Authentication required.</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 学习笔记]]></title>
      <url>http://xiaozhuang.github.io/2016/05/28/hexo-note/</url>
      <content type="html"><![CDATA[<p>Hexo 是高效的静态站点生成框架，基于 Node.js。 通过 Hexo 可以轻松地使用 Markdown 编写文章，除 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 快速的插入特定形式的内容<br><a id="more"></a></p>
<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Hexo依赖0.12.*以上版本node.js</p>
<h2 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p><code>注：windows以管理员运行cmd执行执行命令</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
<h2 id="Hexo初始化"><a href="#Hexo初始化" class="headerlink" title="Hexo初始化"></a>Hexo初始化</h2><p>进入将安装Hexo目录，Hexo初始化命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure></p>
<p>执行npm依赖包安装指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure></p>
<h2 id="生成部署文件"><a href="#生成部署文件" class="headerlink" title="生成部署文件"></a>生成部署文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure>
<h2 id="启动本地web服务器，预览博客"><a href="#启动本地web服务器，预览博客" class="headerlink" title="启动本地web服务器，预览博客"></a>启动本地web服务器，预览博客</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><code>注：括号内为命令简写</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</span></div><div class="line">hexo generate (hexo g)</div><div class="line"><span class="comment">#启动本地web服务，用于博客的预览</span></div><div class="line">hexo server (hexo s)</div><div class="line"><span class="comment">#清除Hexo已生成的静态文件</span></div><div class="line">hexo clean</div><div class="line"><span class="comment">#部署博客到远端服务器</span></div><div class="line">hexo deploy (hexo d)</div><div class="line"><span class="comment">#生成静态文件完成后部署</span></div><div class="line">hexo generate --deploy</div><div class="line"><span class="comment">#监视文件变动</span></div><div class="line"><span class="comment">#Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只要文件变动就会写入</span></div><div class="line">hexo generate --watch</div></pre></td></tr></table></figure></p>
<h1 id="部署博客到Github-Pages"><a href="#部署博客到Github-Pages" class="headerlink" title="部署博客到Github Pages"></a>部署博客到Github Pages</h1><p>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过<a href="http://username.github.io" target="_blank" rel="external">http://username.github.io</a> 来访问你的个人主页。</p>
<h2 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h2><h3 id="删除已有SSH信息"><a href="#删除已有SSH信息" class="headerlink" title="删除已有SSH信息"></a>删除已有SSH信息</h3><p>查看个人目录(C:\Users\username.ssh)下是否存在id_rsa、id_rsa.pub、known_hosts三个文件,如果存在删除这三个文件</p>
<h3 id="设置用户名和邮箱"><a href="#设置用户名和邮箱" class="headerlink" title="设置用户名和邮箱:"></a>设置用户名和邮箱:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name xxx</div><div class="line">git config --global user.email xxx@xxx.com</div></pre></td></tr></table></figure>
<h3 id="生成SSH公钥："><a href="#生成SSH公钥：" class="headerlink" title="生成SSH公钥："></a>生成SSH公钥：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C xxx@xxx.com</div></pre></td></tr></table></figure>
<h3 id="将生成的SSH公钥添加到github："><a href="#将生成的SSH公钥添加到github：" class="headerlink" title="将生成的SSH公钥添加到github："></a>将生成的SSH公钥添加到github：</h3><p>拷贝C:\Users\username.ssh\id_rsa.pub内容<br>在网页版github settings页面，SSH and GPG keys 中添加生成的公钥</p>
<h3 id="测试SSH配置："><a href="#测试SSH配置：" class="headerlink" title="测试SSH配置："></a>测试SSH配置：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh git@github.com</div></pre></td></tr></table></figure>
<p>配置成功会显示以下打大致内容<br>The authenticity of host ‘github.com (192.30.252.128)’ can’t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes/no)? yes<br>Warning: Permanently added ‘github.com,192.30.252.128’ (RSA) to the list of known hosts.<br>Hi git-xuhao! You’ve successfully authenticated, but GitHub does not provide shell access.<br>Connection to github.com closed.</p>
<h2 id="部署博客到github"><a href="#部署博客到github" class="headerlink" title="部署博客到github"></a>部署博客到github</h2><h3 id="修改博客网站配置文件Deployment部分"><a href="#修改博客网站配置文件Deployment部分" class="headerlink" title="修改博客网站配置文件Deployment部分"></a>修改博客网站配置文件Deployment部分</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/username/username.github.io.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure>
<h3 id="安装npm依赖"><a href="#安装npm依赖" class="headerlink" title="安装npm依赖"></a>安装npm依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<h3 id="部署博客到服务器"><a href="#部署博客到服务器" class="headerlink" title="部署博客到服务器"></a>部署博客到服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<p>部署过程需要输入github用户名和密码</p>
<h1 id="添加搜索（Local-Search）"><a href="#添加搜索（Local-Search）" class="headerlink" title="添加搜索（Local Search）"></a>添加搜索（Local Search）</h1><h2 id="安装-hexo-generator-search，在站点的根目录下执行以下命令："><a href="#安装-hexo-generator-search，在站点的根目录下执行以下命令：" class="headerlink" title="安装 hexo-generator-search，在站点的根目录下执行以下命令："></a>安装 hexo-generator-search，在站点的根目录下执行以下命令：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-search --save</div></pre></td></tr></table></figure>
<h2 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h2><h3 id="新增以下内容到任意位置："><a href="#新增以下内容到任意位置：" class="headerlink" title="新增以下内容到任意位置："></a>新增以下内容到任意位置：</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">search:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></div><div class="line"><span class="attr">  field:</span> <span class="string">post</span></div></pre></td></tr></table></figure>
<h3 id="修改url-配置为站点域名"><a href="#修改url-配置为站点域名" class="headerlink" title="修改url:配置为站点域名"></a>修改url:配置为站点域名</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">url:</span> <span class="attr">http://username.github.io/</span></div></pre></td></tr></table></figure>
<h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#创建文章</span></div><div class="line">hexo new [title]</div><div class="line"><span class="comment">#创建分类</span></div><div class="line">hexo new page tags</div><div class="line"><span class="comment">#创建标签</span></div><div class="line">hexo new page categories</div></pre></td></tr></table></figure>
<h2 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h2><h3 id="文章资源文件夹"><a href="#文章资源文件夹" class="headerlink" title="文章资源文件夹"></a>文章资源文件夹</h3><p>Hexo提供了组织化的方式来管理资源,资源可以分布在各个文章上，通过将 <code>config.yml</code>文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>资源文件管理功能打开后，Hexo将会在每一次通过 hexo new title命令创建新文章时自动创建一个文件夹,这个资源文件夹与 markdown 文件同名。将所有与文章有关的资源放在这个关联文件夹中，可以通过相对路径来引用它们</p>
<h3 id="相对路径引用"><a href="#相对路径引用" class="headerlink" title="相对路径引用"></a>相对路径引用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;% asset_img slug [title] %&#125;</div><div class="line">&#123;% asset_link slug [title] %&#125;</div><div class="line">&#123;% asset_path slug %&#125;</div><div class="line">&#123;% link text url title %&#125;</div></pre></td></tr></table></figure>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3>

<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table>
<thead>
<tr>
<th>元字符</th>
<th>作用 </th>
</tr>
</thead>
<tbody>
<tr>
<td>(?: … )</td>
<td>非捕获型括号</td>
</tr>
<tr>
<td>?+ 、*+ 、++ 、 {m,n}+</td>
<td>占有优先量词</td>
</tr>
</tbody>
</table>
<h1 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h1><ul>
<li><a href="http://ms.csdn.net/geek/72697" title="基于Hexo+GitHub Pages 免费搭建个人博客最强教程" target="_blank" rel="external">基于Hexo+GitHub Pages 免费搭建个人博客最强教程</a></li>
<li><a href="http://theme-next.iissnan.com/" title="NexT主题" target="_blank" rel="external">NexT主题</a></li>
<li><a href="https://hexo.io/zh-cn/docs/" title="Hexo文档" target="_blank" rel="external">Hexo文档</a>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
